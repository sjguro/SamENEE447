
kernel7.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020012 	cps	#18
    803c:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8040:	f1020017 	cps	#23
    8044:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8048:	f102001b 	cps	#27
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001f 	cps	#31
    8054:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8058:	ea0000b1 	b	8324 <sysinit>

0000805c <_start_secondary>:
    805c:	f57ff04f 	dsb	sy
    8060:	e320f003 	wfi
    8064:	eafffffd 	b	8060 <_start_secondary+0x4>

00008068 <kernelPrint(char const*)>:
    8068:	e1a01000 	mov	r1, r0
    806c:	e3000e60 	movw	r0, #3680	; 0xe60
    8070:	e3400001 	movt	r0, #1
    8074:	ea0002a2 	b	8b04 <CKernel::write_log(char const*, ...)>

00008078 <kernelPrintV(char const*, ...)>:
    8078:	e92d000f 	push	{r0, r1, r2, r3}
    807c:	e3000e60 	movw	r0, #3680	; 0xe60
    8080:	e3400001 	movt	r0, #1
    8084:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8088:	e24dd00c 	sub	sp, sp, #12
    808c:	e28d3014 	add	r3, sp, #20
    8090:	e1a02003 	mov	r2, r3
    8094:	e59d1010 	ldr	r1, [sp, #16]
    8098:	e58d3004 	str	r3, [sp, #4]
    809c:	eb0002a9 	bl	8b48 <CKernel::write_logV(char const*, std::__va_list)>
    80a0:	e28dd00c 	add	sp, sp, #12
    80a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    80a8:	e28dd010 	add	sp, sp, #16
    80ac:	e12fff1e 	bx	lr

000080b0 <kernelTaskRun(TTask*)>:
    80b0:	e92d4010 	push	{r4, lr}
    80b4:	e1a04000 	mov	r4, r0
    80b8:	e30f0078 	movw	r0, #61560	; 0xf078
    80bc:	e3400000 	movt	r0, #0
    80c0:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    80c4:	e593300c 	ldr	r3, [r3, #12]
    80c8:	e12fff33 	blx	r3
    80cc:	e1a00004 	mov	r0, r4
    80d0:	e3a01000 	mov	r1, #0
    80d4:	e8bd4010 	pop	{r4, lr}
    80d8:	ea0004ab 	b	938c <startScheduler(TTask*, int)>

000080dc <main>:
    80dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    80e0:	e3000e60 	movw	r0, #3680	; 0xe60
    80e4:	e3400001 	movt	r0, #1
    80e8:	e24dde43 	sub	sp, sp, #1072	; 0x430
    80ec:	e24dd008 	sub	sp, sp, #8
    80f0:	eb00025f 	bl	8a74 <CKernel::Initialize()>
    80f4:	e3500000 	cmp	r0, #0
    80f8:	0a00006d 	beq	82b4 <main+0x1d8>
    80fc:	e30f10b4 	movw	r1, #61620	; 0xf0b4
    8100:	e3401000 	movt	r1, #0
    8104:	e3000e60 	movw	r0, #3680	; 0xe60
    8108:	e3400001 	movt	r0, #1
    810c:	eb00027c 	bl	8b04 <CKernel::write_log(char const*, ...)>
    8110:	e3006e60 	movw	r6, #3680	; 0xe60
    8114:	e3406001 	movt	r6, #1
    8118:	eb000373 	bl	8eec <InitializeScheduler()>
    811c:	e28d8e42 	add	r8, sp, #1056	; 0x420
    8120:	eb00038a 	bl	8f50 <getSysCallPointer()>
    8124:	e1a04000 	mov	r4, r0
    8128:	e3082068 	movw	r2, #32872	; 0x8068
    812c:	e3402000 	movt	r2, #0
    8130:	e3083078 	movw	r3, #32888	; 0x8078
    8134:	e3403000 	movt	r3, #0
    8138:	e580200c 	str	r2, [r0, #12]
    813c:	e3a01000 	mov	r1, #0
    8140:	e5843010 	str	r3, [r4, #16]
    8144:	e28d0008 	add	r0, sp, #8
    8148:	e58d4000 	str	r4, [sp]
    814c:	e30830b0 	movw	r3, #32944	; 0x80b0
    8150:	e3403000 	movt	r3, #0
    8154:	e3082c1c 	movw	r2, #35868	; 0x8c1c
    8158:	e3402000 	movt	r2, #0
    815c:	eb0002be 	bl	8c5c <initializeTask>
    8160:	e3a01001 	mov	r1, #1
    8164:	e58d4000 	str	r4, [sp]
    8168:	e28d008c 	add	r0, sp, #140	; 0x8c
    816c:	e309347c 	movw	r3, #38012	; 0x947c
    8170:	e3403000 	movt	r3, #0
    8174:	e3082c1c 	movw	r2, #35868	; 0x8c1c
    8178:	e3402000 	movt	r2, #0
    817c:	eb0002b6 	bl	8c5c <initializeTask>
    8180:	e28d0008 	add	r0, sp, #8
    8184:	eb0003f6 	bl	9164 <AddTask(TTask*)>
    8188:	e28d008c 	add	r0, sp, #140	; 0x8c
    818c:	eb0003f4 	bl	9164 <AddTask(TTask*)>
    8190:	e30f7100 	movw	r7, #61696	; 0xf100
    8194:	e3407000 	movt	r7, #0
    8198:	eb0003eb 	bl	914c <genTaskID()>
    819c:	e58d4000 	str	r4, [sp]
    81a0:	e1a01000 	mov	r1, r0
    81a4:	e3083d08 	movw	r3, #36104	; 0x8d08
    81a8:	e3403000 	movt	r3, #0
    81ac:	e28d0e11 	add	r0, sp, #272	; 0x110
    81b0:	e3082c1c 	movw	r2, #35868	; 0x8c1c
    81b4:	e3402000 	movt	r2, #0
    81b8:	eb0002a7 	bl	8c5c <initializeTask>
    81bc:	e28d5fa6 	add	r5, sp, #664	; 0x298
    81c0:	eb0003e1 	bl	914c <genTaskID()>
    81c4:	e58d4000 	str	r4, [sp]
    81c8:	e1a01000 	mov	r1, r0
    81cc:	e3083d3c 	movw	r3, #36156	; 0x8d3c
    81d0:	e3403000 	movt	r3, #0
    81d4:	e28d0f65 	add	r0, sp, #404	; 0x194
    81d8:	e3082c1c 	movw	r2, #35868	; 0x8c1c
    81dc:	e3402000 	movt	r2, #0
    81e0:	eb00029d 	bl	8c5c <initializeTask>
    81e4:	e2888008 	add	r8, r8, #8
    81e8:	eb0003d7 	bl	914c <genTaskID()>
    81ec:	e58d4000 	str	r4, [sp]
    81f0:	e1a01000 	mov	r1, r0
    81f4:	e3083d70 	movw	r3, #36208	; 0x8d70
    81f8:	e3403000 	movt	r3, #0
    81fc:	e28d0f86 	add	r0, sp, #536	; 0x218
    8200:	e3082c1c 	movw	r2, #35868	; 0x8c1c
    8204:	e3402000 	movt	r2, #0
    8208:	eb000293 	bl	8c5c <initializeTask>
    820c:	e28d0e11 	add	r0, sp, #272	; 0x110
    8210:	eb0003d3 	bl	9164 <AddTask(TTask*)>
    8214:	e28d0f65 	add	r0, sp, #404	; 0x194
    8218:	eb0003d1 	bl	9164 <AddTask(TTask*)>
    821c:	e28d0f86 	add	r0, sp, #536	; 0x218
    8220:	eb0003cf 	bl	9164 <AddTask(TTask*)>
    8224:	e28d0fa7 	add	r0, sp, #668	; 0x29c
    8228:	eb00034b 	bl	8f5c <getScheduler()>
    822c:	e30f10e4 	movw	r1, #61668	; 0xf0e4
    8230:	e3401000 	movt	r1, #0
    8234:	e1a00006 	mov	r0, r6
    8238:	e3a04000 	mov	r4, #0
    823c:	eb000230 	bl	8b04 <CKernel::write_log(char const*, ...)>
    8240:	e5b5c004 	ldr	ip, [r5, #4]!
    8244:	e1a03004 	mov	r3, r4
    8248:	e1a01007 	mov	r1, r7
    824c:	e1a00006 	mov	r0, r6
    8250:	e35c0000 	cmp	ip, #0
    8254:	e2844001 	add	r4, r4, #1
    8258:	0a000002 	beq	8268 <main+0x18c>
    825c:	e59c2000 	ldr	r2, [ip]
    8260:	e58dc000 	str	ip, [sp]
    8264:	eb000226 	bl	8b04 <CKernel::write_log(char const*, ...)>
    8268:	e1550008 	cmp	r5, r8
    826c:	1afffff3 	bne	8240 <main+0x164>
    8270:	e28d0008 	add	r0, sp, #8
    8274:	ebffff8d 	bl	80b0 <kernelTaskRun(TTask*)>
    8278:	e30f1124 	movw	r1, #61732	; 0xf124
    827c:	e3401000 	movt	r1, #0
    8280:	e3000e60 	movw	r0, #3680	; 0xe60
    8284:	e3400001 	movt	r0, #1
    8288:	eb00021d 	bl	8b04 <CKernel::write_log(char const*, ...)>
    828c:	eb000017 	bl	82f0 <halt>
    8290:	e30f1134 	movw	r1, #61748	; 0xf134
    8294:	e3401000 	movt	r1, #0
    8298:	e3000e60 	movw	r0, #3680	; 0xe60
    829c:	e3400001 	movt	r0, #1
    82a0:	eb000217 	bl	8b04 <CKernel::write_log(char const*, ...)>
    82a4:	e3a00000 	mov	r0, #0
    82a8:	e28dde43 	add	sp, sp, #1072	; 0x430
    82ac:	e28dd008 	add	sp, sp, #8
    82b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    82b4:	eb00000d 	bl	82f0 <halt>
    82b8:	eafffff9 	b	82a4 <main+0x1c8>

000082bc <_GLOBAL__sub_I__Z11kernelPrintPKc>:
    82bc:	e92d4010 	push	{r4, lr}
    82c0:	e3004e60 	movw	r4, #3680	; 0xe60
    82c4:	e3404001 	movt	r4, #1
    82c8:	e1a00004 	mov	r0, r4
    82cc:	eb0001c2 	bl	89dc <CKernel::CKernel()>
    82d0:	e1a00004 	mov	r0, r4
    82d4:	e30129a0 	movw	r2, #6560	; 0x19a0
    82d8:	e3402001 	movt	r2, #1
    82dc:	e3081ba8 	movw	r1, #35752	; 0x8ba8
    82e0:	e3401000 	movt	r1, #0
    82e4:	e8bd4010 	pop	{r4, lr}
    82e8:	eaffffff 	b	82ec <__aeabi_atexit>

000082ec <__aeabi_atexit>:
    82ec:	e12fff1e 	bx	lr

000082f0 <halt>:
    82f0:	f10c0080 	cpsid	i
    82f4:	f57ff04f 	dsb	sy
    82f8:	e320f003 	wfi
    82fc:	eafffffc 	b	82f4 <halt+0x4>

00008300 <reboot>:
    8300:	e3a03000 	mov	r3, #0
    8304:	e3433f10 	movt	r3, #16144	; 0x3f10
    8308:	e3a01001 	mov	r1, #1
    830c:	e3451a00 	movt	r1, #23040	; 0x5a00
    8310:	e3a02020 	mov	r2, #32
    8314:	e3452a00 	movt	r2, #23040	; 0x5a00
    8318:	e5831024 	str	r1, [r3, #36]	; 0x24
    831c:	e583201c 	str	r2, [r3, #28]
    8320:	eafffffe 	b	8320 <reboot+0x20>

00008324 <sysinit>:
    8324:	e92d4030 	push	{r4, r5, lr}
    8328:	e24dd01c 	sub	sp, sp, #28
    832c:	eb000125 	bl	87c8 <InvalidateDataCacheL1Only>
    8330:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    8334:	e308305c 	movw	r3, #32860	; 0x805c
    8338:	e3403000 	movt	r3, #0
    833c:	e582309c 	str	r3, [r2, #156]	; 0x9c
    8340:	e58230ac 	str	r3, [r2, #172]	; 0xac
    8344:	e58230bc 	str	r3, [r2, #188]	; 0xbc
    8348:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    834c:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    8350:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    8354:	f57ff06f 	isb	sy
    8358:	eee82a10 	vmsr	fpexc, r2
    835c:	e3a01000 	mov	r1, #0
    8360:	eee11a10 	vmsr	fpscr, r1
    8364:	e3003e60 	movw	r3, #3680	; 0xe60
    8368:	e3403001 	movt	r3, #1
    836c:	e3012ba0 	movw	r2, #7072	; 0x1ba0
    8370:	e3402001 	movt	r2, #1
    8374:	e1530002 	cmp	r3, r2
    8378:	2a000002 	bcs	8388 <sysinit+0x64>
    837c:	e4c31001 	strb	r1, [r3], #1
    8380:	e1530002 	cmp	r3, r2
    8384:	1afffffc 	bne	837c <sysinit+0x58>
    8388:	e1a0000d 	mov	r0, sp
    838c:	e3005d78 	movw	r5, #3448	; 0xd78
    8390:	e3405001 	movt	r5, #1
    8394:	e3004d70 	movw	r4, #3440	; 0xd70
    8398:	e3404001 	movt	r4, #1
    839c:	eb00000a 	bl	83cc <CMachineInfo::CMachineInfo()>
    83a0:	e1540005 	cmp	r4, r5
    83a4:	2a000003 	bcs	83b8 <sysinit+0x94>
    83a8:	e4943004 	ldr	r3, [r4], #4
    83ac:	e12fff33 	blx	r3
    83b0:	e1540005 	cmp	r4, r5
    83b4:	3afffffb 	bcc	83a8 <sysinit+0x84>
    83b8:	ebffff47 	bl	80dc <main>
    83bc:	e3500001 	cmp	r0, #1
    83c0:	0a000000 	beq	83c8 <sysinit+0xa4>
    83c4:	ebffffc9 	bl	82f0 <halt>
    83c8:	ebffffcc 	bl	8300 <reboot>

000083cc <CMachineInfo::CMachineInfo()>:
    83cc:	e30129a4 	movw	r2, #6564	; 0x19a4
    83d0:	e3402001 	movt	r2, #1
    83d4:	e92d4030 	push	{r4, r5, lr}
    83d8:	e3a03000 	mov	r3, #0
    83dc:	e1a04000 	mov	r4, r0
    83e0:	e5925000 	ldr	r5, [r2]
    83e4:	e3a0000a 	mov	r0, #10
    83e8:	e3a01003 	mov	r1, #3
    83ec:	e24dd024 	sub	sp, sp, #36	; 0x24
    83f0:	e1550003 	cmp	r5, r3
    83f4:	e5c40004 	strb	r0, [r4, #4]
    83f8:	e5c41010 	strb	r1, [r4, #16]
    83fc:	e5843000 	str	r3, [r4]
    8400:	e5843008 	str	r3, [r4, #8]
    8404:	e584300c 	str	r3, [r4, #12]
    8408:	e5843014 	str	r3, [r4, #20]
    840c:	0a00000e 	beq	844c <CMachineInfo::CMachineInfo()+0x80>
    8410:	e595e000 	ldr	lr, [r5]
    8414:	e5d5c004 	ldrb	ip, [r5, #4]
    8418:	e5950008 	ldr	r0, [r5, #8]
    841c:	e595100c 	ldr	r1, [r5, #12]
    8420:	e5d52010 	ldrb	r2, [r5, #16]
    8424:	e5953014 	ldr	r3, [r5, #20]
    8428:	e584e000 	str	lr, [r4]
    842c:	e5c4c004 	strb	ip, [r4, #4]
    8430:	e5840008 	str	r0, [r4, #8]
    8434:	e584100c 	str	r1, [r4, #12]
    8438:	e5c42010 	strb	r2, [r4, #16]
    843c:	e5843014 	str	r3, [r4, #20]
    8440:	e1a00004 	mov	r0, r4
    8444:	e28dd024 	add	sp, sp, #36	; 0x24
    8448:	e8bd8030 	pop	{r4, r5, pc}
    844c:	e28d0008 	add	r0, sp, #8
    8450:	e5824000 	str	r4, [r2]
    8454:	eb000545 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    8458:	e3a03010 	mov	r3, #16
    845c:	e58d5000 	str	r5, [sp]
    8460:	e28d0008 	add	r0, sp, #8
    8464:	e3a01002 	mov	r1, #2
    8468:	e3401001 	movt	r1, #1
    846c:	e08d2003 	add	r2, sp, r3
    8470:	eb000586 	bl	9a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8474:	e3500000 	cmp	r0, #0
    8478:	0a00000c 	beq	84b0 <CMachineInfo::CMachineInfo()+0xe4>
    847c:	e59d201c 	ldr	r2, [sp, #28]
    8480:	e2123502 	ands	r3, r2, #8388608	; 0x800000
    8484:	e5842000 	str	r2, [r4]
    8488:	1a00000b 	bne	84bc <CMachineInfo::CMachineInfo()+0xf0>
    848c:	e3a01002 	mov	r1, #2
    8490:	e59f00fc 	ldr	r0, [pc, #252]	; 8594 <CMachineInfo::CMachineInfo()+0x1c8>
    8494:	ea000000 	b	849c <CMachineInfo::CMachineInfo()+0xd0>
    8498:	e7901203 	ldr	r1, [r0, r3, lsl #4]
    849c:	e1520001 	cmp	r2, r1
    84a0:	0a000011 	beq	84ec <CMachineInfo::CMachineInfo()+0x120>
    84a4:	e2833001 	add	r3, r3, #1
    84a8:	e3530011 	cmp	r3, #17
    84ac:	1afffff9 	bne	8498 <CMachineInfo::CMachineInfo()+0xcc>
    84b0:	e28d0008 	add	r0, sp, #8
    84b4:	eb000533 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    84b8:	eaffffe0 	b	8440 <CMachineInfo::CMachineInfo()+0x74>
    84bc:	e59f10d4 	ldr	r1, [pc, #212]	; 8598 <CMachineInfo::CMachineInfo()+0x1cc>
    84c0:	e1a03005 	mov	r3, r5
    84c4:	e7e70252 	ubfx	r0, r2, #4, #8
    84c8:	ea000000 	b	84d0 <CMachineInfo::CMachineInfo()+0x104>
    84cc:	e511500c 	ldr	r5, [r1, #-12]
    84d0:	e1550000 	cmp	r5, r0
    84d4:	e281100c 	add	r1, r1, #12
    84d8:	0a000011 	beq	8524 <CMachineInfo::CMachineInfo()+0x158>
    84dc:	e2833001 	add	r3, r3, #1
    84e0:	e3530008 	cmp	r3, #8
    84e4:	1afffff8 	bne	84cc <CMachineInfo::CMachineInfo()+0x100>
    84e8:	eafffff0 	b	84b0 <CMachineInfo::CMachineInfo()+0xe4>
    84ec:	e30f2144 	movw	r2, #61764	; 0xf144
    84f0:	e3402000 	movt	r2, #0
    84f4:	e3a01000 	mov	r1, #0
    84f8:	e3a00001 	mov	r0, #1
    84fc:	e0823203 	add	r3, r2, r3, lsl #4
    8500:	e5c41010 	strb	r1, [r4, #16]
    8504:	e5840008 	str	r0, [r4, #8]
    8508:	e5d31064 	ldrb	r1, [r3, #100]	; 0x64
    850c:	e5932068 	ldr	r2, [r3, #104]	; 0x68
    8510:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    8514:	e5c41004 	strb	r1, [r4, #4]
    8518:	e584200c 	str	r2, [r4, #12]
    851c:	e5843014 	str	r3, [r4, #20]
    8520:	eaffffe2 	b	84b0 <CMachineInfo::CMachineInfo()+0xe4>
    8524:	e3a0c00c 	mov	ip, #12
    8528:	e7e2ea52 	ubfx	lr, r2, #20, #3
    852c:	e30f1144 	movw	r1, #61764	; 0xf144
    8530:	e3401000 	movt	r1, #0
    8534:	e3a00c01 	mov	r0, #256	; 0x100
    8538:	e7e35652 	ubfx	r5, r2, #12, #4
    853c:	e021139c 	mla	r1, ip, r3, r1
    8540:	e3550002 	cmp	r5, #2
    8544:	e202300f 	and	r3, r2, #15
    8548:	e5c45010 	strb	r5, [r4, #16]
    854c:	e5d1c004 	ldrb	ip, [r1, #4]
    8550:	e1a02e10 	lsl	r2, r0, lr
    8554:	e5842014 	str	r2, [r4, #20]
    8558:	83a02003 	movhi	r2, #3
    855c:	85c42010 	strbhi	r2, [r4, #16]
    8560:	e35e0000 	cmp	lr, #0
    8564:	035c0003 	cmpeq	ip, #3
    8568:	e5911008 	ldr	r1, [r1, #8]
    856c:	e2833001 	add	r3, r3, #1
    8570:	e5c4c004 	strb	ip, [r4, #4]
    8574:	e5841008 	str	r1, [r4, #8]
    8578:	e584300c 	str	r3, [r4, #12]
    857c:	1affffcb 	bne	84b0 <CMachineInfo::CMachineInfo()+0xe4>
    8580:	e3530001 	cmp	r3, #1
    8584:	13a03002 	movne	r3, #2
    8588:	03a03001 	moveq	r3, #1
    858c:	e5c43004 	strb	r3, [r4, #4]
    8590:	eaffffc6 	b	84b0 <CMachineInfo::CMachineInfo()+0xe4>
    8594:	0000f1a4 	.word	0x0000f1a4
    8598:	0000f150 	.word	0x0000f150

0000859c <CMachineInfo::~CMachineInfo()>:
    859c:	e30139a4 	movw	r3, #6564	; 0x19a4
    85a0:	e3403001 	movt	r3, #1
    85a4:	e3a0100a 	mov	r1, #10
    85a8:	e5c01004 	strb	r1, [r0, #4]
    85ac:	e5932000 	ldr	r2, [r3]
    85b0:	e1500002 	cmp	r0, r2
    85b4:	03a02000 	moveq	r2, #0
    85b8:	05832000 	streq	r2, [r3]
    85bc:	e12fff1e 	bx	lr

000085c0 <CMachineInfo::GetMachineModel() const>:
    85c0:	e5d00004 	ldrb	r0, [r0, #4]
    85c4:	e12fff1e 	bx	lr

000085c8 <CMachineInfo::GetMachineName() const>:
    85c8:	e5d02004 	ldrb	r2, [r0, #4]
    85cc:	e30f3144 	movw	r3, #61764	; 0xf144
    85d0:	e3403000 	movt	r3, #0
    85d4:	e0833102 	add	r3, r3, r2, lsl #2
    85d8:	e5930170 	ldr	r0, [r3, #368]	; 0x170
    85dc:	e12fff1e 	bx	lr

000085e0 <CMachineInfo::GetModelMajor() const>:
    85e0:	e5900008 	ldr	r0, [r0, #8]
    85e4:	e12fff1e 	bx	lr

000085e8 <CMachineInfo::GetModelRevision() const>:
    85e8:	e590000c 	ldr	r0, [r0, #12]
    85ec:	e12fff1e 	bx	lr

000085f0 <CMachineInfo::GetSoCType() const>:
    85f0:	e5d00010 	ldrb	r0, [r0, #16]
    85f4:	e12fff1e 	bx	lr

000085f8 <CMachineInfo::GetRAMSize() const>:
    85f8:	e5900014 	ldr	r0, [r0, #20]
    85fc:	e12fff1e 	bx	lr

00008600 <CMachineInfo::GetSoCName() const>:
    8600:	e5d02010 	ldrb	r2, [r0, #16]
    8604:	e30f3144 	movw	r3, #61764	; 0xf144
    8608:	e3403000 	movt	r3, #0
    860c:	e0833102 	add	r3, r3, r2, lsl #2
    8610:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    8614:	e12fff1e 	bx	lr

00008618 <CMachineInfo::GetRevisionRaw() const>:
    8618:	e5900000 	ldr	r0, [r0]
    861c:	e12fff1e 	bx	lr

00008620 <CMachineInfo::GetClockRate(unsigned int) const>:
    8620:	e92d4070 	push	{r4, r5, r6, lr}
    8624:	e1a06000 	mov	r6, r0
    8628:	e1a05001 	mov	r5, r1
    862c:	e24dd028 	sub	sp, sp, #40	; 0x28
    8630:	e28d000c 	add	r0, sp, #12
    8634:	eb0004cd 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    8638:	e3a03004 	mov	r3, #4
    863c:	e58d3000 	str	r3, [sp]
    8640:	e3a03014 	mov	r3, #20
    8644:	e28d000c 	add	r0, sp, #12
    8648:	e3a01002 	mov	r1, #2
    864c:	e3401003 	movt	r1, #3
    8650:	e08d2003 	add	r2, sp, r3
    8654:	e58d5020 	str	r5, [sp, #32]
    8658:	eb00050c 	bl	9a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    865c:	e2504000 	subs	r4, r0, #0
    8660:	159d4024 	ldrne	r4, [sp, #36]	; 0x24
    8664:	1a00000b 	bne	8698 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    8668:	e3550002 	cmp	r5, #2
    866c:	0a00000e 	beq	86ac <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    8670:	e3550004 	cmp	r5, #4
    8674:	0a000012 	beq	86c4 <CMachineInfo::GetClockRate(unsigned int) const+0xa4>
    8678:	e3550001 	cmp	r5, #1
    867c:	0a00000d 	beq	86b8 <CMachineInfo::GetClockRate(unsigned int) const+0x98>
    8680:	e30f12f0 	movw	r1, #62192	; 0xf2f0
    8684:	e3401000 	movt	r1, #0
    8688:	e3000bb4 	movw	r0, #2996	; 0xbb4
    868c:	e3400001 	movt	r0, #1
    8690:	e300210d 	movw	r2, #269	; 0x10d
    8694:	eb001051 	bl	c7e0 <assertion_failed>
    8698:	e28d000c 	add	r0, sp, #12
    869c:	eb0004b9 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    86a0:	e1a00004 	mov	r0, r4
    86a4:	e28dd028 	add	sp, sp, #40	; 0x28
    86a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    86ac:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    86b0:	e34042dc 	movt	r4, #732	; 0x2dc
    86b4:	eafffff7 	b	8698 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    86b8:	e3a04ce1 	mov	r4, #57600	; 0xe100
    86bc:	e34045f5 	movt	r4, #1525	; 0x5f5
    86c0:	eafffff4 	b	8698 <CMachineInfo::GetClockRate(unsigned int) const+0x78>
    86c4:	e5962008 	ldr	r2, [r6, #8]
    86c8:	e3a03ca3 	mov	r3, #41728	; 0xa300
    86cc:	e34131e1 	movt	r3, #4577	; 0x11e1
    86d0:	e3520002 	cmp	r2, #2
    86d4:	e30b4280 	movw	r4, #45696	; 0xb280
    86d8:	e3404ee6 	movt	r4, #3814	; 0xee6
    86dc:	81a04003 	movhi	r4, r3
    86e0:	eaffffec 	b	8698 <CMachineInfo::GetClockRate(unsigned int) const+0x78>

000086e4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    86e4:	e3510036 	cmp	r1, #54	; 0x36
    86e8:	0a00000f 	beq	872c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x48>
    86ec:	e3510037 	cmp	r1, #55	; 0x37
    86f0:	1a000004 	bne	8708 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    86f4:	e5d03004 	ldrb	r3, [r0, #4]
    86f8:	e3530003 	cmp	r3, #3
    86fc:	c3a00028 	movgt	r0, #40	; 0x28
    8700:	d3a0002d 	movle	r0, #45	; 0x2d
    8704:	e12fff1e 	bx	lr
    8708:	e92d4010 	push	{r4, lr}
    870c:	e3a02f4e 	mov	r2, #312	; 0x138
    8710:	e30f12f0 	movw	r1, #62192	; 0xf2f0
    8714:	e3401000 	movt	r1, #0
    8718:	e3000bb4 	movw	r0, #2996	; 0xbb4
    871c:	e3400001 	movt	r0, #1
    8720:	eb00102e 	bl	c7e0 <assertion_failed>
    8724:	e3a00000 	mov	r0, #0
    8728:	e8bd8010 	pop	{r4, pc}
    872c:	e5d03004 	ldrb	r3, [r0, #4]
    8730:	e3530003 	cmp	r3, #3
    8734:	ca000001 	bgt	8740 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x5c>
    8738:	e3a00028 	mov	r0, #40	; 0x28
    873c:	e12fff1e 	bx	lr
    8740:	e5903008 	ldr	r3, [r0, #8]
    8744:	e3530003 	cmp	r3, #3
    8748:	33a0002d 	movcc	r0, #45	; 0x2d
    874c:	23a00029 	movcs	r0, #41	; 0x29
    8750:	e12fff1e 	bx	lr

00008754 <CMachineInfo::GetDevice(TDeviceId) const>:
    8754:	e3510000 	cmp	r1, #0
    8758:	1a000003 	bne	876c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    875c:	e5d00004 	ldrb	r0, [r0, #4]
    8760:	e2500001 	subs	r0, r0, #1
    8764:	13a00001 	movne	r0, #1
    8768:	e12fff1e 	bx	lr
    876c:	e92d4010 	push	{r4, lr}
    8770:	e3002151 	movw	r2, #337	; 0x151
    8774:	e30f12f0 	movw	r1, #62192	; 0xf2f0
    8778:	e3401000 	movt	r1, #0
    877c:	e3000bb4 	movw	r0, #2996	; 0xbb4
    8780:	e3400001 	movt	r0, #1
    8784:	eb001015 	bl	c7e0 <assertion_failed>
    8788:	e3a00000 	mov	r0, #0
    878c:	e8bd8010 	pop	{r4, pc}

00008790 <CMachineInfo::Get()>:
    8790:	e92d4010 	push	{r4, lr}
    8794:	e30149a4 	movw	r4, #6564	; 0x19a4
    8798:	e3404001 	movt	r4, #1
    879c:	e5940000 	ldr	r0, [r4]
    87a0:	e3500000 	cmp	r0, #0
    87a4:	18bd8010 	popne	{r4, pc}
    87a8:	e300215a 	movw	r2, #346	; 0x15a
    87ac:	e30f12f0 	movw	r1, #62192	; 0xf2f0
    87b0:	e3401000 	movt	r1, #0
    87b4:	e30f0300 	movw	r0, #62208	; 0xf300
    87b8:	e3400000 	movt	r0, #0
    87bc:	eb001007 	bl	c7e0 <assertion_failed>
    87c0:	e5940000 	ldr	r0, [r4]
    87c4:	e8bd8010 	pop	{r4, pc}

000087c8 <InvalidateDataCacheL1Only>:
    87c8:	e92d0070 	push	{r4, r5, r6}
    87cc:	e3a00000 	mov	r0, #0
    87d0:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
    87d4:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
    87d8:	e3071fff 	movw	r1, #32767	; 0x7fff
    87dc:	e00126a0 	and	r2, r1, r0, lsr #13
    87e0:	e30013ff 	movw	r1, #1023	; 0x3ff
    87e4:	e00131a0 	and	r3, r1, r0, lsr #3
    87e8:	e2822001 	add	r2, r2, #1
    87ec:	e2000007 	and	r0, r0, #7
    87f0:	e2800004 	add	r0, r0, #4
    87f4:	e16f1f13 	clz	r1, r3
    87f8:	e2834001 	add	r4, r3, #1
    87fc:	e2422001 	sub	r2, r2, #1
    8800:	e1a03004 	mov	r3, r4
    8804:	e2533001 	subs	r3, r3, #1
    8808:	e1a05113 	lsl	r5, r3, r1
    880c:	e1a06012 	lsl	r6, r2, r0
    8810:	e1855006 	orr	r5, r5, r6
    8814:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
    8818:	cafffff9 	bgt	8804 <InvalidateDataCacheL1Only+0x3c>
    881c:	e3520000 	cmp	r2, #0
    8820:	cafffff5 	bgt	87fc <InvalidateDataCacheL1Only+0x34>
    8824:	f57ff04e 	dsb	st
    8828:	f57ff06f 	isb	sy
    882c:	e8bd0070 	pop	{r4, r5, r6}
    8830:	e12fff1e 	bx	lr

00008834 <InvalidateDataCache>:
    8834:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    8838:	f57ff05f 	dmb	sy
    883c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    8840:	e1a03ba0 	lsr	r3, r0, #23
    8844:	e213300e 	ands	r3, r3, #14
    8848:	0a00001d 	beq	88c4 <InvalidateDataCache+0x90>
    884c:	e3a0a000 	mov	sl, #0
    8850:	e08a20aa 	add	r2, sl, sl, lsr #1
    8854:	e1a01230 	lsr	r1, r0, r2
    8858:	e2011007 	and	r1, r1, #7
    885c:	e3510002 	cmp	r1, #2
    8860:	ba000014 	blt	88b8 <InvalidateDataCache+0x84>
    8864:	e10f9000 	mrs	r9, CPSR
    8868:	f10c0080 	cpsid	i
    886c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    8870:	f57ff06f 	isb	sy
    8874:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    8878:	e121f009 	msr	CPSR_c, r9
    887c:	e2012007 	and	r2, r1, #7
    8880:	e2822004 	add	r2, r2, #4
    8884:	e30043ff 	movw	r4, #1023	; 0x3ff
    8888:	e01441a1 	ands	r4, r4, r1, lsr #3
    888c:	e16f5f14 	clz	r5, r4
    8890:	e3077fff 	movw	r7, #32767	; 0x7fff
    8894:	e01776a1 	ands	r7, r7, r1, lsr #13
    8898:	e1a09007 	mov	r9, r7
    889c:	e18ab514 	orr	fp, sl, r4, lsl r5
    88a0:	e18bb219 	orr	fp, fp, r9, lsl r2
    88a4:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
    88a8:	e2599001 	subs	r9, r9, #1
    88ac:	aafffffa 	bge	889c <InvalidateDataCache+0x68>
    88b0:	e2544001 	subs	r4, r4, #1
    88b4:	aafffff7 	bge	8898 <InvalidateDataCache+0x64>
    88b8:	e28aa002 	add	sl, sl, #2
    88bc:	e153000a 	cmp	r3, sl
    88c0:	caffffe2 	bgt	8850 <InvalidateDataCache+0x1c>
    88c4:	e3a0a000 	mov	sl, #0
    88c8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    88cc:	f57ff04e 	dsb	st
    88d0:	f57ff06f 	isb	sy
    88d4:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    88d8:	e12fff1e 	bx	lr

000088dc <CleanDataCache>:
    88dc:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
    88e0:	f57ff05f 	dmb	sy
    88e4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
    88e8:	e1a03ba0 	lsr	r3, r0, #23
    88ec:	e213300e 	ands	r3, r3, #14
    88f0:	0a00001d 	beq	896c <CleanDataCache+0x90>
    88f4:	e3a0a000 	mov	sl, #0
    88f8:	e08a20aa 	add	r2, sl, sl, lsr #1
    88fc:	e1a01230 	lsr	r1, r0, r2
    8900:	e2011007 	and	r1, r1, #7
    8904:	e3510002 	cmp	r1, #2
    8908:	ba000014 	blt	8960 <CleanDataCache+0x84>
    890c:	e10f9000 	mrs	r9, CPSR
    8910:	f10c0080 	cpsid	i
    8914:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    8918:	f57ff06f 	isb	sy
    891c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
    8920:	e121f009 	msr	CPSR_c, r9
    8924:	e2012007 	and	r2, r1, #7
    8928:	e2822004 	add	r2, r2, #4
    892c:	e30043ff 	movw	r4, #1023	; 0x3ff
    8930:	e01441a1 	ands	r4, r4, r1, lsr #3
    8934:	e16f5f14 	clz	r5, r4
    8938:	e3077fff 	movw	r7, #32767	; 0x7fff
    893c:	e01776a1 	ands	r7, r7, r1, lsr #13
    8940:	e1a09007 	mov	r9, r7
    8944:	e18ab514 	orr	fp, sl, r4, lsl r5
    8948:	e18bb219 	orr	fp, fp, r9, lsl r2
    894c:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
    8950:	e2599001 	subs	r9, r9, #1
    8954:	aafffffa 	bge	8944 <CleanDataCache+0x68>
    8958:	e2544001 	subs	r4, r4, #1
    895c:	aafffff7 	bge	8940 <CleanDataCache+0x64>
    8960:	e28aa002 	add	sl, sl, #2
    8964:	e153000a 	cmp	r3, sl
    8968:	caffffe2 	bgt	88f8 <CleanDataCache+0x1c>
    896c:	e3a0a000 	mov	sl, #0
    8970:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
    8974:	f57ff04e 	dsb	st
    8978:	f57ff06f 	isb	sy
    897c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
    8980:	e12fff1e 	bx	lr

00008984 <CleanAndInvalidateDataCacheRange>:
    8984:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
    8988:	e1a03823 	lsr	r3, r3, #16
    898c:	e203300f 	and	r3, r3, #15
    8990:	e3a02004 	mov	r2, #4
    8994:	e1a02312 	lsl	r2, r2, r3
    8998:	e0801001 	add	r1, r0, r1
    899c:	e2423001 	sub	r3, r2, #1
    89a0:	e1c00003 	bic	r0, r0, r3
    89a4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
    89a8:	e0800002 	add	r0, r0, r2
    89ac:	e1500001 	cmp	r0, r1
    89b0:	3afffffb 	bcc	89a4 <CleanAndInvalidateDataCacheRange+0x20>
    89b4:	f57ff04e 	dsb	st
    89b8:	e12fff1e 	bx	lr

000089bc <CKernel::TimerHandler(unsigned int, void*, void*)>:
    89bc:	e3510000 	cmp	r1, #0
    89c0:	112fff1e 	bxne	lr
    89c4:	e30f1404 	movw	r1, #62468	; 0xf404
    89c8:	e3401000 	movt	r1, #0
    89cc:	e30f0410 	movw	r0, #62480	; 0xf410
    89d0:	e3400000 	movt	r0, #0
    89d4:	e3a02078 	mov	r2, #120	; 0x78
    89d8:	ea000f80 	b	c7e0 <assertion_failed>

000089dc <CKernel::CKernel()>:
    89dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    89e0:	e3a01001 	mov	r1, #1
    89e4:	e2807010 	add	r7, r0, #16
    89e8:	e1a04000 	mov	r4, r0
    89ec:	eb0004b5 	bl	9cc8 <CMemorySystem::CMemorySystem(int)>
    89f0:	e1a00007 	mov	r0, r7
    89f4:	e2846e8b 	add	r6, r4, #2224	; 0x8b0
    89f8:	eb00097f 	bl	affc <CKernelOptions::CKernelOptions()>
    89fc:	e2840e85 	add	r0, r4, #2128	; 0x850
    8a00:	eb001029 	bl	caac <CDeviceNameService::CDeviceNameService()>
    8a04:	e2840e85 	add	r0, r4, #2128	; 0x850
    8a08:	e3a03000 	mov	r3, #0
    8a0c:	e3a02d0f 	mov	r2, #960	; 0x3c0
    8a10:	e3a01b01 	mov	r1, #1024	; 0x400
    8a14:	e2800008 	add	r0, r0, #8
    8a18:	eb000b49 	bl	b744 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>
    8a1c:	e2845eaf 	add	r5, r4, #2800	; 0xaf0
    8a20:	e2860008 	add	r0, r6, #8
    8a24:	e286600c 	add	r6, r6, #12
    8a28:	eb00153b 	bl	df1c <CExceptionHandler::CExceptionHandler()>
    8a2c:	e285500c 	add	r5, r5, #12
    8a30:	e1a00006 	mov	r0, r6
    8a34:	eb001602 	bl	e244 <CInterruptSystem::CInterruptSystem()>
    8a38:	e1a01006 	mov	r1, r6
    8a3c:	e1a00005 	mov	r0, r5
    8a40:	eb00050a 	bl	9e70 <CTimer::CTimer(CInterruptSystem*)>
    8a44:	e1a00007 	mov	r0, r7
    8a48:	eb00093e 	bl	af48 <CKernelOptions::GetLogLevel() const>
    8a4c:	e1a01000 	mov	r1, r0
    8a50:	e2840eb2 	add	r0, r4, #2848	; 0xb20
    8a54:	e1a02005 	mov	r2, r5
    8a58:	e2800004 	add	r0, r0, #4
    8a5c:	eb0010c0 	bl	cd64 <CLogger::CLogger(unsigned int, CTimer*)>
    8a60:	e30139a8 	movw	r3, #6568	; 0x19a8
    8a64:	e3403001 	movt	r3, #1
    8a68:	e1a00004 	mov	r0, r4
    8a6c:	e5834000 	str	r4, [r3]
    8a70:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008a74 <CKernel::Initialize()>:
    8a74:	e92d4070 	push	{r4, r5, r6, lr}
    8a78:	e2804e85 	add	r4, r0, #2128	; 0x850
    8a7c:	e2844008 	add	r4, r4, #8
    8a80:	e1a05000 	mov	r5, r0
    8a84:	e1a00004 	mov	r0, r4
    8a88:	eb000ec4 	bl	c5a0 <CScreenDevice::Initialize()>
    8a8c:	e3500000 	cmp	r0, #0
    8a90:	1a000001 	bne	8a9c <CKernel::Initialize()+0x28>
    8a94:	e3a00000 	mov	r0, #0
    8a98:	e8bd8070 	pop	{r4, r5, r6, pc}
    8a9c:	e2850eb2 	add	r0, r5, #2848	; 0xb20
    8aa0:	e1a01004 	mov	r1, r4
    8aa4:	e2800004 	add	r0, r0, #4
    8aa8:	eb0011b4 	bl	d180 <CLogger::Initialize(CDevice*)>
    8aac:	e3500000 	cmp	r0, #0
    8ab0:	0afffff7 	beq	8a94 <CKernel::Initialize()+0x20>
    8ab4:	e2850e8b 	add	r0, r5, #2224	; 0x8b0
    8ab8:	e280000c 	add	r0, r0, #12
    8abc:	eb0015f3 	bl	e290 <CInterruptSystem::Initialize()>
    8ac0:	e3500000 	cmp	r0, #0
    8ac4:	0afffff2 	beq	8a94 <CKernel::Initialize()+0x20>
    8ac8:	e2850eaf 	add	r0, r5, #2800	; 0xaf0
    8acc:	e280000c 	add	r0, r0, #12
    8ad0:	e8bd4070 	pop	{r4, r5, r6, lr}
    8ad4:	ea00074e 	b	a814 <CTimer::Initialize()>

00008ad8 <CKernel::Run()>:
    8ad8:	e2800eb2 	add	r0, r0, #2848	; 0xb20
    8adc:	e92d4010 	push	{r4, lr}
    8ae0:	e2800004 	add	r0, r0, #4
    8ae4:	e3a02003 	mov	r2, #3
    8ae8:	e30f341c 	movw	r3, #62492	; 0xf41c
    8aec:	e3403000 	movt	r3, #0
    8af0:	e30f13fc 	movw	r1, #62460	; 0xf3fc
    8af4:	e3401000 	movt	r1, #0
    8af8:	eb001194 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8afc:	e3a00001 	mov	r0, #1
    8b00:	e8bd8010 	pop	{r4, pc}

00008b04 <CKernel::write_log(char const*, ...)>:
    8b04:	e92d000e 	push	{r1, r2, r3}
    8b08:	e2800eb2 	add	r0, r0, #2848	; 0xb20
    8b0c:	e2800004 	add	r0, r0, #4
    8b10:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8b14:	e3a02003 	mov	r2, #3
    8b18:	e30f13fc 	movw	r1, #62460	; 0xf3fc
    8b1c:	e3401000 	movt	r1, #0
    8b20:	e24dd010 	sub	sp, sp, #16
    8b24:	e28dc018 	add	ip, sp, #24
    8b28:	e58dc000 	str	ip, [sp]
    8b2c:	e59d3014 	ldr	r3, [sp, #20]
    8b30:	e58dc00c 	str	ip, [sp, #12]
    8b34:	eb001105 	bl	cf50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    8b38:	e28dd010 	add	sp, sp, #16
    8b3c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    8b40:	e28dd00c 	add	sp, sp, #12
    8b44:	e12fff1e 	bx	lr

00008b48 <CKernel::write_logV(char const*, std::__va_list)>:
    8b48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8b4c:	e2800eb2 	add	r0, r0, #2848	; 0xb20
    8b50:	e1a03001 	mov	r3, r1
    8b54:	e24dd00c 	sub	sp, sp, #12
    8b58:	e2800004 	add	r0, r0, #4
    8b5c:	e30f13fc 	movw	r1, #62460	; 0xf3fc
    8b60:	e3401000 	movt	r1, #0
    8b64:	e58d2000 	str	r2, [sp]
    8b68:	e3a02003 	mov	r2, #3
    8b6c:	eb0010f7 	bl	cf50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    8b70:	e28dd00c 	add	sp, sp, #12
    8b74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008b78 <CKernel::set_timer(unsigned int)>:
    8b78:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8b7c:	e1a03000 	mov	r3, r0
    8b80:	e3a02000 	mov	r2, #0
    8b84:	e24dd00c 	sub	sp, sp, #12
    8b88:	e2800eaf 	add	r0, r0, #2800	; 0xaf0
    8b8c:	e280000c 	add	r0, r0, #12
    8b90:	e58d2000 	str	r2, [sp]
    8b94:	e30829bc 	movw	r2, #35260	; 0x89bc
    8b98:	e3402000 	movt	r2, #0
    8b9c:	eb0005c3 	bl	a2b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    8ba0:	e28dd00c 	add	sp, sp, #12
    8ba4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008ba8 <CKernel::~CKernel()>:
    8ba8:	e30139a8 	movw	r3, #6568	; 0x19a8
    8bac:	e3403001 	movt	r3, #1
    8bb0:	e92d4010 	push	{r4, lr}
    8bb4:	e1a04000 	mov	r4, r0
    8bb8:	e2800eb2 	add	r0, r0, #2848	; 0xb20
    8bbc:	e3a02000 	mov	r2, #0
    8bc0:	e2800004 	add	r0, r0, #4
    8bc4:	e5832000 	str	r2, [r3]
    8bc8:	eb001077 	bl	cdac <CLogger::~CLogger()>
    8bcc:	e2840eaf 	add	r0, r4, #2800	; 0xaf0
    8bd0:	e280000c 	add	r0, r0, #12
    8bd4:	eb0004c5 	bl	9ef0 <CTimer::~CTimer()>
    8bd8:	e2840e8b 	add	r0, r4, #2224	; 0x8b0
    8bdc:	e280000c 	add	r0, r0, #12
    8be0:	eb0015a5 	bl	e27c <CInterruptSystem::~CInterruptSystem()>
    8be4:	e2840e8b 	add	r0, r4, #2224	; 0x8b0
    8be8:	e2800008 	add	r0, r0, #8
    8bec:	eb0014ee 	bl	dfac <CExceptionHandler::~CExceptionHandler()>
    8bf0:	e2840e85 	add	r0, r4, #2128	; 0x850
    8bf4:	e2800008 	add	r0, r0, #8
    8bf8:	eb000a7b 	bl	b5ec <CScreenDevice::~CScreenDevice()>
    8bfc:	e2840e85 	add	r0, r4, #2128	; 0x850
    8c00:	eb000fbc 	bl	caf8 <CDeviceNameService::~CDeviceNameService()>
    8c04:	e2840010 	add	r0, r4, #16
    8c08:	eb0008c2 	bl	af18 <CKernelOptions::~CKernelOptions()>
    8c0c:	e1a00004 	mov	r0, r4
    8c10:	eb0003ca 	bl	9b40 <CMemorySystem::~CMemorySystem()>
    8c14:	e1a00004 	mov	r0, r4
    8c18:	e8bd8010 	pop	{r4, pc}

00008c1c <TaskEntry>:
    8c1c:	e92d4010 	push	{r4, lr}
    8c20:	e1a04000 	mov	r4, r0
    8c24:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    8c28:	e12fff33 	blx	r3
    8c2c:	e3a02003 	mov	r2, #3
    8c30:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8c34:	e30f0440 	movw	r0, #62528	; 0xf440
    8c38:	e3400000 	movt	r0, #0
    8c3c:	e5941000 	ldr	r1, [r4]
    8c40:	e5c42024 	strb	r2, [r4, #36]	; 0x24
    8c44:	e5933010 	ldr	r3, [r3, #16]
    8c48:	e12fff33 	blx	r3
    8c4c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8c50:	e8bd4010 	pop	{r4, lr}
    8c54:	e5933004 	ldr	r3, [r3, #4]
    8c58:	e12fff13 	bx	r3

00008c5c <initializeTask>:
    8c5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c60:	e1a04000 	mov	r4, r0
    8c64:	e3a00064 	mov	r0, #100	; 0x64
    8c68:	e1a07002 	mov	r7, r2
    8c6c:	e1a06003 	mov	r6, r3
    8c70:	e5841000 	str	r1, [r4]
    8c74:	e5844028 	str	r4, [r4, #40]	; 0x28
    8c78:	e59d5018 	ldr	r5, [sp, #24]
    8c7c:	eb00024f 	bl	95c0 <malloc>
    8c80:	e3a03064 	mov	r3, #100	; 0x64
    8c84:	e3a0203c 	mov	r2, #60	; 0x3c
    8c88:	e5840078 	str	r0, [r4, #120]	; 0x78
    8c8c:	e3a01000 	mov	r1, #0
    8c90:	e584307c 	str	r3, [r4, #124]	; 0x7c
    8c94:	e0840002 	add	r0, r4, r2
    8c98:	eb000757 	bl	a9fc <memset>
    8c9c:	e5941078 	ldr	r1, [r4, #120]	; 0x78
    8ca0:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    8ca4:	e3082c1c 	movw	r2, #35868	; 0x8c1c
    8ca8:	e3402000 	movt	r2, #0
    8cac:	e0811003 	add	r1, r1, r3
    8cb0:	e584403c 	str	r4, [r4, #60]	; 0x3c
    8cb4:	e5847034 	str	r7, [r4, #52]	; 0x34
    8cb8:	e5846030 	str	r6, [r4, #48]	; 0x30
    8cbc:	e5845080 	str	r5, [r4, #128]	; 0x80
    8cc0:	e5841070 	str	r1, [r4, #112]	; 0x70
    8cc4:	e5842074 	str	r2, [r4, #116]	; 0x74
    8cc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008ccc <InitializeRegs>:
    8ccc:	e92d4010 	push	{r4, lr}
    8cd0:	e1a04000 	mov	r4, r0
    8cd4:	e3a0203c 	mov	r2, #60	; 0x3c
    8cd8:	e0800002 	add	r0, r0, r2
    8cdc:	e3a01000 	mov	r1, #0
    8ce0:	eb000745 	bl	a9fc <memset>
    8ce4:	e5943078 	ldr	r3, [r4, #120]	; 0x78
    8ce8:	e594107c 	ldr	r1, [r4, #124]	; 0x7c
    8cec:	e3082c1c 	movw	r2, #35868	; 0x8c1c
    8cf0:	e3402000 	movt	r2, #0
    8cf4:	e0833001 	add	r3, r3, r1
    8cf8:	e584403c 	str	r4, [r4, #60]	; 0x3c
    8cfc:	e5842074 	str	r2, [r4, #116]	; 0x74
    8d00:	e5843070 	str	r3, [r4, #112]	; 0x70
    8d04:	e8bd8010 	pop	{r4, pc}

00008d08 <task1_run>:
    8d08:	e92d4010 	push	{r4, lr}
    8d0c:	e1a04000 	mov	r4, r0
    8d10:	e30f046c 	movw	r0, #62572	; 0xf46c
    8d14:	e3400000 	movt	r0, #0
    8d18:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8d1c:	e593300c 	ldr	r3, [r3, #12]
    8d20:	e12fff33 	blx	r3
    8d24:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8d28:	e30f0488 	movw	r0, #62600	; 0xf488
    8d2c:	e3400000 	movt	r0, #0
    8d30:	e8bd4010 	pop	{r4, lr}
    8d34:	e593300c 	ldr	r3, [r3, #12]
    8d38:	e12fff13 	bx	r3

00008d3c <task2_run>:
    8d3c:	e92d4010 	push	{r4, lr}
    8d40:	e1a04000 	mov	r4, r0
    8d44:	e30f04a4 	movw	r0, #62628	; 0xf4a4
    8d48:	e3400000 	movt	r0, #0
    8d4c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8d50:	e593300c 	ldr	r3, [r3, #12]
    8d54:	e12fff33 	blx	r3
    8d58:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8d5c:	e30f04c4 	movw	r0, #62660	; 0xf4c4
    8d60:	e3400000 	movt	r0, #0
    8d64:	e8bd4010 	pop	{r4, lr}
    8d68:	e593300c 	ldr	r3, [r3, #12]
    8d6c:	e12fff13 	bx	r3

00008d70 <task3_run>:
    8d70:	e92d4010 	push	{r4, lr}
    8d74:	e1a04000 	mov	r4, r0
    8d78:	e30f04e0 	movw	r0, #62688	; 0xf4e0
    8d7c:	e3400000 	movt	r0, #0
    8d80:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8d84:	e593300c 	ldr	r3, [r3, #12]
    8d88:	e12fff33 	blx	r3
    8d8c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8d90:	e30f04fc 	movw	r0, #62716	; 0xf4fc
    8d94:	e3400000 	movt	r0, #0
    8d98:	e593300c 	ldr	r3, [r3, #12]
    8d9c:	e12fff33 	blx	r3
    8da0:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8da4:	e30f0510 	movw	r0, #62736	; 0xf510
    8da8:	e3400000 	movt	r0, #0
    8dac:	e8bd4010 	pop	{r4, lr}
    8db0:	e593300c 	ldr	r3, [r3, #12]
    8db4:	e12fff13 	bx	r3

00008db8 <taskMatrix_run>:
    8db8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8dbc:	e1a06000 	mov	r6, r0
    8dc0:	e30f052c 	movw	r0, #62764	; 0xf52c
    8dc4:	e3400000 	movt	r0, #0
    8dc8:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    8dcc:	e24dd028 	sub	sp, sp, #40	; 0x28
    8dd0:	e30f7560 	movw	r7, #62816	; 0xf560
    8dd4:	e3407000 	movt	r7, #0
    8dd8:	e28d4004 	add	r4, sp, #4
    8ddc:	e28d8028 	add	r8, sp, #40	; 0x28
    8de0:	e5933010 	ldr	r3, [r3, #16]
    8de4:	e12fff33 	blx	r3
    8de8:	e5962080 	ldr	r2, [r6, #128]	; 0x80
    8dec:	e3a03000 	mov	r3, #0
    8df0:	e30f0544 	movw	r0, #62788	; 0xf544
    8df4:	e3400000 	movt	r0, #0
    8df8:	e58d3004 	str	r3, [sp, #4]
    8dfc:	e5922010 	ldr	r2, [r2, #16]
    8e00:	e58d3008 	str	r3, [sp, #8]
    8e04:	e58d300c 	str	r3, [sp, #12]
    8e08:	e58d3010 	str	r3, [sp, #16]
    8e0c:	e58d3014 	str	r3, [sp, #20]
    8e10:	e58d3018 	str	r3, [sp, #24]
    8e14:	e58d301c 	str	r3, [sp, #28]
    8e18:	e58d3020 	str	r3, [sp, #32]
    8e1c:	e58d3024 	str	r3, [sp, #36]	; 0x24
    8e20:	e12fff32 	blx	r2
    8e24:	e596c080 	ldr	ip, [r6, #128]	; 0x80
    8e28:	e1a00007 	mov	r0, r7
    8e2c:	e994000c 	ldmib	r4, {r2, r3}
    8e30:	e494100c 	ldr	r1, [r4], #12
    8e34:	e59c5010 	ldr	r5, [ip, #16]
    8e38:	e12fff35 	blx	r5
    8e3c:	e1580004 	cmp	r8, r4
    8e40:	1afffff7 	bne	8e24 <taskMatrix_run+0x6c>
    8e44:	e28dd028 	add	sp, sp, #40	; 0x28
    8e48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008e4c <task4_run>:
    8e4c:	e5903080 	ldr	r3, [r0, #128]	; 0x80
    8e50:	e30f056c 	movw	r0, #62828	; 0xf56c
    8e54:	e3400000 	movt	r0, #0
    8e58:	e593300c 	ldr	r3, [r3, #12]
    8e5c:	e12fff13 	bx	r3

00008e60 <exit()>:
    8e60:	e12fff1e 	bx	lr

00008e64 <sleep(TTask*, unsigned int)>:
    8e64:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8e68:	e3007708 	movw	r7, #1800	; 0x708
    8e6c:	e30139ac 	movw	r3, #6572	; 0x19ac
    8e70:	e3403001 	movt	r3, #1
    8e74:	e1510007 	cmp	r1, r7
    8e78:	e3a06002 	mov	r6, #2
    8e7c:	e1a04001 	mov	r4, r1
    8e80:	e1a05000 	mov	r5, r0
    8e84:	e5c06024 	strb	r6, [r0, #36]	; 0x24
    8e88:	e5c36198 	strb	r6, [r3, #408]	; 0x198
    8e8c:	9a00000a 	bls	8ebc <sleep(TTask*, unsigned int)+0x58>
    8e90:	e3a08cd2 	mov	r8, #53760	; 0xd200
    8e94:	e3468b49 	movt	r8, #27465	; 0x6b49
    8e98:	e2444c07 	sub	r4, r4, #1792	; 0x700
    8e9c:	eb0006c8 	bl	a9c4 <CTimer::Get()>
    8ea0:	e2444008 	sub	r4, r4, #8
    8ea4:	eb000474 	bl	a07c <CTimer::GetClockTicks()>
    8ea8:	e1540007 	cmp	r4, r7
    8eac:	e0800008 	add	r0, r0, r8
    8eb0:	e5850038 	str	r0, [r5, #56]	; 0x38
    8eb4:	e5c56024 	strb	r6, [r5, #36]	; 0x24
    8eb8:	8afffff6 	bhi	8e98 <sleep(TTask*, unsigned int)+0x34>
    8ebc:	e3041240 	movw	r1, #16960	; 0x4240
    8ec0:	e340100f 	movt	r1, #15
    8ec4:	e0040491 	mul	r4, r1, r4
    8ec8:	e3540000 	cmp	r4, #0
    8ecc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8ed0:	eb0006bb 	bl	a9c4 <CTimer::Get()>
    8ed4:	eb000468 	bl	a07c <CTimer::GetClockTicks()>
    8ed8:	e3a03002 	mov	r3, #2
    8edc:	e0844000 	add	r4, r4, r0
    8ee0:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    8ee4:	e5854038 	str	r4, [r5, #56]	; 0x38
    8ee8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008eec <InitializeScheduler()>:
    8eec:	e30109ac 	movw	r0, #6572	; 0x19ac
    8ef0:	e3400001 	movt	r0, #1
    8ef4:	e3a0c000 	mov	ip, #0
    8ef8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8efc:	e2403004 	sub	r3, r0, #4
    8f00:	e3a0e064 	mov	lr, #100	; 0x64
    8f04:	e2801f63 	add	r1, r0, #396	; 0x18c
    8f08:	e1a0200c 	mov	r2, ip
    8f0c:	e580e19c 	str	lr, [r0, #412]	; 0x19c
    8f10:	e580c190 	str	ip, [r0, #400]	; 0x190
    8f14:	e580c194 	str	ip, [r0, #404]	; 0x194
    8f18:	e5c0c198 	strb	ip, [r0, #408]	; 0x198
    8f1c:	e5a32004 	str	r2, [r3, #4]!
    8f20:	e1530001 	cmp	r3, r1
    8f24:	1afffffc 	bne	8f1c <InitializeScheduler()+0x30>
    8f28:	e3091280 	movw	r1, #37504	; 0x9280
    8f2c:	e3401000 	movt	r1, #0
    8f30:	e3082e64 	movw	r2, #36452	; 0x8e64
    8f34:	e3402000 	movt	r2, #0
    8f38:	e3083e60 	movw	r3, #36448	; 0x8e60
    8f3c:	e3403000 	movt	r3, #0
    8f40:	e58011a4 	str	r1, [r0, #420]	; 0x1a4
    8f44:	e58021a0 	str	r2, [r0, #416]	; 0x1a0
    8f48:	e58031a8 	str	r3, [r0, #424]	; 0x1a8
    8f4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008f50 <getSysCallPointer()>:
    8f50:	e59f0000 	ldr	r0, [pc]	; 8f58 <getSysCallPointer()+0x8>
    8f54:	e12fff1e 	bx	lr
    8f58:	00011b4c 	.word	0x00011b4c

00008f5c <getScheduler()>:
    8f5c:	e92d4010 	push	{r4, lr}
    8f60:	e30119ac 	movw	r1, #6572	; 0x19ac
    8f64:	e3401001 	movt	r1, #1
    8f68:	e3a02f67 	mov	r2, #412	; 0x19c
    8f6c:	eb0007ba 	bl	ae5c <memcpy>
    8f70:	e8bd8010 	pop	{r4, pc}

00008f74 <schedulePriority()>:
    8f74:	e12fff1e 	bx	lr

00008f78 <scheduleFIFO()>:
    8f78:	e30119ac 	movw	r1, #6572	; 0x19ac
    8f7c:	e3401001 	movt	r1, #1
    8f80:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8f84:	e591e194 	ldr	lr, [r1, #404]	; 0x194
    8f88:	e35e0000 	cmp	lr, #0
    8f8c:	0a000051 	beq	90d8 <scheduleFIFO()+0x160>
    8f90:	e591c190 	ldr	ip, [r1, #400]	; 0x190
    8f94:	e2413004 	sub	r3, r1, #4
    8f98:	e3a00000 	mov	r0, #0
    8f9c:	ea000002 	b	8fac <scheduleFIFO()+0x34>
    8fa0:	e2800001 	add	r0, r0, #1
    8fa4:	e3500064 	cmp	r0, #100	; 0x64
    8fa8:	0a000041 	beq	90b4 <scheduleFIFO()+0x13c>
    8fac:	e5b32004 	ldr	r2, [r3, #4]!
    8fb0:	e152000c 	cmp	r2, ip
    8fb4:	1afffff9 	bne	8fa0 <scheduleFIFO()+0x28>
    8fb8:	e5d13198 	ldrb	r3, [r1, #408]	; 0x198
    8fbc:	e2800001 	add	r0, r0, #1
    8fc0:	e3530002 	cmp	r3, #2
    8fc4:	0a000012 	beq	9014 <scheduleFIFO()+0x9c>
    8fc8:	e3530003 	cmp	r3, #3
    8fcc:	0a00002e 	beq	908c <scheduleFIFO()+0x114>
    8fd0:	e3530001 	cmp	r3, #1
    8fd4:	1a000010 	bne	901c <scheduleFIFO()+0xa4>
    8fd8:	e59f2130 	ldr	r2, [pc, #304]	; 9110 <scheduleFIFO()+0x198>
    8fdc:	e3a03000 	mov	r3, #0
    8fe0:	ea000002 	b	8ff0 <scheduleFIFO()+0x78>
    8fe4:	e2833001 	add	r3, r3, #1
    8fe8:	e3530064 	cmp	r3, #100	; 0x64
    8fec:	0a000004 	beq	9004 <scheduleFIFO()+0x8c>
    8ff0:	e5b2c004 	ldr	ip, [r2, #4]!
    8ff4:	e15e000c 	cmp	lr, ip
    8ff8:	1afffff9 	bne	8fe4 <scheduleFIFO()+0x6c>
    8ffc:	e3a02000 	mov	r2, #0
    9000:	e7812103 	str	r2, [r1, r3, lsl #2]
    9004:	e3a03003 	mov	r3, #3
    9008:	e5ce3024 	strb	r3, [lr, #36]	; 0x24
    900c:	ea000002 	b	901c <scheduleFIFO()+0xa4>
    9010:	e3a00065 	mov	r0, #101	; 0x65
    9014:	e3a03002 	mov	r3, #2
    9018:	e5ce3024 	strb	r3, [lr, #36]	; 0x24
    901c:	e3500063 	cmp	r0, #99	; 0x63
    9020:	ca00000c 	bgt	9058 <scheduleFIFO()+0xe0>
    9024:	e7913100 	ldr	r3, [r1, r0, lsl #2]
    9028:	e3530000 	cmp	r3, #0
    902c:	02803001 	addeq	r3, r0, #1
    9030:	00812100 	addeq	r2, r1, r0, lsl #2
    9034:	0a000003 	beq	9048 <scheduleFIFO()+0xd0>
    9038:	ea00002f 	b	90fc <scheduleFIFO()+0x184>
    903c:	e5b21004 	ldr	r1, [r2, #4]!
    9040:	e3510000 	cmp	r1, #0
    9044:	1a00000e 	bne	9084 <scheduleFIFO()+0x10c>
    9048:	e3530064 	cmp	r3, #100	; 0x64
    904c:	e1a00003 	mov	r0, r3
    9050:	e2833001 	add	r3, r3, #1
    9054:	1afffff8 	bne	903c <scheduleFIFO()+0xc4>
    9058:	e30139ac 	movw	r3, #6572	; 0x19ac
    905c:	e3403001 	movt	r3, #1
    9060:	e3a00001 	mov	r0, #1
    9064:	e5b32004 	ldr	r2, [r3, #4]!
    9068:	e3520000 	cmp	r2, #0
    906c:	149df004 	popne	{pc}		; (ldrne pc, [sp], #4)
    9070:	e2800001 	add	r0, r0, #1
    9074:	e3500064 	cmp	r0, #100	; 0x64
    9078:	1afffff9 	bne	9064 <scheduleFIFO()+0xec>
    907c:	e1a00002 	mov	r0, r2
    9080:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9084:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9088:	e3a00065 	mov	r0, #101	; 0x65
    908c:	e59f207c 	ldr	r2, [pc, #124]	; 9110 <scheduleFIFO()+0x198>
    9090:	e3a03000 	mov	r3, #0
    9094:	ea000002 	b	90a4 <scheduleFIFO()+0x12c>
    9098:	e2833001 	add	r3, r3, #1
    909c:	e3530064 	cmp	r3, #100	; 0x64
    90a0:	0affffd7 	beq	9004 <scheduleFIFO()+0x8c>
    90a4:	e5b2c004 	ldr	ip, [r2, #4]!
    90a8:	e15e000c 	cmp	lr, ip
    90ac:	1afffff9 	bne	9098 <scheduleFIFO()+0x120>
    90b0:	eaffffd1 	b	8ffc <scheduleFIFO()+0x84>
    90b4:	e5d13198 	ldrb	r3, [r1, #408]	; 0x198
    90b8:	e3530002 	cmp	r3, #2
    90bc:	0affffd3 	beq	9010 <scheduleFIFO()+0x98>
    90c0:	e3530003 	cmp	r3, #3
    90c4:	0affffef 	beq	9088 <scheduleFIFO()+0x110>
    90c8:	e3530001 	cmp	r3, #1
    90cc:	1affffe1 	bne	9058 <scheduleFIFO()+0xe0>
    90d0:	e3a00065 	mov	r0, #101	; 0x65
    90d4:	eaffffbf 	b	8fd8 <scheduleFIFO()+0x60>
    90d8:	e5d10198 	ldrb	r0, [r1, #408]	; 0x198
    90dc:	e3500002 	cmp	r0, #2
    90e0:	0a000008 	beq	9108 <scheduleFIFO()+0x190>
    90e4:	e3500003 	cmp	r0, #3
    90e8:	0a000004 	beq	9100 <scheduleFIFO()+0x188>
    90ec:	e3500001 	cmp	r0, #1
    90f0:	13a00001 	movne	r0, #1
    90f4:	1affffca 	bne	9024 <scheduleFIFO()+0xac>
    90f8:	eaffffb6 	b	8fd8 <scheduleFIFO()+0x60>
    90fc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9100:	e3a00001 	mov	r0, #1
    9104:	eaffffe0 	b	908c <scheduleFIFO()+0x114>
    9108:	e3a00001 	mov	r0, #1
    910c:	eaffffc0 	b	9014 <scheduleFIFO()+0x9c>
    9110:	000119a8 	.word	0x000119a8

00009114 <getTaskNumByTaskPointer(TTask*)>:
    9114:	e3500000 	cmp	r0, #0
    9118:	012fff1e 	bxeq	lr
    911c:	e30129ac 	movw	r2, #6572	; 0x19ac
    9120:	e3402001 	movt	r2, #1
    9124:	e2423004 	sub	r3, r2, #4
    9128:	e3a00000 	mov	r0, #0
    912c:	e5921190 	ldr	r1, [r2, #400]	; 0x190
    9130:	e5b32004 	ldr	r2, [r3, #4]!
    9134:	e1520001 	cmp	r2, r1
    9138:	012fff1e 	bxeq	lr
    913c:	e2800001 	add	r0, r0, #1
    9140:	e3500064 	cmp	r0, #100	; 0x64
    9144:	1afffff9 	bne	9130 <getTaskNumByTaskPointer(TTask*)+0x1c>
    9148:	e12fff1e 	bx	lr

0000914c <genTaskID()>:
    914c:	e30139ac 	movw	r3, #6572	; 0x19ac
    9150:	e3403001 	movt	r3, #1
    9154:	e593019c 	ldr	r0, [r3, #412]	; 0x19c
    9158:	e2802001 	add	r2, r0, #1
    915c:	e583219c 	str	r2, [r3, #412]	; 0x19c
    9160:	e12fff1e 	bx	lr

00009164 <AddTask(TTask*)>:
    9164:	e59f2030 	ldr	r2, [pc, #48]	; 919c <AddTask(TTask*)+0x38>
    9168:	e3a03000 	mov	r3, #0
    916c:	ea000002 	b	917c <AddTask(TTask*)+0x18>
    9170:	e2833001 	add	r3, r3, #1
    9174:	e3530064 	cmp	r3, #100	; 0x64
    9178:	0a000006 	beq	9198 <AddTask(TTask*)+0x34>
    917c:	e5b21004 	ldr	r1, [r2, #4]!
    9180:	e3510000 	cmp	r1, #0
    9184:	1afffff9 	bne	9170 <AddTask(TTask*)+0xc>
    9188:	e30129ac 	movw	r2, #6572	; 0x19ac
    918c:	e3402001 	movt	r2, #1
    9190:	e7820103 	str	r0, [r2, r3, lsl #2]
    9194:	e12fff1e 	bx	lr
    9198:	e12fff1e 	bx	lr
    919c:	000119a8 	.word	0x000119a8

000091a0 <RemoveTaskFromQueue(TTask*)>:
    91a0:	e59f2034 	ldr	r2, [pc, #52]	; 91dc <RemoveTaskFromQueue(TTask*)+0x3c>
    91a4:	e3a03000 	mov	r3, #0
    91a8:	ea000002 	b	91b8 <RemoveTaskFromQueue(TTask*)+0x18>
    91ac:	e2833001 	add	r3, r3, #1
    91b0:	e3530064 	cmp	r3, #100	; 0x64
    91b4:	0a000007 	beq	91d8 <RemoveTaskFromQueue(TTask*)+0x38>
    91b8:	e5b21004 	ldr	r1, [r2, #4]!
    91bc:	e1510000 	cmp	r1, r0
    91c0:	1afffff9 	bne	91ac <RemoveTaskFromQueue(TTask*)+0xc>
    91c4:	e30129ac 	movw	r2, #6572	; 0x19ac
    91c8:	e3402001 	movt	r2, #1
    91cc:	e3a01000 	mov	r1, #0
    91d0:	e7821103 	str	r1, [r2, r3, lsl #2]
    91d4:	e12fff1e 	bx	lr
    91d8:	e12fff1e 	bx	lr
    91dc:	000119a8 	.word	0x000119a8

000091e0 <GetNextTask()>:
    91e0:	e30139ac 	movw	r3, #6572	; 0x19ac
    91e4:	e3403001 	movt	r3, #1
    91e8:	e3a00000 	mov	r0, #0
    91ec:	e593c190 	ldr	ip, [r3, #400]	; 0x190
    91f0:	e7932100 	ldr	r2, [r3, r0, lsl #2]
    91f4:	e2801001 	add	r1, r0, #1
    91f8:	e152000c 	cmp	r2, ip
    91fc:	0a000016 	beq	925c <GetNextTask()+0x7c>
    9200:	e7932101 	ldr	r2, [r3, r1, lsl #2]
    9204:	e2800002 	add	r0, r0, #2
    9208:	e15c0002 	cmp	ip, r2
    920c:	0a000011 	beq	9258 <GetNextTask()+0x78>
    9210:	e3500064 	cmp	r0, #100	; 0x64
    9214:	1afffff5 	bne	91f0 <GetNextTask()+0x10>
    9218:	e3a02000 	mov	r2, #0
    921c:	e3a00002 	mov	r0, #2
    9220:	ea000002 	b	9230 <GetNextTask()+0x50>
    9224:	e2800001 	add	r0, r0, #1
    9228:	e3500064 	cmp	r0, #100	; 0x64
    922c:	0a000007 	beq	9250 <GetNextTask()+0x70>
    9230:	e3520001 	cmp	r2, #1
    9234:	1afffffa 	bne	9224 <GetNextTask()+0x44>
    9238:	e7931100 	ldr	r1, [r3, r0, lsl #2]
    923c:	e3510000 	cmp	r1, #0
    9240:	112fff1e 	bxne	lr
    9244:	e2800001 	add	r0, r0, #1
    9248:	e3500064 	cmp	r0, #100	; 0x64
    924c:	1afffff7 	bne	9230 <GetNextTask()+0x50>
    9250:	e3a00000 	mov	r0, #0
    9254:	e12fff1e 	bx	lr
    9258:	e1a00001 	mov	r0, r1
    925c:	e2800001 	add	r0, r0, #1
    9260:	e3500064 	cmp	r0, #100	; 0x64
    9264:	0a000003 	beq	9278 <GetNextTask()+0x98>
    9268:	e7932100 	ldr	r2, [r3, r0, lsl #2]
    926c:	e3520000 	cmp	r2, #0
    9270:	0afffff9 	beq	925c <GetNextTask()+0x7c>
    9274:	e12fff1e 	bx	lr
    9278:	e3a02001 	mov	r2, #1
    927c:	eaffffe6 	b	921c <GetNextTask()+0x3c>

00009280 <yield()>:
    9280:	e92d4010 	push	{r4, lr}
    9284:	ebffffd5 	bl	91e0 <GetNextTask()>
    9288:	e301e9ac 	movw	lr, #6572	; 0x19ac
    928c:	e340e001 	movt	lr, #1
    9290:	e24e2004 	sub	r2, lr, #4
    9294:	e3a03000 	mov	r3, #0
    9298:	e59ec190 	ldr	ip, [lr, #400]	; 0x190
    929c:	e79e4100 	ldr	r4, [lr, r0, lsl #2]
    92a0:	e28c003c 	add	r0, ip, #60	; 0x3c
    92a4:	ea000002 	b	92b4 <yield()+0x34>
    92a8:	e2833001 	add	r3, r3, #1
    92ac:	e3530064 	cmp	r3, #100	; 0x64
    92b0:	0a000004 	beq	92c8 <yield()+0x48>
    92b4:	e5b21004 	ldr	r1, [r2, #4]!
    92b8:	e15c0001 	cmp	ip, r1
    92bc:	1afffff9 	bne	92a8 <yield()+0x28>
    92c0:	e3a02000 	mov	r2, #0
    92c4:	e78e2103 	str	r2, [lr, r3, lsl #2]
    92c8:	e3a03001 	mov	r3, #1
    92cc:	e284103c 	add	r1, r4, #60	; 0x3c
    92d0:	e58ec194 	str	ip, [lr, #404]	; 0x194
    92d4:	e58e4190 	str	r4, [lr, #400]	; 0x190
    92d8:	e5ce3198 	strb	r3, [lr, #408]	; 0x198
    92dc:	e8bd4010 	pop	{r4, lr}
    92e0:	ea00009a 	b	9550 <TaskSwitch>

000092e4 <GetNextTaskByPosition(int)>:
    92e4:	e2803001 	add	r3, r0, #1
    92e8:	e3530063 	cmp	r3, #99	; 0x63
    92ec:	ca00000d 	bgt	9328 <GetNextTaskByPosition(int)+0x44>
    92f0:	e30129ac 	movw	r2, #6572	; 0x19ac
    92f4:	e3402001 	movt	r2, #1
    92f8:	e7921103 	ldr	r1, [r2, r3, lsl #2]
    92fc:	e3510000 	cmp	r1, #0
    9300:	00820100 	addeq	r0, r2, r0, lsl #2
    9304:	02800004 	addeq	r0, r0, #4
    9308:	0a000003 	beq	931c <GetNextTaskByPosition(int)+0x38>
    930c:	ea00000e 	b	934c <GetNextTaskByPosition(int)+0x68>
    9310:	e5b02004 	ldr	r2, [r0, #4]!
    9314:	e3520000 	cmp	r2, #0
    9318:	1a00000b 	bne	934c <GetNextTaskByPosition(int)+0x68>
    931c:	e2833001 	add	r3, r3, #1
    9320:	e3530064 	cmp	r3, #100	; 0x64
    9324:	1afffff9 	bne	9310 <GetNextTaskByPosition(int)+0x2c>
    9328:	e30129ac 	movw	r2, #6572	; 0x19ac
    932c:	e3402001 	movt	r2, #1
    9330:	e3a00001 	mov	r0, #1
    9334:	e5b23004 	ldr	r3, [r2, #4]!
    9338:	e3530000 	cmp	r3, #0
    933c:	112fff1e 	bxne	lr
    9340:	e2800001 	add	r0, r0, #1
    9344:	e3500064 	cmp	r0, #100	; 0x64
    9348:	1afffff9 	bne	9334 <GetNextTaskByPosition(int)+0x50>
    934c:	e1a00003 	mov	r0, r3
    9350:	e12fff1e 	bx	lr

00009354 <kernelYield()>:
    9354:	e92d4010 	push	{r4, lr}
    9358:	ebffffa0 	bl	91e0 <GetNextTask()>
    935c:	e30139ac 	movw	r3, #6572	; 0x19ac
    9360:	e3403001 	movt	r3, #1
    9364:	e3a0e001 	mov	lr, #1
    9368:	e793c100 	ldr	ip, [r3, r0, lsl #2]
    936c:	e5932190 	ldr	r2, [r3, #400]	; 0x190
    9370:	e5c3e198 	strb	lr, [r3, #408]	; 0x198
    9374:	e28c103c 	add	r1, ip, #60	; 0x3c
    9378:	e282003c 	add	r0, r2, #60	; 0x3c
    937c:	e583c190 	str	ip, [r3, #400]	; 0x190
    9380:	e8bd4010 	pop	{r4, lr}
    9384:	e5832194 	str	r2, [r3, #404]	; 0x194
    9388:	ea000070 	b	9550 <TaskSwitch>

0000938c <startScheduler(TTask*, int)>:
    938c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9390:	e1a06000 	mov	r6, r0
    9394:	e30149ac 	movw	r4, #6572	; 0x19ac
    9398:	e3404001 	movt	r4, #1
    939c:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    93a0:	e30f058c 	movw	r0, #62860	; 0xf58c
    93a4:	e3400000 	movt	r0, #0
    93a8:	e1a07001 	mov	r7, r1
    93ac:	e30f8620 	movw	r8, #63008	; 0xf620
    93b0:	e3408000 	movt	r8, #0
    93b4:	e593300c 	ldr	r3, [r3, #12]
    93b8:	e3a09000 	mov	r9, #0
    93bc:	e12fff33 	blx	r3
    93c0:	e3a03004 	mov	r3, #4
    93c4:	e58431b4 	str	r3, [r4, #436]	; 0x1b4
    93c8:	ea00000e 	b	9408 <startScheduler(TTask*, int)+0x7c>
    93cc:	e3550064 	cmp	r5, #100	; 0x64
    93d0:	0a000021 	beq	945c <startScheduler(TTask*, int)+0xd0>
    93d4:	e5943004 	ldr	r3, [r4, #4]
    93d8:	e5c49198 	strb	r9, [r4, #408]	; 0x198
    93dc:	e5843190 	str	r3, [r4, #400]	; 0x190
    93e0:	ebffffdb 	bl	9354 <kernelYield()>
    93e4:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    93e8:	e1a00008 	mov	r0, r8
    93ec:	e593300c 	ldr	r3, [r3, #12]
    93f0:	e12fff33 	blx	r3
    93f4:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
    93f8:	e3530000 	cmp	r3, #0
    93fc:	e2433001 	sub	r3, r3, #1
    9400:	e58431b4 	str	r3, [r4, #436]	; 0x1b4
    9404:	0a00000e 	beq	9444 <startScheduler(TTask*, int)+0xb8>
    9408:	e3570000 	cmp	r7, #0
    940c:	e5846190 	str	r6, [r4, #400]	; 0x190
    9410:	0a000001 	beq	941c <startScheduler(TTask*, int)+0x90>
    9414:	e3570001 	cmp	r7, #1
    9418:	0a000001 	beq	9424 <startScheduler(TTask*, int)+0x98>
    941c:	ebfffed5 	bl	8f78 <scheduleFIFO()>
    9420:	e1a05000 	mov	r5, r0
    9424:	e3550000 	cmp	r5, #0
    9428:	1affffe7 	bne	93cc <startScheduler(TTask*, int)+0x40>
    942c:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    9430:	e30f05a8 	movw	r0, #62888	; 0xf5a8
    9434:	e3400000 	movt	r0, #0
    9438:	e593300c 	ldr	r3, [r3, #12]
    943c:	e12fff33 	blx	r3
    9440:	e58451b4 	str	r5, [r4, #436]	; 0x1b4
    9444:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    9448:	e30f0648 	movw	r0, #63048	; 0xf648
    944c:	e3400000 	movt	r0, #0
    9450:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    9454:	e593300c 	ldr	r3, [r3, #12]
    9458:	e12fff13 	bx	r3
    945c:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    9460:	e30f05d8 	movw	r0, #62936	; 0xf5d8
    9464:	e3400000 	movt	r0, #0
    9468:	e593300c 	ldr	r3, [r3, #12]
    946c:	e12fff33 	blx	r3
    9470:	e3a03000 	mov	r3, #0
    9474:	e58431b4 	str	r3, [r4, #436]	; 0x1b4
    9478:	eafffff1 	b	9444 <startScheduler(TTask*, int)+0xb8>

0000947c <schedulerRun(TTask*)>:
    947c:	e92d4010 	push	{r4, lr}
    9480:	e1a04000 	mov	r4, r0
    9484:	e30f0660 	movw	r0, #63072	; 0xf660
    9488:	e3400000 	movt	r0, #0
    948c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    9490:	e593300c 	ldr	r3, [r3, #12]
    9494:	e12fff33 	blx	r3
    9498:	e30139ac 	movw	r3, #6572	; 0x19ac
    949c:	e3403001 	movt	r3, #1
    94a0:	e5834190 	str	r4, [r3, #400]	; 0x190
    94a4:	eb000e4c 	bl	cddc <CLogger::Get()>
    94a8:	e3a02000 	mov	r2, #0
    94ac:	e30f3680 	movw	r3, #63104	; 0xf680
    94b0:	e3403000 	movt	r3, #0
    94b4:	e30f1580 	movw	r1, #62848	; 0xf580
    94b8:	e3401000 	movt	r1, #0
    94bc:	eb000f23 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    94c0:	ebffffa3 	bl	9354 <kernelYield()>
    94c4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    94c8:	e30f069c 	movw	r0, #63132	; 0xf69c
    94cc:	e3400000 	movt	r0, #0
    94d0:	e8bd4010 	pop	{r4, lr}
    94d4:	e593300c 	ldr	r3, [r3, #12]
    94d8:	e12fff13 	bx	r3

000094dc <kernelYieldByNum(int)>:
    94dc:	e12fff1e 	bx	lr

000094e0 <switchToTask(int)>:
    94e0:	e12fff1e 	bx	lr

000094e4 <sleepYield()>:
    94e4:	e12fff1e 	bx	lr

000094e8 <msSleep(TTask*, unsigned int)>:
    94e8:	e3510000 	cmp	r1, #0
    94ec:	012fff1e 	bxeq	lr
    94f0:	e92d4070 	push	{r4, r5, r6, lr}
    94f4:	e3a04ffa 	mov	r4, #1000	; 0x3e8
    94f8:	e0040194 	mul	r4, r4, r1
    94fc:	e3540000 	cmp	r4, #0
    9500:	08bd8070 	popeq	{r4, r5, r6, pc}
    9504:	e1a05000 	mov	r5, r0
    9508:	eb00052d 	bl	a9c4 <CTimer::Get()>
    950c:	eb0002da 	bl	a07c <CTimer::GetClockTicks()>
    9510:	e3a03002 	mov	r3, #2
    9514:	e0844000 	add	r4, r4, r0
    9518:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    951c:	e5854038 	str	r4, [r5, #56]	; 0x38
    9520:	e8bd8070 	pop	{r4, r5, r6, pc}

00009524 <usSleep(TTask*, unsigned int)>:
    9524:	e92d4070 	push	{r4, r5, r6, lr}
    9528:	e2514000 	subs	r4, r1, #0
    952c:	08bd8070 	popeq	{r4, r5, r6, pc}
    9530:	e1a05000 	mov	r5, r0
    9534:	eb000522 	bl	a9c4 <CTimer::Get()>
    9538:	eb0002cf 	bl	a07c <CTimer::GetClockTicks()>
    953c:	e3a03002 	mov	r3, #2
    9540:	e0840000 	add	r0, r4, r0
    9544:	e5c53024 	strb	r3, [r5, #36]	; 0x24
    9548:	e5850038 	str	r0, [r5, #56]	; 0x38
    954c:	e8bd8070 	pop	{r4, r5, r6, pc}

00009550 <TaskSwitch>:
    9550:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9554:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
    9558:	e12fff1e 	bx	lr

0000955c <mem_init>:
    955c:	e0801001 	add	r1, r0, r1
    9560:	e3012b64 	movw	r2, #7012	; 0x1b64
    9564:	e3402001 	movt	r2, #1
    9568:	e24139ff 	sub	r3, r1, #4177920	; 0x3fc000
    956c:	e3500605 	cmp	r0, #5242880	; 0x500000
    9570:	e2433a03 	sub	r3, r3, #12288	; 0x3000
    9574:	33a00605 	movcc	r0, #5242880	; 0x500000
    9578:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
    957c:	e241c501 	sub	ip, r1, #4194304	; 0x400000
    9580:	e3c3300f 	bic	r3, r3, #15
    9584:	e5820000 	str	r0, [r2]
    9588:	e582100c 	str	r1, [r2, #12]
    958c:	e582c004 	str	ip, [r2, #4]
    9590:	e5823008 	str	r3, [r2, #8]
    9594:	e12fff1e 	bx	lr

00009598 <mem_get_size>:
    9598:	e3013b64 	movw	r3, #7012	; 0x1b64
    959c:	e3403001 	movt	r3, #1
    95a0:	e5930004 	ldr	r0, [r3, #4]
    95a4:	e5931000 	ldr	r1, [r3]
    95a8:	e593200c 	ldr	r2, [r3, #12]
    95ac:	e5933008 	ldr	r3, [r3, #8]
    95b0:	e0400001 	sub	r0, r0, r1
    95b4:	e0423003 	sub	r3, r2, r3
    95b8:	e0800003 	add	r0, r0, r3
    95bc:	e12fff1e 	bx	lr

000095c0 <malloc>:
    95c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    95c4:	e3017b64 	movw	r7, #7012	; 0x1b64
    95c8:	e3407001 	movt	r7, #1
    95cc:	e1a05000 	mov	r5, r0
    95d0:	e5973000 	ldr	r3, [r7]
    95d4:	e3530000 	cmp	r3, #0
    95d8:	0a000053 	beq	972c <malloc+0x16c>
    95dc:	e5973010 	ldr	r3, [r7, #16]
    95e0:	e3530000 	cmp	r3, #0
    95e4:	1a00004b 	bne	9718 <malloc+0x158>
    95e8:	e3004d78 	movw	r4, #3448	; 0xd78
    95ec:	e3404001 	movt	r4, #1
    95f0:	e5943000 	ldr	r3, [r4]
    95f4:	e3530000 	cmp	r3, #0
    95f8:	0a000007 	beq	961c <malloc+0x5c>
    95fc:	e1550003 	cmp	r5, r3
    9600:	8a000002 	bhi	9610 <malloc+0x50>
    9604:	ea000011 	b	9650 <malloc+0x90>
    9608:	e1530005 	cmp	r3, r5
    960c:	2a00000f 	bcs	9650 <malloc+0x90>
    9610:	e5b43008 	ldr	r3, [r4, #8]!
    9614:	e3530000 	cmp	r3, #0
    9618:	1afffffa 	bne	9608 <malloc+0x48>
    961c:	e5976000 	ldr	r6, [r7]
    9620:	e285301f 	add	r3, r5, #31
    9624:	e3c3300f 	bic	r3, r3, #15
    9628:	e5972004 	ldr	r2, [r7, #4]
    962c:	e0863003 	add	r3, r6, r3
    9630:	e1530002 	cmp	r3, r2
    9634:	e5873000 	str	r3, [r7]
    9638:	9a000028 	bls	96e0 <malloc+0x120>
    963c:	e5974010 	ldr	r4, [r7, #16]
    9640:	e3540000 	cmp	r4, #0
    9644:	1a000035 	bne	9720 <malloc+0x160>
    9648:	e1a00004 	mov	r0, r4
    964c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9650:	e5946004 	ldr	r6, [r4, #4]
    9654:	e3560000 	cmp	r6, #0
    9658:	01a05003 	moveq	r5, r3
    965c:	0affffee 	beq	961c <malloc+0x5c>
    9660:	e5962000 	ldr	r2, [r6]
    9664:	e3043d43 	movw	r3, #19779	; 0x4d43
    9668:	e344324c 	movt	r3, #16972	; 0x424c
    966c:	e1520003 	cmp	r2, r3
    9670:	0a000005 	beq	968c <malloc+0xcc>
    9674:	e30f16b4 	movw	r1, #63156	; 0xf6b4
    9678:	e3401000 	movt	r1, #0
    967c:	e30f06d4 	movw	r0, #63188	; 0xf6d4
    9680:	e3400000 	movt	r0, #0
    9684:	e3a0208b 	mov	r2, #139	; 0x8b
    9688:	eb000c54 	bl	c7e0 <assertion_failed>
    968c:	e5963008 	ldr	r3, [r6, #8]
    9690:	e5843004 	str	r3, [r4, #4]
    9694:	e5973010 	ldr	r3, [r7, #16]
    9698:	e3530000 	cmp	r3, #0
    969c:	1a00001b 	bne	9710 <malloc+0x150>
    96a0:	e2864010 	add	r4, r6, #16
    96a4:	e3a03000 	mov	r3, #0
    96a8:	e314000f 	tst	r4, #15
    96ac:	e5c63008 	strb	r3, [r6, #8]
    96b0:	e5c63009 	strb	r3, [r6, #9]
    96b4:	e5c6300a 	strb	r3, [r6, #10]
    96b8:	e5c6300b 	strb	r3, [r6, #11]
    96bc:	0affffe1 	beq	9648 <malloc+0x88>
    96c0:	e3a020a3 	mov	r2, #163	; 0xa3
    96c4:	e30f16b4 	movw	r1, #63156	; 0xf6b4
    96c8:	e3401000 	movt	r1, #0
    96cc:	e30f06f8 	movw	r0, #63224	; 0xf6f8
    96d0:	e3400000 	movt	r0, #0
    96d4:	eb000c41 	bl	c7e0 <assertion_failed>
    96d8:	e1a00004 	mov	r0, r4
    96dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    96e0:	e3a03042 	mov	r3, #66	; 0x42
    96e4:	e3a00043 	mov	r0, #67	; 0x43
    96e8:	e5c63003 	strb	r3, [r6, #3]
    96ec:	e3a0104d 	mov	r1, #77	; 0x4d
    96f0:	e5973010 	ldr	r3, [r7, #16]
    96f4:	e3a0204c 	mov	r2, #76	; 0x4c
    96f8:	e5865004 	str	r5, [r6, #4]
    96fc:	e3530000 	cmp	r3, #0
    9700:	e5c60000 	strb	r0, [r6]
    9704:	e5c61001 	strb	r1, [r6, #1]
    9708:	e5c62002 	strb	r2, [r6, #2]
    970c:	0affffe3 	beq	96a0 <malloc+0xe0>
    9710:	eb0001b6 	bl	9df0 <LeaveCritical>
    9714:	eaffffe1 	b	96a0 <malloc+0xe0>
    9718:	eb0001a7 	bl	9dbc <EnterCritical>
    971c:	eaffffb1 	b	95e8 <malloc+0x28>
    9720:	eb0001b2 	bl	9df0 <LeaveCritical>
    9724:	e3a04000 	mov	r4, #0
    9728:	eaffffc6 	b	9648 <malloc+0x88>
    972c:	e30f16b4 	movw	r1, #63156	; 0xf6b4
    9730:	e3401000 	movt	r1, #0
    9734:	e30f06c0 	movw	r0, #63168	; 0xf6c0
    9738:	e3400000 	movt	r0, #0
    973c:	e3a02071 	mov	r2, #113	; 0x71
    9740:	eb000c26 	bl	c7e0 <assertion_failed>
    9744:	eaffffa4 	b	95dc <malloc+0x1c>

00009748 <free>:
    9748:	e92d4070 	push	{r4, r5, r6, lr}
    974c:	e2505000 	subs	r5, r0, #0
    9750:	08bd8070 	popeq	{r4, r5, r6, pc}
    9754:	e5352010 	ldr	r2, [r5, #-16]!
    9758:	e3043d43 	movw	r3, #19779	; 0x4d43
    975c:	e344324c 	movt	r3, #16972	; 0x424c
    9760:	e1520003 	cmp	r2, r3
    9764:	0a000005 	beq	9780 <free+0x38>
    9768:	e30f16b4 	movw	r1, #63156	; 0xf6b4
    976c:	e3401000 	movt	r1, #0
    9770:	e30f06d4 	movw	r0, #63188	; 0xf6d4
    9774:	e3400000 	movt	r0, #0
    9778:	e3a020b0 	mov	r2, #176	; 0xb0
    977c:	eb000c17 	bl	c7e0 <assertion_failed>
    9780:	e3004d78 	movw	r4, #3448	; 0xd78
    9784:	e3404001 	movt	r4, #1
    9788:	e5943000 	ldr	r3, [r4]
    978c:	e3530000 	cmp	r3, #0
    9790:	08bd8070 	popeq	{r4, r5, r6, pc}
    9794:	e5952004 	ldr	r2, [r5, #4]
    9798:	e1520003 	cmp	r2, r3
    979c:	1a000002 	bne	97ac <free+0x64>
    97a0:	ea000005 	b	97bc <free+0x74>
    97a4:	e1530002 	cmp	r3, r2
    97a8:	0a000003 	beq	97bc <free+0x74>
    97ac:	e5b43008 	ldr	r3, [r4, #8]!
    97b0:	e3530000 	cmp	r3, #0
    97b4:	1afffffa 	bne	97a4 <free+0x5c>
    97b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    97bc:	e3016b64 	movw	r6, #7012	; 0x1b64
    97c0:	e3406001 	movt	r6, #1
    97c4:	e5963010 	ldr	r3, [r6, #16]
    97c8:	e3530000 	cmp	r3, #0
    97cc:	1a000003 	bne	97e0 <free+0x98>
    97d0:	e5943004 	ldr	r3, [r4, #4]
    97d4:	e5853008 	str	r3, [r5, #8]
    97d8:	e5845004 	str	r5, [r4, #4]
    97dc:	e8bd8070 	pop	{r4, r5, r6, pc}
    97e0:	eb000175 	bl	9dbc <EnterCritical>
    97e4:	e5962010 	ldr	r2, [r6, #16]
    97e8:	e5943004 	ldr	r3, [r4, #4]
    97ec:	e3520000 	cmp	r2, #0
    97f0:	e5853008 	str	r3, [r5, #8]
    97f4:	e5845004 	str	r5, [r4, #4]
    97f8:	08bd8070 	popeq	{r4, r5, r6, pc}
    97fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    9800:	ea00017a 	b	9df0 <LeaveCritical>

00009804 <palloc>:
    9804:	e92d4070 	push	{r4, r5, r6, lr}
    9808:	e3014b64 	movw	r4, #7012	; 0x1b64
    980c:	e3404001 	movt	r4, #1
    9810:	e5943008 	ldr	r3, [r4, #8]
    9814:	e3530000 	cmp	r3, #0
    9818:	0a00002c 	beq	98d0 <palloc+0xcc>
    981c:	e5943014 	ldr	r3, [r4, #20]
    9820:	e3530000 	cmp	r3, #0
    9824:	1a000019 	bne	9890 <palloc+0x8c>
    9828:	e5945018 	ldr	r5, [r4, #24]
    982c:	e3550000 	cmp	r5, #0
    9830:	0a00001a 	beq	98a0 <palloc+0x9c>
    9834:	e5952000 	ldr	r2, [r5]
    9838:	e3043d43 	movw	r3, #19779	; 0x4d43
    983c:	e3453047 	movt	r3, #20551	; 0x5047
    9840:	e1520003 	cmp	r2, r3
    9844:	0a000005 	beq	9860 <palloc+0x5c>
    9848:	e30f16b4 	movw	r1, #63156	; 0xf6b4
    984c:	e3401000 	movt	r1, #0
    9850:	e30f0738 	movw	r0, #63288	; 0xf738
    9854:	e3400000 	movt	r0, #0
    9858:	e3a020d6 	mov	r2, #214	; 0xd6
    985c:	eb000bdf 	bl	c7e0 <assertion_failed>
    9860:	e5953004 	ldr	r3, [r5, #4]
    9864:	e3a02000 	mov	r2, #0
    9868:	e5852000 	str	r2, [r5]
    986c:	e5843018 	str	r3, [r4, #24]
    9870:	e5943014 	ldr	r3, [r4, #20]
    9874:	e3530000 	cmp	r3, #0
    9878:	1a000001 	bne	9884 <palloc+0x80>
    987c:	e1a00005 	mov	r0, r5
    9880:	e8bd8070 	pop	{r4, r5, r6, pc}
    9884:	eb000159 	bl	9df0 <LeaveCritical>
    9888:	e1a00005 	mov	r0, r5
    988c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9890:	eb000149 	bl	9dbc <EnterCritical>
    9894:	e5945018 	ldr	r5, [r4, #24]
    9898:	e3550000 	cmp	r5, #0
    989c:	1affffe4 	bne	9834 <palloc+0x30>
    98a0:	e5945008 	ldr	r5, [r4, #8]
    98a4:	e594200c 	ldr	r2, [r4, #12]
    98a8:	e2853a01 	add	r3, r5, #4096	; 0x1000
    98ac:	e1530002 	cmp	r3, r2
    98b0:	e5843008 	str	r3, [r4, #8]
    98b4:	9affffed 	bls	9870 <palloc+0x6c>
    98b8:	e5945014 	ldr	r5, [r4, #20]
    98bc:	e3550000 	cmp	r5, #0
    98c0:	0affffed 	beq	987c <palloc+0x78>
    98c4:	eb000149 	bl	9df0 <LeaveCritical>
    98c8:	e3a00000 	mov	r0, #0
    98cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    98d0:	e30f16b4 	movw	r1, #63156	; 0xf6b4
    98d4:	e3401000 	movt	r1, #0
    98d8:	e30f0724 	movw	r0, #63268	; 0xf724
    98dc:	e3400000 	movt	r0, #0
    98e0:	e3a020c8 	mov	r2, #200	; 0xc8
    98e4:	eb000bbd 	bl	c7e0 <assertion_failed>
    98e8:	eaffffcb 	b	981c <palloc+0x18>

000098ec <pfree>:
    98ec:	e92d4070 	push	{r4, r5, r6, lr}
    98f0:	e2505000 	subs	r5, r0, #0
    98f4:	08bd8070 	popeq	{r4, r5, r6, pc}
    98f8:	e3014b64 	movw	r4, #7012	; 0x1b64
    98fc:	e3404001 	movt	r4, #1
    9900:	e5943014 	ldr	r3, [r4, #20]
    9904:	e3530000 	cmp	r3, #0
    9908:	1a000006 	bne	9928 <pfree+0x3c>
    990c:	e5942018 	ldr	r2, [r4, #24]
    9910:	e3043d43 	movw	r3, #19779	; 0x4d43
    9914:	e3453047 	movt	r3, #20551	; 0x5047
    9918:	e5853000 	str	r3, [r5]
    991c:	e5852004 	str	r2, [r5, #4]
    9920:	e5845018 	str	r5, [r4, #24]
    9924:	e8bd8070 	pop	{r4, r5, r6, pc}
    9928:	eb000123 	bl	9dbc <EnterCritical>
    992c:	e5941014 	ldr	r1, [r4, #20]
    9930:	e5942018 	ldr	r2, [r4, #24]
    9934:	e3043d43 	movw	r3, #19779	; 0x4d43
    9938:	e3453047 	movt	r3, #20551	; 0x5047
    993c:	e3510000 	cmp	r1, #0
    9940:	e5853000 	str	r3, [r5]
    9944:	e5852004 	str	r2, [r5, #4]
    9948:	e5845018 	str	r5, [r4, #24]
    994c:	08bd8070 	popeq	{r4, r5, r6, pc}
    9950:	e8bd4070 	pop	{r4, r5, r6, lr}
    9954:	ea000125 	b	9df0 <LeaveCritical>

00009958 <_GLOBAL__sub_I_mem_init>:
    9958:	e3013b64 	movw	r3, #7012	; 0x1b64
    995c:	e3403001 	movt	r3, #1
    9960:	e3a02001 	mov	r2, #1
    9964:	e5832010 	str	r2, [r3, #16]
    9968:	e5832014 	str	r2, [r3, #20]
    996c:	e12fff1e 	bx	lr

00009970 <CBcmPropertyTags::CBcmPropertyTags()>:
    9970:	e92d4010 	push	{r4, lr}
    9974:	e3a01008 	mov	r1, #8
    9978:	e1a04000 	mov	r4, r0
    997c:	eb001465 	bl	eb18 <CBcmMailBox::CBcmMailBox(unsigned int)>
    9980:	e1a00004 	mov	r0, r4
    9984:	e8bd8010 	pop	{r4, pc}

00009988 <CBcmPropertyTags::~CBcmPropertyTags()>:
    9988:	e92d4010 	push	{r4, lr}
    998c:	e1a04000 	mov	r4, r0
    9990:	eb001463 	bl	eb24 <CBcmMailBox::~CBcmMailBox()>
    9994:	e1a00004 	mov	r0, r4
    9998:	e8bd8010 	pop	{r4, pc}

0000999c <CBcmPropertyTags::GetTags(void*, unsigned int)>:
    999c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    99a0:	e2519000 	subs	r9, r1, #0
    99a4:	e1a0a000 	mov	sl, r0
    99a8:	e1a04002 	mov	r4, r2
    99ac:	0a000030 	beq	9a74 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd8>
    99b0:	e354000f 	cmp	r4, #15
    99b4:	9a000027 	bls	9a58 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xbc>
    99b8:	e284800c 	add	r8, r4, #12
    99bc:	e3180003 	tst	r8, #3
    99c0:	1a00001d 	bne	9a3c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>
    99c4:	e3a06501 	mov	r6, #4194304	; 0x400000
    99c8:	e3a05008 	mov	r5, #8
    99cc:	e3405040 	movt	r5, #64	; 0x40
    99d0:	e3a07000 	mov	r7, #0
    99d4:	e1a00005 	mov	r0, r5
    99d8:	e5868000 	str	r8, [r6]
    99dc:	e1a02004 	mov	r2, r4
    99e0:	e5867004 	str	r7, [r6, #4]
    99e4:	e1a01009 	mov	r1, r9
    99e8:	eb00051b 	bl	ae5c <memcpy>
    99ec:	e7857004 	str	r7, [r5, r4]
    99f0:	f57ff04f 	dsb	sy
    99f4:	e1a01007 	mov	r1, r7
    99f8:	e1a0000a 	mov	r0, sl
    99fc:	e34c1040 	movt	r1, #49216	; 0xc040
    9a00:	eb001477 	bl	ebe4 <CBcmMailBox::WriteRead(unsigned int)>
    9a04:	e37005ff 	cmn	r0, #1069547520	; 0x3fc00000
    9a08:	0a000001 	beq	9a14 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x78>
    9a0c:	e3a00000 	mov	r0, #0
    9a10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9a14:	f57ff05f 	dmb	sy
    9a18:	e5963004 	ldr	r3, [r6, #4]
    9a1c:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    9a20:	1afffff9 	bne	9a0c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x70>
    9a24:	e1a02004 	mov	r2, r4
    9a28:	e1a01005 	mov	r1, r5
    9a2c:	e1a00009 	mov	r0, r9
    9a30:	eb000509 	bl	ae5c <memcpy>
    9a34:	e3a00001 	mov	r0, #1
    9a38:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9a3c:	e30f175c 	movw	r1, #63324	; 0xf75c
    9a40:	e3401000 	movt	r1, #0
    9a44:	e30f07a8 	movw	r0, #63400	; 0xf7a8
    9a48:	e3400000 	movt	r0, #0
    9a4c:	e3a02053 	mov	r2, #83	; 0x53
    9a50:	eb000b62 	bl	c7e0 <assertion_failed>
    9a54:	eaffffda 	b	99c4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x28>
    9a58:	e30f175c 	movw	r1, #63324	; 0xf75c
    9a5c:	e3401000 	movt	r1, #0
    9a60:	e30f077c 	movw	r0, #63356	; 0xf77c
    9a64:	e3400000 	movt	r0, #0
    9a68:	e3a02051 	mov	r2, #81	; 0x51
    9a6c:	eb000b5b 	bl	c7e0 <assertion_failed>
    9a70:	eaffffd0 	b	99b8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x1c>
    9a74:	e30f175c 	movw	r1, #63324	; 0xf75c
    9a78:	e3401000 	movt	r1, #0
    9a7c:	e30f0770 	movw	r0, #63344	; 0xf770
    9a80:	e3400000 	movt	r0, #0
    9a84:	e3a02050 	mov	r2, #80	; 0x50
    9a88:	eb000b54 	bl	c7e0 <assertion_failed>
    9a8c:	eaffffc7 	b	99b0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x14>

00009a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
    9a90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a94:	e2524000 	subs	r4, r2, #0
    9a98:	e1a08000 	mov	r8, r0
    9a9c:	e1a07001 	mov	r7, r1
    9aa0:	e1a05003 	mov	r5, r3
    9aa4:	e59d6018 	ldr	r6, [sp, #24]
    9aa8:	0a00001d 	beq	9b24 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x94>
    9aac:	e355000f 	cmp	r5, #15
    9ab0:	9a000014 	bls	9b08 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
    9ab4:	e245300c 	sub	r3, r5, #12
    9ab8:	e3c66102 	bic	r6, r6, #-2147483648	; 0x80000000
    9abc:	e5846008 	str	r6, [r4, #8]
    9ac0:	e1a00008 	mov	r0, r8
    9ac4:	e5847000 	str	r7, [r4]
    9ac8:	e1a02005 	mov	r2, r5
    9acc:	e5843004 	str	r3, [r4, #4]
    9ad0:	e1a01004 	mov	r1, r4
    9ad4:	ebffffb0 	bl	999c <CBcmPropertyTags::GetTags(void*, unsigned int)>
    9ad8:	e3500000 	cmp	r0, #0
    9adc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9ae0:	e5940008 	ldr	r0, [r4, #8]
    9ae4:	e3500000 	cmp	r0, #0
    9ae8:	ba000001 	blt	9af4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
    9aec:	e3a00000 	mov	r0, #0
    9af0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9af4:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    9af8:	e5840008 	str	r0, [r4, #8]
    9afc:	e2900000 	adds	r0, r0, #0
    9b00:	13a00001 	movne	r0, #1
    9b04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9b08:	e30f175c 	movw	r1, #63324	; 0xf75c
    9b0c:	e3401000 	movt	r1, #0
    9b10:	e30f07cc 	movw	r0, #63436	; 0xf7cc
    9b14:	e3400000 	movt	r0, #0
    9b18:	e3a02034 	mov	r2, #52	; 0x34
    9b1c:	eb000b2f 	bl	c7e0 <assertion_failed>
    9b20:	eaffffe3 	b	9ab4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x24>
    9b24:	e30f175c 	movw	r1, #63324	; 0xf75c
    9b28:	e3401000 	movt	r1, #0
    9b2c:	e30f07c0 	movw	r0, #63424	; 0xf7c0
    9b30:	e3400000 	movt	r0, #0
    9b34:	e3a02033 	mov	r2, #51	; 0x33
    9b38:	eb000b28 	bl	c7e0 <assertion_failed>
    9b3c:	eaffffda 	b	9aac <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x1c>

00009b40 <CMemorySystem::~CMemorySystem()>:
    9b40:	e5903000 	ldr	r3, [r0]
    9b44:	e92d4070 	push	{r4, r5, r6, lr}
    9b48:	e1a04000 	mov	r4, r0
    9b4c:	e3530000 	cmp	r3, #0
    9b50:	0a000005 	beq	9b6c <CMemorySystem::~CMemorySystem()+0x2c>
    9b54:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9b58:	e3c33b06 	bic	r3, r3, #6144	; 0x1800
    9b5c:	e3c33005 	bic	r3, r3, #5
    9b60:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9b64:	e3a03000 	mov	r3, #0
    9b68:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9b6c:	e594500c 	ldr	r5, [r4, #12]
    9b70:	e3550000 	cmp	r5, #0
    9b74:	0a000003 	beq	9b88 <CMemorySystem::~CMemorySystem()+0x48>
    9b78:	e1a00005 	mov	r0, r5
    9b7c:	eb00068e 	bl	b5bc <CPageTable::~CPageTable()>
    9b80:	e1a00005 	mov	r0, r5
    9b84:	eb00008a 	bl	9db4 <operator delete(void*)>
    9b88:	e5945008 	ldr	r5, [r4, #8]
    9b8c:	e3a03000 	mov	r3, #0
    9b90:	e584300c 	str	r3, [r4, #12]
    9b94:	e1550003 	cmp	r5, r3
    9b98:	0a000003 	beq	9bac <CMemorySystem::~CMemorySystem()+0x6c>
    9b9c:	e1a00005 	mov	r0, r5
    9ba0:	eb000685 	bl	b5bc <CPageTable::~CPageTable()>
    9ba4:	e1a00005 	mov	r0, r5
    9ba8:	eb000081 	bl	9db4 <operator delete(void*)>
    9bac:	e1a00004 	mov	r0, r4
    9bb0:	e8bd8070 	pop	{r4, r5, r6, pc}

00009bb4 <CMemorySystem::GetMemSize() const>:
    9bb4:	e5900004 	ldr	r0, [r0, #4]
    9bb8:	e12fff1e 	bx	lr

00009bbc <CMemorySystem::EnableMMU()>:
    9bbc:	e5903000 	ldr	r3, [r0]
    9bc0:	e92d4010 	push	{r4, lr}
    9bc4:	e1a04000 	mov	r4, r0
    9bc8:	e3530000 	cmp	r3, #0
    9bcc:	0a00001f 	beq	9c50 <CMemorySystem::EnableMMU()+0x94>
    9bd0:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
    9bd4:	e3833040 	orr	r3, r3, #64	; 0x40
    9bd8:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
    9bdc:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
    9be0:	e3130001 	tst	r3, #1
    9be4:	1a000020 	bne	9c6c <CMemorySystem::EnableMMU()+0xb0>
    9be8:	e3a03002 	mov	r3, #2
    9bec:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
    9bf0:	e5940008 	ldr	r0, [r4, #8]
    9bf4:	e3500000 	cmp	r0, #0
    9bf8:	0a00002a 	beq	9ca8 <CMemorySystem::EnableMMU()+0xec>
    9bfc:	eb000677 	bl	b5e0 <CPageTable::GetBaseAddress() const>
    9c00:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    9c04:	e594000c 	ldr	r0, [r4, #12]
    9c08:	e3500000 	cmp	r0, #0
    9c0c:	0a00001d 	beq	9c88 <CMemorySystem::EnableMMU()+0xcc>
    9c10:	eb000672 	bl	b5e0 <CPageTable::GetBaseAddress() const>
    9c14:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    9c18:	e3a03005 	mov	r3, #5
    9c1c:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
    9c20:	ebfffb03 	bl	8834 <InvalidateDataCache>
    9c24:	e3a03000 	mov	r3, #0
    9c28:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9c2c:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9c30:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
    9c34:	f57ff04f 	dsb	sy
    9c38:	f57ff06f 	isb	sy
    9c3c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
    9c40:	e3833b06 	orr	r3, r3, #6144	; 0x1800
    9c44:	e3833005 	orr	r3, r3, #5
    9c48:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
    9c4c:	e8bd8010 	pop	{r4, pc}
    9c50:	e30f17f4 	movw	r1, #63476	; 0xf7f4
    9c54:	e3401000 	movt	r1, #0
    9c58:	e30f0800 	movw	r0, #63488	; 0xf800
    9c5c:	e3400000 	movt	r0, #0
    9c60:	e3a02084 	mov	r2, #132	; 0x84
    9c64:	eb000add 	bl	c7e0 <assertion_failed>
    9c68:	eaffffd8 	b	9bd0 <CMemorySystem::EnableMMU()+0x14>
    9c6c:	e30f17f4 	movw	r1, #63476	; 0xf7f4
    9c70:	e3401000 	movt	r1, #0
    9c74:	e30f0810 	movw	r0, #63504	; 0xf810
    9c78:	e3400000 	movt	r0, #0
    9c7c:	e3a02091 	mov	r2, #145	; 0x91
    9c80:	eb000ad6 	bl	c7e0 <assertion_failed>
    9c84:	eaffffd7 	b	9be8 <CMemorySystem::EnableMMU()+0x2c>
    9c88:	e30f17f4 	movw	r1, #63476	; 0xf7f4
    9c8c:	e3401000 	movt	r1, #0
    9c90:	e30f0858 	movw	r0, #63576	; 0xf858
    9c94:	e3400000 	movt	r0, #0
    9c98:	e3a0209b 	mov	r2, #155	; 0x9b
    9c9c:	eb000acf 	bl	c7e0 <assertion_failed>
    9ca0:	e594000c 	ldr	r0, [r4, #12]
    9ca4:	eaffffd9 	b	9c10 <CMemorySystem::EnableMMU()+0x54>
    9ca8:	e30f17f4 	movw	r1, #63476	; 0xf7f4
    9cac:	e3401000 	movt	r1, #0
    9cb0:	e30f083c 	movw	r0, #63548	; 0xf83c
    9cb4:	e3400000 	movt	r0, #0
    9cb8:	e3a02097 	mov	r2, #151	; 0x97
    9cbc:	eb000ac7 	bl	c7e0 <assertion_failed>
    9cc0:	e5940008 	ldr	r0, [r4, #8]
    9cc4:	eaffffcc 	b	9bfc <CMemorySystem::EnableMMU()+0x40>

00009cc8 <CMemorySystem::CMemorySystem(int)>:
    9cc8:	e92d4030 	push	{r4, r5, lr}
    9ccc:	e1a04000 	mov	r4, r0
    9cd0:	e3a05000 	mov	r5, #0
    9cd4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    9cd8:	e8840022 	stm	r4, {r1, r5}
    9cdc:	e28d000c 	add	r0, sp, #12
    9ce0:	e5845008 	str	r5, [r4, #8]
    9ce4:	e584500c 	str	r5, [r4, #12]
    9ce8:	ebffff20 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    9cec:	e3a03014 	mov	r3, #20
    9cf0:	e58d5000 	str	r5, [sp]
    9cf4:	e28d000c 	add	r0, sp, #12
    9cf8:	e3a01005 	mov	r1, #5
    9cfc:	e3401001 	movt	r1, #1
    9d00:	e08d2003 	add	r2, sp, r3
    9d04:	ebffff61 	bl	9a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9d08:	e3500000 	cmp	r0, #0
    9d0c:	1a000019 	bne	9d78 <CMemorySystem::CMemorySystem(int)+0xb0>
    9d10:	e3a01303 	mov	r1, #201326592	; 0xc000000
    9d14:	e58d0020 	str	r0, [sp, #32]
    9d18:	e58d1024 	str	r1, [sp, #36]	; 0x24
    9d1c:	e5841004 	str	r1, [r4, #4]
    9d20:	ebfffe0d 	bl	955c <mem_init>
    9d24:	e5943000 	ldr	r3, [r4]
    9d28:	e3530000 	cmp	r3, #0
    9d2c:	0a00000c 	beq	9d64 <CMemorySystem::CMemorySystem(int)+0x9c>
    9d30:	e3a00008 	mov	r0, #8
    9d34:	eb00001c 	bl	9dac <operator new(unsigned int)>
    9d38:	e5941004 	ldr	r1, [r4, #4]
    9d3c:	e1a05000 	mov	r5, r0
    9d40:	eb0005cd 	bl	b47c <CPageTable::CPageTable(unsigned int)>
    9d44:	e5845008 	str	r5, [r4, #8]
    9d48:	e3a00008 	mov	r0, #8
    9d4c:	eb000016 	bl	9dac <operator new(unsigned int)>
    9d50:	e1a05000 	mov	r5, r0
    9d54:	eb00059c 	bl	b3cc <CPageTable::CPageTable()>
    9d58:	e584500c 	str	r5, [r4, #12]
    9d5c:	e1a00004 	mov	r0, r4
    9d60:	ebffff95 	bl	9bbc <CMemorySystem::EnableMMU()>
    9d64:	e28d000c 	add	r0, sp, #12
    9d68:	ebffff06 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    9d6c:	e1a00004 	mov	r0, r4
    9d70:	e28dd02c 	add	sp, sp, #44	; 0x2c
    9d74:	e8bd8030 	pop	{r4, r5, pc}
    9d78:	e59d0020 	ldr	r0, [sp, #32]
    9d7c:	e3500000 	cmp	r0, #0
    9d80:	059d1024 	ldreq	r1, [sp, #36]	; 0x24
    9d84:	0affffe4 	beq	9d1c <CMemorySystem::CMemorySystem(int)+0x54>
    9d88:	e30f17f4 	movw	r1, #63476	; 0xf7f4
    9d8c:	e3401000 	movt	r1, #0
    9d90:	e30f086c 	movw	r0, #63596	; 0xf86c
    9d94:	e3400000 	movt	r0, #0
    9d98:	e3a02044 	mov	r2, #68	; 0x44
    9d9c:	eb000a8f 	bl	c7e0 <assertion_failed>
    9da0:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    9da4:	e59d0020 	ldr	r0, [sp, #32]
    9da8:	eaffffdb 	b	9d1c <CMemorySystem::CMemorySystem(int)+0x54>

00009dac <operator new(unsigned int)>:
    9dac:	eafffe03 	b	95c0 <malloc>

00009db0 <operator new[](unsigned int)>:
    9db0:	eafffe02 	b	95c0 <malloc>

00009db4 <operator delete(void*)>:
    9db4:	eafffe63 	b	9748 <free>

00009db8 <operator delete[](void*)>:
    9db8:	eafffe62 	b	9748 <free>

00009dbc <EnterCritical>:
    9dbc:	e10f1000 	mrs	r1, CPSR
    9dc0:	f10c0080 	cpsid	i
    9dc4:	e3013b80 	movw	r3, #7040	; 0x1b80
    9dc8:	e3403001 	movt	r3, #1
    9dcc:	e5932000 	ldr	r2, [r3]
    9dd0:	e3520000 	cmp	r2, #0
    9dd4:	e2822001 	add	r2, r2, #1
    9dd8:	02211080 	eoreq	r1, r1, #128	; 0x80
    9ddc:	e5832000 	str	r2, [r3]
    9de0:	07e013d1 	ubfxeq	r1, r1, #7, #1
    9de4:	05831004 	streq	r1, [r3, #4]
    9de8:	f57ff05f 	dmb	sy
    9dec:	e12fff1e 	bx	lr

00009df0 <LeaveCritical>:
    9df0:	e92d4010 	push	{r4, lr}
    9df4:	f57ff05f 	dmb	sy
    9df8:	e3014b80 	movw	r4, #7040	; 0x1b80
    9dfc:	e3404001 	movt	r4, #1
    9e00:	e5943000 	ldr	r3, [r4]
    9e04:	e3530000 	cmp	r3, #0
    9e08:	0a000009 	beq	9e34 <LeaveCritical+0x44>
    9e0c:	e5943000 	ldr	r3, [r4]
    9e10:	e2433001 	sub	r3, r3, #1
    9e14:	e3530000 	cmp	r3, #0
    9e18:	e5843000 	str	r3, [r4]
    9e1c:	18bd8010 	popne	{r4, pc}
    9e20:	e5943004 	ldr	r3, [r4, #4]
    9e24:	e3530000 	cmp	r3, #0
    9e28:	08bd8010 	popeq	{r4, pc}
    9e2c:	f1080080 	cpsie	i
    9e30:	e8bd8010 	pop	{r4, pc}
    9e34:	e30f1888 	movw	r1, #63624	; 0xf888
    9e38:	e3401000 	movt	r1, #0
    9e3c:	e30f0898 	movw	r0, #63640	; 0xf898
    9e40:	e3400000 	movt	r0, #0
    9e44:	e3a0205d 	mov	r2, #93	; 0x5d
    9e48:	eb000a64 	bl	c7e0 <assertion_failed>
    9e4c:	eaffffee 	b	9e0c <LeaveCritical+0x1c>

00009e50 <SyncDataAndInstructionCache>:
    9e50:	e92d4010 	push	{r4, lr}
    9e54:	ebfffaa0 	bl	88dc <CleanDataCache>
    9e58:	e3a03000 	mov	r3, #0
    9e5c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    9e60:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    9e64:	f57ff04f 	dsb	sy
    9e68:	f57ff06f 	isb	sy
    9e6c:	e8bd8010 	pop	{r4, pc}

00009e70 <CTimer::CTimer(CInterruptSystem*)>:
    9e70:	e92d4070 	push	{r4, r5, r6, lr}
    9e74:	e1a04000 	mov	r4, r0
    9e78:	e3015b88 	movw	r5, #7048	; 0x1b88
    9e7c:	e3405001 	movt	r5, #1
    9e80:	e3a03000 	mov	r3, #0
    9e84:	e3a06001 	mov	r6, #1
    9e88:	e5801000 	str	r1, [r0]
    9e8c:	e2800018 	add	r0, r0, #24
    9e90:	e5843004 	str	r3, [r4, #4]
    9e94:	e5843014 	str	r3, [r4, #20]
    9e98:	e5843008 	str	r3, [r4, #8]
    9e9c:	e5846010 	str	r6, [r4, #16]
    9ea0:	e584300c 	str	r3, [r4, #12]
    9ea4:	eb0011d9 	bl	e610 <CPtrList::CPtrList()>
    9ea8:	e5951000 	ldr	r1, [r5]
    9eac:	e300215e 	movw	r2, #350	; 0x15e
    9eb0:	e3053730 	movw	r3, #22320	; 0x5730
    9eb4:	e3403005 	movt	r3, #5
    9eb8:	e3510000 	cmp	r1, #0
    9ebc:	e584601c 	str	r6, [r4, #28]
    9ec0:	e5843020 	str	r3, [r4, #32]
    9ec4:	e5842024 	str	r2, [r4, #36]	; 0x24
    9ec8:	0a000005 	beq	9ee4 <CTimer::CTimer(CInterruptSystem*)+0x74>
    9ecc:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    9ed0:	e3401000 	movt	r1, #0
    9ed4:	e30f08f4 	movw	r0, #63732	; 0xf8f4
    9ed8:	e3400000 	movt	r0, #0
    9edc:	e3a0203d 	mov	r2, #61	; 0x3d
    9ee0:	eb000a3e 	bl	c7e0 <assertion_failed>
    9ee4:	e5854000 	str	r4, [r5]
    9ee8:	e1a00004 	mov	r0, r4
    9eec:	e8bd8070 	pop	{r4, r5, r6, pc}

00009ef0 <CTimer::~CTimer()>:
    9ef0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9ef4:	e1a09000 	mov	r9, r0
    9ef8:	e5900000 	ldr	r0, [r0]
    9efc:	e3500000 	cmp	r0, #0
    9f00:	0a00002b 	beq	9fb4 <CTimer::~CTimer()+0xc4>
    9f04:	e3a01003 	mov	r1, #3
    9f08:	e30f78e8 	movw	r7, #63720	; 0xf8e8
    9f0c:	e3407000 	movt	r7, #0
    9f10:	e30fa91c 	movw	sl, #63772	; 0xf91c
    9f14:	e340a000 	movt	sl, #0
    9f18:	e3048d43 	movw	r8, #19779	; 0x4d43
    9f1c:	e3448b54 	movt	r8, #19284	; 0x4b54
    9f20:	e2894018 	add	r4, r9, #24
    9f24:	eb001141 	bl	e430 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    9f28:	ea00000f 	b	9f6c <CTimer::~CTimer()+0x7c>
    9f2c:	eb0011e0 	bl	e6b4 <CPtrList::GetPtr(TPtrListElement*)>
    9f30:	e2506000 	subs	r6, r0, #0
    9f34:	0a000019 	beq	9fa0 <CTimer::~CTimer()+0xb0>
    9f38:	e5963000 	ldr	r3, [r6]
    9f3c:	e30f0928 	movw	r0, #63784	; 0xf928
    9f40:	e3400000 	movt	r0, #0
    9f44:	e1530008 	cmp	r3, r8
    9f48:	e3a0204b 	mov	r2, #75	; 0x4b
    9f4c:	e1a01007 	mov	r1, r7
    9f50:	0a000000 	beq	9f58 <CTimer::~CTimer()+0x68>
    9f54:	eb000a21 	bl	c7e0 <assertion_failed>
    9f58:	e1a00004 	mov	r0, r4
    9f5c:	e1a01005 	mov	r1, r5
    9f60:	eb001273 	bl	e934 <CPtrList::Remove(TPtrListElement*)>
    9f64:	e1a00006 	mov	r0, r6
    9f68:	ebffff91 	bl	9db4 <operator delete(void*)>
    9f6c:	e1a00004 	mov	r0, r4
    9f70:	eb0011b6 	bl	e650 <CPtrList::GetFirst()>
    9f74:	e2505000 	subs	r5, r0, #0
    9f78:	e1a01005 	mov	r1, r5
    9f7c:	e1a00004 	mov	r0, r4
    9f80:	1affffe9 	bne	9f2c <CTimer::~CTimer()+0x3c>
    9f84:	e3013b88 	movw	r3, #7048	; 0x1b88
    9f88:	e3403001 	movt	r3, #1
    9f8c:	e1a00004 	mov	r0, r4
    9f90:	e5835000 	str	r5, [r3]
    9f94:	eb0011a0 	bl	e61c <CPtrList::~CPtrList()>
    9f98:	e1a00009 	mov	r0, r9
    9f9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9fa0:	e3a0204a 	mov	r2, #74	; 0x4a
    9fa4:	e1a01007 	mov	r1, r7
    9fa8:	e1a0000a 	mov	r0, sl
    9fac:	eb000a0b 	bl	c7e0 <assertion_failed>
    9fb0:	eaffffe0 	b	9f38 <CTimer::~CTimer()+0x48>
    9fb4:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    9fb8:	e3401000 	movt	r1, #0
    9fbc:	e30f0904 	movw	r0, #63748	; 0xf904
    9fc0:	e3400000 	movt	r0, #0
    9fc4:	e3a02043 	mov	r2, #67	; 0x43
    9fc8:	eb000a04 	bl	c7e0 <assertion_failed>
    9fcc:	e5990000 	ldr	r0, [r9]
    9fd0:	eaffffcb 	b	9f04 <CTimer::~CTimer()+0x14>

00009fd4 <CTimer::SetTimeZone(int)>:
    9fd4:	e2813e59 	add	r3, r1, #1424	; 0x590
    9fd8:	e3002b3e 	movw	r2, #2878	; 0xb3e
    9fdc:	e283300f 	add	r3, r3, #15
    9fe0:	e1530002 	cmp	r3, r2
    9fe4:	95801014 	strls	r1, [r0, #20]
    9fe8:	93a00001 	movls	r0, #1
    9fec:	83a00000 	movhi	r0, #0
    9ff0:	e12fff1e 	bx	lr

00009ff4 <CTimer::GetTimeZone() const>:
    9ff4:	e5900014 	ldr	r0, [r0, #20]
    9ff8:	e12fff1e 	bx	lr

00009ffc <CTimer::SetTime(unsigned int, int)>:
    9ffc:	e3520000 	cmp	r2, #0
    a000:	e92d4070 	push	{r4, r5, r6, lr}
    a004:	e1a04000 	mov	r4, r0
    a008:	e1a05001 	mov	r5, r1
    a00c:	1a000005 	bne	a028 <CTimer::SetTime(unsigned int, int)+0x2c>
    a010:	e5901014 	ldr	r1, [r0, #20]
    a014:	e3a0303c 	mov	r3, #60	; 0x3c
    a018:	e0030193 	mul	r3, r3, r1
    a01c:	e3530000 	cmp	r3, #0
    a020:	ba00000e 	blt	a060 <CTimer::SetTime(unsigned int, int)+0x64>
    a024:	e0855003 	add	r5, r5, r3
    a028:	e5943010 	ldr	r3, [r4, #16]
    a02c:	e3530000 	cmp	r3, #0
    a030:	1a000002 	bne	a040 <CTimer::SetTime(unsigned int, int)+0x44>
    a034:	e3a00001 	mov	r0, #1
    a038:	e584500c 	str	r5, [r4, #12]
    a03c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a040:	ebffff5d 	bl	9dbc <EnterCritical>
    a044:	e5943010 	ldr	r3, [r4, #16]
    a048:	e584500c 	str	r5, [r4, #12]
    a04c:	e3530000 	cmp	r3, #0
    a050:	0a000007 	beq	a074 <CTimer::SetTime(unsigned int, int)+0x78>
    a054:	ebffff65 	bl	9df0 <LeaveCritical>
    a058:	e3a00001 	mov	r0, #1
    a05c:	e8bd8070 	pop	{r4, r5, r6, pc}
    a060:	e2631000 	rsb	r1, r3, #0
    a064:	e1510005 	cmp	r1, r5
    a068:	daffffed 	ble	a024 <CTimer::SetTime(unsigned int, int)+0x28>
    a06c:	e1a00002 	mov	r0, r2
    a070:	e8bd8070 	pop	{r4, r5, r6, pc}
    a074:	e3a00001 	mov	r0, #1
    a078:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a07c <CTimer::GetClockTicks()>:
    a07c:	e3a03a03 	mov	r3, #12288	; 0x3000
    a080:	e3433f00 	movt	r3, #16128	; 0x3f00
    a084:	e5930004 	ldr	r0, [r3, #4]
    a088:	e12fff1e 	bx	lr

0000a08c <CTimer::GetTicks() const>:
    a08c:	e5900004 	ldr	r0, [r0, #4]
    a090:	e12fff1e 	bx	lr

0000a094 <CTimer::GetUptime() const>:
    a094:	e5900008 	ldr	r0, [r0, #8]
    a098:	e12fff1e 	bx	lr

0000a09c <CTimer::GetTime() const>:
    a09c:	e590000c 	ldr	r0, [r0, #12]
    a0a0:	e12fff1e 	bx	lr

0000a0a4 <CTimer::GetUniversalTime() const>:
    a0a4:	e5902014 	ldr	r2, [r0, #20]
    a0a8:	e3a0303c 	mov	r3, #60	; 0x3c
    a0ac:	e590000c 	ldr	r0, [r0, #12]
    a0b0:	e0030293 	mul	r3, r3, r2
    a0b4:	e1530000 	cmp	r3, r0
    a0b8:	d0400003 	suble	r0, r0, r3
    a0bc:	c3a00000 	movgt	r0, #0
    a0c0:	e12fff1e 	bx	lr

0000a0c4 <CTimer::GetTimeString()>:
    a0c4:	e5903010 	ldr	r3, [r0, #16]
    a0c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a0cc:	e1a04000 	mov	r4, r0
    a0d0:	e3530000 	cmp	r3, #0
    a0d4:	e24dd014 	sub	sp, sp, #20
    a0d8:	1a00006c 	bne	a290 <CTimer::GetTimeString()+0x1cc>
    a0dc:	e590500c 	ldr	r5, [r0, #12]
    a0e0:	e5909004 	ldr	r9, [r0, #4]
    a0e4:	e1950009 	orrs	r0, r5, r9
    a0e8:	0a000051 	beq	a234 <CTimer::GetTimeString()+0x170>
    a0ec:	e3086889 	movw	r6, #34953	; 0x8889
    a0f0:	e3486888 	movt	r6, #34952	; 0x8888
    a0f4:	e30b73c5 	movw	r7, #46021	; 0xb3c5
    a0f8:	e34971a2 	movt	r7, #37282	; 0x91a2
    a0fc:	e3044507 	movw	r4, #17671	; 0x4507
    a100:	e34c422e 	movt	r4, #49710	; 0xc22e
    a104:	e0813596 	umull	r3, r1, r6, r5
    a108:	e3a0003c 	mov	r0, #60	; 0x3c
    a10c:	e0832695 	umull	r2, r3, r5, r6
    a110:	e308c51f 	movw	ip, #34079	; 0x851f
    a114:	e345c1eb 	movt	ip, #20971	; 0x51eb
    a118:	e1a012a1 	lsr	r1, r1, #5
    a11c:	e1a082a3 	lsr	r8, r3, #5
    a120:	e0873597 	umull	r3, r7, r7, r5
    a124:	e3a0a064 	mov	sl, #100	; 0x64
    a128:	e0843594 	umull	r3, r4, r4, r5
    a12c:	e3a0ee19 	mov	lr, #400	; 0x190
    a130:	e0863196 	umull	r3, r6, r6, r1
    a134:	e1a075a7 	lsr	r7, r7, #11
    a138:	e0685890 	mls	r8, r0, r8, r5
    a13c:	e1a04824 	lsr	r4, r4, #16
    a140:	e1a062a6 	lsr	r6, r6, #5
    a144:	e30057b2 	movw	r5, #1970	; 0x7b2
    a148:	e300216d 	movw	r2, #365	; 0x16d
    a14c:	e300316e 	movw	r3, #366	; 0x16e
    a150:	e0661690 	mls	r6, r0, r6, r1
    a154:	ea000001 	b	a160 <CTimer::GetTimeString()+0x9c>
    a158:	e0444000 	sub	r4, r4, r0
    a15c:	e2855001 	add	r5, r5, #1
    a160:	e0810c95 	umull	r0, r1, r5, ip
    a164:	e1a002a1 	lsr	r0, r1, #5
    a168:	e1a013a1 	lsr	r1, r1, #7
    a16c:	e060509a 	mls	r0, sl, r0, r5
    a170:	e061519e 	mls	r1, lr, r1, r5
    a174:	e3500000 	cmp	r0, #0
    a178:	e16f1f11 	clz	r1, r1
    a17c:	01a012a1 	lsreq	r1, r1, #5
    a180:	0a000002 	beq	a190 <CTimer::GetTimeString()+0xcc>
    a184:	e3150003 	tst	r5, #3
    a188:	03a01001 	moveq	r1, #1
    a18c:	13a01000 	movne	r1, #0
    a190:	e3510000 	cmp	r1, #0
    a194:	01a00002 	moveq	r0, r2
    a198:	11a00003 	movne	r0, r3
    a19c:	e1540000 	cmp	r4, r0
    a1a0:	2affffec 	bcs	a158 <CTimer::GetTimeString()+0x94>
    a1a4:	e30f08b0 	movw	r0, #63664	; 0xf8b0
    a1a8:	e3400000 	movt	r0, #0
    a1ac:	e3a0a000 	mov	sl, #0
    a1b0:	ea000001 	b	a1bc <CTimer::GetTimeString()+0xf8>
    a1b4:	e0444003 	sub	r4, r4, r3
    a1b8:	e28aa001 	add	sl, sl, #1
    a1bc:	e35a0001 	cmp	sl, #1
    a1c0:	13a02000 	movne	r2, #0
    a1c4:	02012001 	andeq	r2, r1, #1
    a1c8:	e3a0301d 	mov	r3, #29
    a1cc:	e3520000 	cmp	r2, #0
    a1d0:	0790310a 	ldreq	r3, [r0, sl, lsl #2]
    a1d4:	e1540003 	cmp	r4, r3
    a1d8:	2afffff5 	bcs	a1b4 <CTimer::GetTimeString()+0xf0>
    a1dc:	e308251f 	movw	r2, #34079	; 0x851f
    a1e0:	e34521eb 	movt	r2, #20971	; 0x51eb
    a1e4:	e3a01064 	mov	r1, #100	; 0x64
    a1e8:	e3a00010 	mov	r0, #16
    a1ec:	e0832299 	umull	r2, r3, r9, r2
    a1f0:	e1a0b2a3 	lsr	fp, r3, #5
    a1f4:	e06b9b91 	mls	fp, r1, fp, r9
    a1f8:	ebfffeeb 	bl	9dac <operator new(unsigned int)>
    a1fc:	e1a09000 	mov	r9, r0
    a200:	eb000c22 	bl	d290 <CString::CString()>
    a204:	e30037b7 	movw	r3, #1975	; 0x7b7
    a208:	e1550003 	cmp	r5, r3
    a20c:	8a00000a 	bhi	a23c <CTimer::GetTimeString()+0x178>
    a210:	e1a00009 	mov	r0, r9
    a214:	e58db004 	str	fp, [sp, #4]
    a218:	e1a03006 	mov	r3, r6
    a21c:	e58d8000 	str	r8, [sp]
    a220:	e1a02007 	mov	r2, r7
    a224:	e30f196c 	movw	r1, #63852	; 0xf96c
    a228:	e3401000 	movt	r1, #0
    a22c:	eb000f2a 	bl	dedc <CString::Format(char const*, ...)>
    a230:	e1a00009 	mov	r0, r9
    a234:	e28dd014 	add	sp, sp, #20
    a238:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a23c:	e30a0aab 	movw	r0, #43691	; 0xaaab
    a240:	e34a0aaa 	movt	r0, #43690	; 0xaaaa
    a244:	e3a0c018 	mov	ip, #24
    a248:	e3002db0 	movw	r2, #3504	; 0xdb0
    a24c:	e3402001 	movt	r2, #1
    a250:	e0810097 	umull	r0, r1, r7, r0
    a254:	e58db00c 	str	fp, [sp, #12]
    a258:	e58d8008 	str	r8, [sp, #8]
    a25c:	e2843001 	add	r3, r4, #1
    a260:	e1a00221 	lsr	r0, r1, #4
    a264:	e30f1950 	movw	r1, #63824	; 0xf950
    a268:	e3401000 	movt	r1, #0
    a26c:	e792210a 	ldr	r2, [r2, sl, lsl #2]
    a270:	e067709c 	mls	r7, ip, r0, r7
    a274:	e58d6004 	str	r6, [sp, #4]
    a278:	e1a00009 	mov	r0, r9
    a27c:	e58d7000 	str	r7, [sp]
    a280:	eb000f15 	bl	dedc <CString::Format(char const*, ...)>
    a284:	e1a00009 	mov	r0, r9
    a288:	e28dd014 	add	sp, sp, #20
    a28c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a290:	ebfffec9 	bl	9dbc <EnterCritical>
    a294:	e5943010 	ldr	r3, [r4, #16]
    a298:	e594500c 	ldr	r5, [r4, #12]
    a29c:	e3530000 	cmp	r3, #0
    a2a0:	e5949004 	ldr	r9, [r4, #4]
    a2a4:	0affff8e 	beq	a0e4 <CTimer::GetTimeString()+0x20>
    a2a8:	ebfffed0 	bl	9df0 <LeaveCritical>
    a2ac:	eaffff8c 	b	a0e4 <CTimer::GetTimeString()+0x20>

0000a2b0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    a2b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2b4:	e1a0a000 	mov	sl, r0
    a2b8:	e1a04002 	mov	r4, r2
    a2bc:	e24dd00c 	sub	sp, sp, #12
    a2c0:	e3a00014 	mov	r0, #20
    a2c4:	e1a06001 	mov	r6, r1
    a2c8:	e1a07003 	mov	r7, r3
    a2cc:	e59d5030 	ldr	r5, [sp, #48]	; 0x30
    a2d0:	ebfffeb5 	bl	9dac <operator new(unsigned int)>
    a2d4:	e3540000 	cmp	r4, #0
    a2d8:	e59a1004 	ldr	r1, [sl, #4]
    a2dc:	e1a09000 	mov	r9, r0
    a2e0:	e0816006 	add	r6, r1, r6
    a2e4:	0a000042 	beq	a3f4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x144>
    a2e8:	e59a301c 	ldr	r3, [sl, #28]
    a2ec:	e3042d43 	movw	r2, #19779	; 0x4d43
    a2f0:	e3442b54 	movt	r2, #19284	; 0x4b54
    a2f4:	e3530000 	cmp	r3, #0
    a2f8:	e98900d0 	stmib	r9, {r4, r6, r7}
    a2fc:	e5895010 	str	r5, [r9, #16]
    a300:	e5892000 	str	r2, [r9]
    a304:	1a000038 	bne	a3ec <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x13c>
    a308:	e28a5018 	add	r5, sl, #24
    a30c:	e1a00005 	mov	r0, r5
    a310:	eb0010ce 	bl	e650 <CPtrList::GetFirst()>
    a314:	e2504000 	subs	r4, r0, #0
    a318:	0a00002e 	beq	a3d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a31c:	e30f3990 	movw	r3, #63888	; 0xf990
    a320:	e3403000 	movt	r3, #0
    a324:	e30f78e8 	movw	r7, #63720	; 0xf8e8
    a328:	e3407000 	movt	r7, #0
    a32c:	e3048d43 	movw	r8, #19779	; 0x4d43
    a330:	e3448b54 	movt	r8, #19284	; 0x4b54
    a334:	e58d3004 	str	r3, [sp, #4]
    a338:	ea000011 	b	a384 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xd4>
    a33c:	e59bc000 	ldr	ip, [fp]
    a340:	e30f09a0 	movw	r0, #63904	; 0xf9a0
    a344:	e3400000 	movt	r0, #0
    a348:	e15c0008 	cmp	ip, r8
    a34c:	e3a02f46 	mov	r2, #280	; 0x118
    a350:	e1a01007 	mov	r1, r7
    a354:	0a000000 	beq	a35c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xac>
    a358:	eb000920 	bl	c7e0 <assertion_failed>
    a35c:	e59b3008 	ldr	r3, [fp, #8]
    a360:	e1a01004 	mov	r1, r4
    a364:	e1a00005 	mov	r0, r5
    a368:	e0433006 	sub	r3, r3, r6
    a36c:	e3530000 	cmp	r3, #0
    a370:	ca00000d 	bgt	a3ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    a374:	eb0010b7 	bl	e658 <CPtrList::GetNext(TPtrListElement*)>
    a378:	e3500000 	cmp	r0, #0
    a37c:	0a000015 	beq	a3d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x128>
    a380:	e1a04000 	mov	r4, r0
    a384:	e1a01004 	mov	r1, r4
    a388:	e1a00005 	mov	r0, r5
    a38c:	eb0010c8 	bl	e6b4 <CPtrList::GetPtr(TPtrListElement*)>
    a390:	e250b000 	subs	fp, r0, #0
    a394:	1affffe8 	bne	a33c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a398:	e3002117 	movw	r2, #279	; 0x117
    a39c:	e1a01007 	mov	r1, r7
    a3a0:	e59d0004 	ldr	r0, [sp, #4]
    a3a4:	eb00090d 	bl	c7e0 <assertion_failed>
    a3a8:	eaffffe3 	b	a33c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x8c>
    a3ac:	e1a01004 	mov	r1, r4
    a3b0:	e1a00005 	mov	r0, r5
    a3b4:	e1a02009 	mov	r2, r9
    a3b8:	eb0010d4 	bl	e710 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    a3bc:	e59a301c 	ldr	r3, [sl, #28]
    a3c0:	e3530000 	cmp	r3, #0
    a3c4:	0a000000 	beq	a3cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x11c>
    a3c8:	ebfffe88 	bl	9df0 <LeaveCritical>
    a3cc:	e1a00009 	mov	r0, r9
    a3d0:	e28dd00c 	add	sp, sp, #12
    a3d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a3d8:	e1a01004 	mov	r1, r4
    a3dc:	e1a00005 	mov	r0, r5
    a3e0:	e1a02009 	mov	r2, r9
    a3e4:	eb00110f 	bl	e828 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    a3e8:	eafffff3 	b	a3bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>
    a3ec:	ebfffe72 	bl	9dbc <EnterCritical>
    a3f0:	eaffffc4 	b	a308 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x58>
    a3f4:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    a3f8:	e3401000 	movt	r1, #0
    a3fc:	e30f0980 	movw	r0, #63872	; 0xf980
    a400:	e3400000 	movt	r0, #0
    a404:	e3002107 	movw	r2, #263	; 0x107
    a408:	eb0008f4 	bl	c7e0 <assertion_failed>
    a40c:	eaffffb5 	b	a2e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x38>

0000a410 <CTimer::CancelKernelTimer(unsigned int)>:
    a410:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a414:	e2514000 	subs	r4, r1, #0
    a418:	e1a05000 	mov	r5, r0
    a41c:	0a000021 	beq	a4a8 <CTimer::CancelKernelTimer(unsigned int)+0x98>
    a420:	e595301c 	ldr	r3, [r5, #28]
    a424:	e3530000 	cmp	r3, #0
    a428:	1a00001c 	bne	a4a0 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    a42c:	e2856018 	add	r6, r5, #24
    a430:	e1a01004 	mov	r1, r4
    a434:	e1a00006 	mov	r0, r6
    a438:	eb001198 	bl	eaa0 <CPtrList::Find(void*)>
    a43c:	e2507000 	subs	r7, r0, #0
    a440:	0a000011 	beq	a48c <CTimer::CancelKernelTimer(unsigned int)+0x7c>
    a444:	e5942000 	ldr	r2, [r4]
    a448:	e3043d43 	movw	r3, #19779	; 0x4d43
    a44c:	e3443b54 	movt	r3, #19284	; 0x4b54
    a450:	e1520003 	cmp	r2, r3
    a454:	0a000005 	beq	a470 <CTimer::CancelKernelTimer(unsigned int)+0x60>
    a458:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    a45c:	e3401000 	movt	r1, #0
    a460:	e30f0928 	movw	r0, #63784	; 0xf928
    a464:	e3400000 	movt	r0, #0
    a468:	e300213b 	movw	r2, #315	; 0x13b
    a46c:	eb0008db 	bl	c7e0 <assertion_failed>
    a470:	e1a00006 	mov	r0, r6
    a474:	e1a01007 	mov	r1, r7
    a478:	eb00112d 	bl	e934 <CPtrList::Remove(TPtrListElement*)>
    a47c:	e3a03000 	mov	r3, #0
    a480:	e5843000 	str	r3, [r4]
    a484:	e1a00004 	mov	r0, r4
    a488:	ebfffe49 	bl	9db4 <operator delete(void*)>
    a48c:	e595301c 	ldr	r3, [r5, #28]
    a490:	e3530000 	cmp	r3, #0
    a494:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    a498:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    a49c:	eafffe53 	b	9df0 <LeaveCritical>
    a4a0:	ebfffe45 	bl	9dbc <EnterCritical>
    a4a4:	eaffffe0 	b	a42c <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    a4a8:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    a4ac:	e3401000 	movt	r1, #0
    a4b0:	e30f091c 	movw	r0, #63772	; 0xf91c
    a4b4:	e3400000 	movt	r0, #0
    a4b8:	e3a02f4d 	mov	r2, #308	; 0x134
    a4bc:	eb0008c7 	bl	c7e0 <assertion_failed>
    a4c0:	eaffffd6 	b	a420 <CTimer::CancelKernelTimer(unsigned int)+0x10>

0000a4c4 <CTimer::PollKernelTimers()>:
    a4c4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4c8:	e1a06000 	mov	r6, r0
    a4cc:	e590301c 	ldr	r3, [r0, #28]
    a4d0:	e3530000 	cmp	r3, #0
    a4d4:	1a00004e 	bne	a614 <CTimer::PollKernelTimers()+0x150>
    a4d8:	e2867018 	add	r7, r6, #24
    a4dc:	e1a00007 	mov	r0, r7
    a4e0:	eb00105a 	bl	e650 <CPtrList::GetFirst()>
    a4e4:	e2505000 	subs	r5, r0, #0
    a4e8:	0a00003f 	beq	a5ec <CTimer::PollKernelTimers()+0x128>
    a4ec:	e30f98e8 	movw	r9, #63720	; 0xf8e8
    a4f0:	e3409000 	movt	r9, #0
    a4f4:	e30fa91c 	movw	sl, #63772	; 0xf91c
    a4f8:	e340a000 	movt	sl, #0
    a4fc:	e3048d43 	movw	r8, #19779	; 0x4d43
    a500:	e3448b54 	movt	r8, #19284	; 0x4b54
    a504:	ea00000f 	b	a548 <CTimer::PollKernelTimers()+0x84>
    a508:	e5945004 	ldr	r5, [r4, #4]
    a50c:	e3550000 	cmp	r5, #0
    a510:	0a00002c 	beq	a5c8 <CTimer::PollKernelTimers()+0x104>
    a514:	e5942010 	ldr	r2, [r4, #16]
    a518:	e1a00004 	mov	r0, r4
    a51c:	e594100c 	ldr	r1, [r4, #12]
    a520:	e12fff35 	blx	r5
    a524:	e3a03000 	mov	r3, #0
    a528:	e5843000 	str	r3, [r4]
    a52c:	e1a00004 	mov	r0, r4
    a530:	ebfffe1f 	bl	9db4 <operator delete(void*)>
    a534:	e596301c 	ldr	r3, [r6, #28]
    a538:	e3530000 	cmp	r3, #0
    a53c:	1a000027 	bne	a5e0 <CTimer::PollKernelTimers()+0x11c>
    a540:	e25b5000 	subs	r5, fp, #0
    a544:	0a000028 	beq	a5ec <CTimer::PollKernelTimers()+0x128>
    a548:	e1a01005 	mov	r1, r5
    a54c:	e1a00007 	mov	r0, r7
    a550:	eb001057 	bl	e6b4 <CPtrList::GetPtr(TPtrListElement*)>
    a554:	e2504000 	subs	r4, r0, #0
    a558:	0a000028 	beq	a600 <CTimer::PollKernelTimers()+0x13c>
    a55c:	e5943000 	ldr	r3, [r4]
    a560:	e1530008 	cmp	r3, r8
    a564:	0a000004 	beq	a57c <CTimer::PollKernelTimers()+0xb8>
    a568:	e30f0928 	movw	r0, #63784	; 0xf928
    a56c:	e3400000 	movt	r0, #0
    a570:	e3002151 	movw	r2, #337	; 0x151
    a574:	e1a01009 	mov	r1, r9
    a578:	eb000898 	bl	c7e0 <assertion_failed>
    a57c:	e5962004 	ldr	r2, [r6, #4]
    a580:	e5943008 	ldr	r3, [r4, #8]
    a584:	e0433002 	sub	r3, r3, r2
    a588:	e3530000 	cmp	r3, #0
    a58c:	ca000016 	bgt	a5ec <CTimer::PollKernelTimers()+0x128>
    a590:	e1a01005 	mov	r1, r5
    a594:	e1a00007 	mov	r0, r7
    a598:	eb00102e 	bl	e658 <CPtrList::GetNext(TPtrListElement*)>
    a59c:	e1a01005 	mov	r1, r5
    a5a0:	e1a0b000 	mov	fp, r0
    a5a4:	e1a00007 	mov	r0, r7
    a5a8:	eb0010e1 	bl	e934 <CPtrList::Remove(TPtrListElement*)>
    a5ac:	e596301c 	ldr	r3, [r6, #28]
    a5b0:	e3530000 	cmp	r3, #0
    a5b4:	0affffd3 	beq	a508 <CTimer::PollKernelTimers()+0x44>
    a5b8:	ebfffe0c 	bl	9df0 <LeaveCritical>
    a5bc:	e5945004 	ldr	r5, [r4, #4]
    a5c0:	e3550000 	cmp	r5, #0
    a5c4:	1affffd2 	bne	a514 <CTimer::PollKernelTimers()+0x50>
    a5c8:	e30f0980 	movw	r0, #63872	; 0xf980
    a5cc:	e3400000 	movt	r0, #0
    a5d0:	e300215f 	movw	r2, #351	; 0x15f
    a5d4:	e1a01009 	mov	r1, r9
    a5d8:	eb000880 	bl	c7e0 <assertion_failed>
    a5dc:	eaffffcc 	b	a514 <CTimer::PollKernelTimers()+0x50>
    a5e0:	ebfffdf5 	bl	9dbc <EnterCritical>
    a5e4:	e25b5000 	subs	r5, fp, #0
    a5e8:	1affffd6 	bne	a548 <CTimer::PollKernelTimers()+0x84>
    a5ec:	e596301c 	ldr	r3, [r6, #28]
    a5f0:	e3530000 	cmp	r3, #0
    a5f4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5f8:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a5fc:	eafffdfb 	b	9df0 <LeaveCritical>
    a600:	e3a02e15 	mov	r2, #336	; 0x150
    a604:	e1a01009 	mov	r1, r9
    a608:	e1a0000a 	mov	r0, sl
    a60c:	eb000873 	bl	c7e0 <assertion_failed>
    a610:	eaffffd1 	b	a55c <CTimer::PollKernelTimers()+0x98>
    a614:	ebfffde8 	bl	9dbc <EnterCritical>
    a618:	eaffffae 	b	a4d8 <CTimer::PollKernelTimers()+0x14>

0000a61c <CTimer::InterruptHandler()>:
    a61c:	e3a03a03 	mov	r3, #12288	; 0x3000
    a620:	e3433f00 	movt	r3, #16128	; 0x3f00
    a624:	e92d4010 	push	{r4, lr}
    a628:	e1a04000 	mov	r4, r0
    a62c:	e5933000 	ldr	r3, [r3]
    a630:	e3130008 	tst	r3, #8
    a634:	0a000036 	beq	a714 <CTimer::InterruptHandler()+0xf8>
    a638:	e3a03a03 	mov	r3, #12288	; 0x3000
    a63c:	e3433f00 	movt	r3, #16128	; 0x3f00
    a640:	e3021710 	movw	r1, #10000	; 0x2710
    a644:	e5932018 	ldr	r2, [r3, #24]
    a648:	e0822001 	add	r2, r2, r1
    a64c:	e5832018 	str	r2, [r3, #24]
    a650:	e5930004 	ldr	r0, [r3, #4]
    a654:	e1520000 	cmp	r2, r0
    a658:	35932004 	ldrcc	r2, [r3, #4]
    a65c:	30821001 	addcc	r1, r2, r1
    a660:	e3a02008 	mov	r2, #8
    a664:	35831018 	strcc	r1, [r3, #24]
    a668:	e3a03a03 	mov	r3, #12288	; 0x3000
    a66c:	e3433f00 	movt	r3, #16128	; 0x3f00
    a670:	e5832000 	str	r2, [r3]
    a674:	e5942010 	ldr	r2, [r4, #16]
    a678:	e3520000 	cmp	r2, #0
    a67c:	1a000016 	bne	a6dc <CTimer::InterruptHandler()+0xc0>
    a680:	e5943004 	ldr	r3, [r4, #4]
    a684:	e308051f 	movw	r0, #34079	; 0x851f
    a688:	e34501eb 	movt	r0, #20971	; 0x51eb
    a68c:	e2833001 	add	r3, r3, #1
    a690:	e3a0c064 	mov	ip, #100	; 0x64
    a694:	e5843004 	str	r3, [r4, #4]
    a698:	e0810093 	umull	r0, r1, r3, r0
    a69c:	e1a012a1 	lsr	r1, r1, #5
    a6a0:	e063319c 	mls	r3, ip, r1, r3
    a6a4:	e3530000 	cmp	r3, #0
    a6a8:	1a000008 	bne	a6d0 <CTimer::InterruptHandler()+0xb4>
    a6ac:	e5943008 	ldr	r3, [r4, #8]
    a6b0:	e2833001 	add	r3, r3, #1
    a6b4:	e5843008 	str	r3, [r4, #8]
    a6b8:	e594300c 	ldr	r3, [r4, #12]
    a6bc:	e2833001 	add	r3, r3, #1
    a6c0:	e584300c 	str	r3, [r4, #12]
    a6c4:	e3520000 	cmp	r2, #0
    a6c8:	0a000000 	beq	a6d0 <CTimer::InterruptHandler()+0xb4>
    a6cc:	ebfffdc7 	bl	9df0 <LeaveCritical>
    a6d0:	e1a00004 	mov	r0, r4
    a6d4:	e8bd4010 	pop	{r4, lr}
    a6d8:	eaffff79 	b	a4c4 <CTimer::PollKernelTimers()>
    a6dc:	ebfffdb6 	bl	9dbc <EnterCritical>
    a6e0:	e5943004 	ldr	r3, [r4, #4]
    a6e4:	e308051f 	movw	r0, #34079	; 0x851f
    a6e8:	e34501eb 	movt	r0, #20971	; 0x51eb
    a6ec:	e2833001 	add	r3, r3, #1
    a6f0:	e3a0c064 	mov	ip, #100	; 0x64
    a6f4:	e5843004 	str	r3, [r4, #4]
    a6f8:	e5942010 	ldr	r2, [r4, #16]
    a6fc:	e0810093 	umull	r0, r1, r3, r0
    a700:	e1a012a1 	lsr	r1, r1, #5
    a704:	e063319c 	mls	r3, ip, r1, r3
    a708:	e3530000 	cmp	r3, #0
    a70c:	1affffec 	bne	a6c4 <CTimer::InterruptHandler()+0xa8>
    a710:	eaffffe5 	b	a6ac <CTimer::InterruptHandler()+0x90>
    a714:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    a718:	e3401000 	movt	r1, #0
    a71c:	e30f09c8 	movw	r0, #63944	; 0xf9c8
    a720:	e3400000 	movt	r0, #0
    a724:	e3002171 	movw	r2, #369	; 0x171
    a728:	eb00082c 	bl	c7e0 <assertion_failed>
    a72c:	eaffffc1 	b	a638 <CTimer::InterruptHandler()+0x1c>

0000a730 <CTimer::InterruptHandler(void*)>:
    a730:	e92d4010 	push	{r4, lr}
    a734:	e2504000 	subs	r4, r0, #0
    a738:	0a000002 	beq	a748 <CTimer::InterruptHandler(void*)+0x18>
    a73c:	e1a00004 	mov	r0, r4
    a740:	e8bd4010 	pop	{r4, lr}
    a744:	eaffffb4 	b	a61c <CTimer::InterruptHandler()>
    a748:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    a74c:	e3401000 	movt	r1, #0
    a750:	e30f0410 	movw	r0, #62480	; 0xf410
    a754:	e3400000 	movt	r0, #0
    a758:	e3002193 	movw	r2, #403	; 0x193
    a75c:	eb00081f 	bl	c7e0 <assertion_failed>
    a760:	e1a00004 	mov	r0, r4
    a764:	e8bd4010 	pop	{r4, lr}
    a768:	eaffffab 	b	a61c <CTimer::InterruptHandler()>

0000a76c <CTimer::TuneMsDelay()>:
    a76c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a770:	e1a06000 	mov	r6, r0
    a774:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a778:	e24dd00c 	sub	sp, sp, #12
    a77c:	e3025710 	movw	r5, #10000	; 0x2710
    a780:	e5963020 	ldr	r3, [r6, #32]
    a784:	e308451f 	movw	r4, #34079	; 0x851f
    a788:	e34541eb 	movt	r4, #20971	; 0x51eb
    a78c:	e5967004 	ldr	r7, [r6, #4]
    a790:	e0000390 	mul	r0, r0, r3
    a794:	eb000ddd 	bl	df10 <DelayLoop>
    a798:	e5962004 	ldr	r2, [r6, #4]
    a79c:	e5963020 	ldr	r3, [r6, #32]
    a7a0:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    a7a4:	e3411062 	movt	r1, #4194	; 0x1062
    a7a8:	e0422007 	sub	r2, r2, r7
    a7ac:	e735f215 	udiv	r5, r5, r2
    a7b0:	e0030593 	mul	r3, r3, r5
    a7b4:	e0832394 	umull	r2, r3, r4, r3
    a7b8:	e1a032a3 	lsr	r3, r3, #5
    a7bc:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    a7c0:	e5863020 	str	r3, [r6, #32]
    a7c4:	e0832291 	umull	r2, r3, r1, r2
    a7c8:	e1a03323 	lsr	r3, r3, #6
    a7cc:	e5863024 	str	r3, [r6, #36]	; 0x24
    a7d0:	eb000981 	bl	cddc <CLogger::Get()>
    a7d4:	e0832495 	umull	r2, r3, r5, r4
    a7d8:	e3a0c064 	mov	ip, #100	; 0x64
    a7dc:	e0841594 	umull	r1, r4, r4, r5
    a7e0:	e1a012a3 	lsr	r1, r3, #5
    a7e4:	e3a02003 	mov	r2, #3
    a7e8:	e1a042a4 	lsr	r4, r4, #5
    a7ec:	e30f39ec 	movw	r3, #63980	; 0xf9ec
    a7f0:	e3403000 	movt	r3, #0
    a7f4:	e065519c 	mls	r5, ip, r1, r5
    a7f8:	e58d4000 	str	r4, [sp]
    a7fc:	e59f100c 	ldr	r1, [pc, #12]	; a810 <CTimer::TuneMsDelay()+0xa4>
    a800:	e58d5004 	str	r5, [sp, #4]
    a804:	eb000a51 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a808:	e28dd00c 	add	sp, sp, #12
    a80c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a810:	0000f8e0 	.word	0x0000f8e0

0000a814 <CTimer::Initialize()>:
    a814:	e92d4010 	push	{r4, lr}
    a818:	e1a04000 	mov	r4, r0
    a81c:	e5900000 	ldr	r0, [r0]
    a820:	e3500000 	cmp	r0, #0
    a824:	0a000011 	beq	a870 <CTimer::Initialize()+0x5c>
    a828:	e1a03004 	mov	r3, r4
    a82c:	e3a01003 	mov	r1, #3
    a830:	e30a2730 	movw	r2, #42800	; 0xa730
    a834:	e3402000 	movt	r2, #0
    a838:	eb000ec3 	bl	e34c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    a83c:	e3a02a03 	mov	r2, #12288	; 0x3000
    a840:	e3432f00 	movt	r2, #16128	; 0x3f00
    a844:	e3a03df2 	mov	r3, #15488	; 0x3c80
    a848:	e34f3e36 	movt	r3, #65078	; 0xfe36
    a84c:	e1a00004 	mov	r0, r4
    a850:	e5823004 	str	r3, [r2, #4]
    a854:	e5923004 	ldr	r3, [r2, #4]
    a858:	e2833c27 	add	r3, r3, #9984	; 0x2700
    a85c:	e2833010 	add	r3, r3, #16
    a860:	e5823018 	str	r3, [r2, #24]
    a864:	ebffffc0 	bl	a76c <CTimer::TuneMsDelay()>
    a868:	e3a00001 	mov	r0, #1
    a86c:	e8bd8010 	pop	{r4, pc}
    a870:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    a874:	e3401000 	movt	r1, #0
    a878:	e30f0904 	movw	r0, #63748	; 0xf904
    a87c:	e3400000 	movt	r0, #0
    a880:	e3a02057 	mov	r2, #87	; 0x57
    a884:	eb0007d5 	bl	c7e0 <assertion_failed>
    a888:	e5940000 	ldr	r0, [r4]
    a88c:	eaffffe5 	b	a828 <CTimer::Initialize()+0x14>

0000a890 <CTimer::SimpleMsDelay(unsigned int)>:
    a890:	e2503000 	subs	r3, r0, #0
    a894:	012fff1e 	bxeq	lr
    a898:	e3a00ffa 	mov	r0, #1000	; 0x3e8
    a89c:	e0000390 	mul	r0, r0, r3
    a8a0:	e3500000 	cmp	r0, #0
    a8a4:	012fff1e 	bxeq	lr
    a8a8:	e3a03a03 	mov	r3, #12288	; 0x3000
    a8ac:	e3433f00 	movt	r3, #16128	; 0x3f00
    a8b0:	e2800001 	add	r0, r0, #1
    a8b4:	e1a01003 	mov	r1, r3
    a8b8:	e5932004 	ldr	r2, [r3, #4]
    a8bc:	e5913004 	ldr	r3, [r1, #4]
    a8c0:	e0433002 	sub	r3, r3, r2
    a8c4:	e1500003 	cmp	r0, r3
    a8c8:	8afffffb 	bhi	a8bc <CTimer::SimpleMsDelay(unsigned int)+0x2c>
    a8cc:	e12fff1e 	bx	lr

0000a8d0 <CTimer::SimpleusDelay(unsigned int)>:
    a8d0:	e3500000 	cmp	r0, #0
    a8d4:	012fff1e 	bxeq	lr
    a8d8:	e3a03a03 	mov	r3, #12288	; 0x3000
    a8dc:	e3433f00 	movt	r3, #16128	; 0x3f00
    a8e0:	e2800001 	add	r0, r0, #1
    a8e4:	e1a01003 	mov	r1, r3
    a8e8:	e5932004 	ldr	r2, [r3, #4]
    a8ec:	e5913004 	ldr	r3, [r1, #4]
    a8f0:	e0433002 	sub	r3, r3, r2
    a8f4:	e1500003 	cmp	r0, r3
    a8f8:	8afffffb 	bhi	a8ec <CTimer::SimpleusDelay(unsigned int)+0x1c>
    a8fc:	e12fff1e 	bx	lr

0000a900 <CTimer::IsLeapYear(unsigned int)>:
    a900:	e308251f 	movw	r2, #34079	; 0x851f
    a904:	e34521eb 	movt	r2, #20971	; 0x51eb
    a908:	e3a01064 	mov	r1, #100	; 0x64
    a90c:	e083c092 	umull	ip, r3, r2, r0
    a910:	e1a032a3 	lsr	r3, r3, #5
    a914:	e0630391 	mls	r3, r1, r3, r0
    a918:	e3530000 	cmp	r3, #0
    a91c:	0a000003 	beq	a930 <CTimer::IsLeapYear(unsigned int)+0x30>
    a920:	e3100003 	tst	r0, #3
    a924:	03a00001 	moveq	r0, #1
    a928:	13a00000 	movne	r0, #0
    a92c:	e12fff1e 	bx	lr
    a930:	e0832290 	umull	r2, r3, r0, r2
    a934:	e3a02e19 	mov	r2, #400	; 0x190
    a938:	e1a033a3 	lsr	r3, r3, #7
    a93c:	e0600392 	mls	r0, r2, r3, r0
    a940:	e16f0f10 	clz	r0, r0
    a944:	e1a002a0 	lsr	r0, r0, #5
    a948:	e12fff1e 	bx	lr

0000a94c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    a94c:	e3500001 	cmp	r0, #1
    a950:	0a000003 	beq	a964 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    a954:	e30f38b0 	movw	r3, #63664	; 0xf8b0
    a958:	e3403000 	movt	r3, #0
    a95c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    a960:	e12fff1e 	bx	lr
    a964:	e308251f 	movw	r2, #34079	; 0x851f
    a968:	e34521eb 	movt	r2, #20971	; 0x51eb
    a96c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a970:	e3a0e064 	mov	lr, #100	; 0x64
    a974:	e0832291 	umull	r2, r3, r1, r2
    a978:	e1a0c2a3 	lsr	ip, r3, #5
    a97c:	e06c1c9e 	mls	ip, lr, ip, r1
    a980:	e35c0000 	cmp	ip, #0
    a984:	0a000008 	beq	a9ac <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x60>
    a988:	e3110003 	tst	r1, #3
    a98c:	03a01001 	moveq	r1, #1
    a990:	13a01000 	movne	r1, #0
    a994:	e3510000 	cmp	r1, #0
    a998:	13a0001d 	movne	r0, #29
    a99c:	030f38b0 	movweq	r3, #63664	; 0xf8b0
    a9a0:	03403000 	movteq	r3, #0
    a9a4:	07930100 	ldreq	r0, [r3, r0, lsl #2]
    a9a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a9ac:	e1a033a3 	lsr	r3, r3, #7
    a9b0:	e3a02e19 	mov	r2, #400	; 0x190
    a9b4:	e0611392 	mls	r1, r2, r3, r1
    a9b8:	e16f1f11 	clz	r1, r1
    a9bc:	e1a012a1 	lsr	r1, r1, #5
    a9c0:	eafffff3 	b	a994 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x48>

0000a9c4 <CTimer::Get()>:
    a9c4:	e92d4010 	push	{r4, lr}
    a9c8:	e3014b88 	movw	r4, #7048	; 0x1b88
    a9cc:	e3404001 	movt	r4, #1
    a9d0:	e5940000 	ldr	r0, [r4]
    a9d4:	e3500000 	cmp	r0, #0
    a9d8:	18bd8010 	popne	{r4, pc}
    a9dc:	e3a02f76 	mov	r2, #472	; 0x1d8
    a9e0:	e30f18e8 	movw	r1, #63720	; 0xf8e8
    a9e4:	e3401000 	movt	r1, #0
    a9e8:	e30f0300 	movw	r0, #62208	; 0xf300
    a9ec:	e3400000 	movt	r0, #0
    a9f0:	eb00077a 	bl	c7e0 <assertion_failed>
    a9f4:	e5940000 	ldr	r0, [r4]
    a9f8:	e8bd8010 	pop	{r4, pc}

0000a9fc <memset>:
    a9fc:	e3520000 	cmp	r2, #0
    aa00:	012fff1e 	bxeq	lr
    aa04:	e6af1071 	sxtb	r1, r1
    aa08:	e0802002 	add	r2, r0, r2
    aa0c:	e1a03000 	mov	r3, r0
    aa10:	e4c31001 	strb	r1, [r3], #1
    aa14:	e1530002 	cmp	r3, r2
    aa18:	1afffffc 	bne	aa10 <memset+0x14>
    aa1c:	e12fff1e 	bx	lr

0000aa20 <memcmp>:
    aa20:	e3520000 	cmp	r2, #0
    aa24:	0a00000e 	beq	aa64 <memcmp+0x44>
    aa28:	e5d0c000 	ldrb	ip, [r0]
    aa2c:	e5d13000 	ldrb	r3, [r1]
    aa30:	e15c0003 	cmp	ip, r3
    aa34:	ca00000c 	bgt	aa6c <memcmp+0x4c>
    aa38:	ba00000d 	blt	aa74 <memcmp+0x54>
    aa3c:	e0812002 	add	r2, r1, r2
    aa40:	e2811001 	add	r1, r1, #1
    aa44:	ea000004 	b	aa5c <memcmp+0x3c>
    aa48:	e5f0c001 	ldrb	ip, [r0, #1]!
    aa4c:	e4d13001 	ldrb	r3, [r1], #1
    aa50:	e15c0003 	cmp	ip, r3
    aa54:	ca000004 	bgt	aa6c <memcmp+0x4c>
    aa58:	ba000005 	blt	aa74 <memcmp+0x54>
    aa5c:	e1510002 	cmp	r1, r2
    aa60:	1afffff8 	bne	aa48 <memcmp+0x28>
    aa64:	e3a00000 	mov	r0, #0
    aa68:	e12fff1e 	bx	lr
    aa6c:	e3a00001 	mov	r0, #1
    aa70:	e12fff1e 	bx	lr
    aa74:	e3e00000 	mvn	r0, #0
    aa78:	e12fff1e 	bx	lr

0000aa7c <strlen>:
    aa7c:	e1d010d0 	ldrsb	r1, [r0]
    aa80:	e2803001 	add	r3, r0, #1
    aa84:	e3510000 	cmp	r1, #0
    aa88:	0a000003 	beq	aa9c <strlen+0x20>
    aa8c:	e0431000 	sub	r1, r3, r0
    aa90:	e0d320d1 	ldrsb	r2, [r3], #1
    aa94:	e3520000 	cmp	r2, #0
    aa98:	1afffffb 	bne	aa8c <strlen+0x10>
    aa9c:	e1a00001 	mov	r0, r1
    aaa0:	e12fff1e 	bx	lr

0000aaa4 <strcmp>:
    aaa4:	e1d030d0 	ldrsb	r3, [r0]
    aaa8:	e1d120d0 	ldrsb	r2, [r1]
    aaac:	e3530000 	cmp	r3, #0
    aab0:	1a000007 	bne	aad4 <strcmp+0x30>
    aab4:	ea000008 	b	aadc <strcmp+0x38>
    aab8:	e1530002 	cmp	r3, r2
    aabc:	ca00000b 	bgt	aaf0 <strcmp+0x4c>
    aac0:	ba00000c 	blt	aaf8 <strcmp+0x54>
    aac4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    aac8:	e3530000 	cmp	r3, #0
    aacc:	0a00000b 	beq	ab00 <strcmp+0x5c>
    aad0:	e1f120d1 	ldrsb	r2, [r1, #1]!
    aad4:	e3520000 	cmp	r2, #0
    aad8:	1afffff6 	bne	aab8 <strcmp+0x14>
    aadc:	e1530002 	cmp	r3, r2
    aae0:	ca000002 	bgt	aaf0 <strcmp+0x4c>
    aae4:	b3e00000 	mvnlt	r0, #0
    aae8:	a3a00000 	movge	r0, #0
    aaec:	e12fff1e 	bx	lr
    aaf0:	e3a00001 	mov	r0, #1
    aaf4:	e12fff1e 	bx	lr
    aaf8:	e3e00000 	mvn	r0, #0
    aafc:	e12fff1e 	bx	lr
    ab00:	e1d120d1 	ldrsb	r2, [r1, #1]
    ab04:	e1530002 	cmp	r3, r2
    ab08:	dafffff5 	ble	aae4 <strcmp+0x40>
    ab0c:	eafffff7 	b	aaf0 <strcmp+0x4c>

0000ab10 <strcpy>:
    ab10:	e1d130d0 	ldrsb	r3, [r1]
    ab14:	e1a02000 	mov	r2, r0
    ab18:	e3530000 	cmp	r3, #0
    ab1c:	0a000003 	beq	ab30 <strcpy+0x20>
    ab20:	e4c23001 	strb	r3, [r2], #1
    ab24:	e1f130d1 	ldrsb	r3, [r1, #1]!
    ab28:	e3530000 	cmp	r3, #0
    ab2c:	1afffffb 	bne	ab20 <strcpy+0x10>
    ab30:	e3a03000 	mov	r3, #0
    ab34:	e5c23000 	strb	r3, [r2]
    ab38:	e12fff1e 	bx	lr

0000ab3c <strncpy>:
    ab3c:	e3520000 	cmp	r2, #0
    ab40:	012fff1e 	bxeq	lr
    ab44:	e1d1c0d0 	ldrsb	ip, [r1]
    ab48:	e35c0000 	cmp	ip, #0
    ab4c:	0a000009 	beq	ab78 <strncpy+0x3c>
    ab50:	e0802002 	add	r2, r0, r2
    ab54:	e1a03000 	mov	r3, r0
    ab58:	ea000002 	b	ab68 <strncpy+0x2c>
    ab5c:	e1f1c0d1 	ldrsb	ip, [r1, #1]!
    ab60:	e35c0000 	cmp	ip, #0
    ab64:	0a000004 	beq	ab7c <strncpy+0x40>
    ab68:	e4c3c001 	strb	ip, [r3], #1
    ab6c:	e1530002 	cmp	r3, r2
    ab70:	1afffff9 	bne	ab5c <strncpy+0x20>
    ab74:	e12fff1e 	bx	lr
    ab78:	e1a03000 	mov	r3, r0
    ab7c:	e3a02000 	mov	r2, #0
    ab80:	e5c32000 	strb	r2, [r3]
    ab84:	e12fff1e 	bx	lr

0000ab88 <strcat>:
    ab88:	e1d030d0 	ldrsb	r3, [r0]
    ab8c:	e3530000 	cmp	r3, #0
    ab90:	e1a03000 	mov	r3, r0
    ab94:	0a000002 	beq	aba4 <strcat+0x1c>
    ab98:	e1f320d1 	ldrsb	r2, [r3, #1]!
    ab9c:	e3520000 	cmp	r2, #0
    aba0:	1afffffc 	bne	ab98 <strcat+0x10>
    aba4:	e1d120d0 	ldrsb	r2, [r1]
    aba8:	e3520000 	cmp	r2, #0
    abac:	0a000003 	beq	abc0 <strcat+0x38>
    abb0:	e4c32001 	strb	r2, [r3], #1
    abb4:	e1f120d1 	ldrsb	r2, [r1, #1]!
    abb8:	e3520000 	cmp	r2, #0
    abbc:	1afffffb 	bne	abb0 <strcat+0x28>
    abc0:	e3a02000 	mov	r2, #0
    abc4:	e5c32000 	strb	r2, [r3]
    abc8:	e12fff1e 	bx	lr

0000abcc <strchr>:
    abcc:	e1d020d0 	ldrsb	r2, [r0]
    abd0:	e3520000 	cmp	r2, #0
    abd4:	0a000009 	beq	ac00 <strchr+0x34>
    abd8:	e1510002 	cmp	r1, r2
    abdc:	1a000002 	bne	abec <strchr+0x20>
    abe0:	ea000008 	b	ac08 <strchr+0x3c>
    abe4:	e1530001 	cmp	r3, r1
    abe8:	012fff1e 	bxeq	lr
    abec:	e1f030d1 	ldrsb	r3, [r0, #1]!
    abf0:	e3530000 	cmp	r3, #0
    abf4:	1afffffa 	bne	abe4 <strchr+0x18>
    abf8:	e1a00003 	mov	r0, r3
    abfc:	e12fff1e 	bx	lr
    ac00:	e1a00002 	mov	r0, r2
    ac04:	e12fff1e 	bx	lr
    ac08:	e12fff1e 	bx	lr

0000ac0c <strtok_r>:
    ac0c:	e3500000 	cmp	r0, #0
    ac10:	0a00002c 	beq	acc8 <strtok_r+0xbc>
    ac14:	e92d4030 	push	{r4, r5, lr}
    ac18:	e1d0e0d0 	ldrsb	lr, [r0]
    ac1c:	e35e0000 	cmp	lr, #0
    ac20:	11d140d0 	ldrsbne	r4, [r1]
    ac24:	0a000024 	beq	acbc <strtok_r+0xb0>
    ac28:	e3540000 	cmp	r4, #0
    ac2c:	0a000008 	beq	ac54 <strtok_r+0x48>
    ac30:	e15e0004 	cmp	lr, r4
    ac34:	0a000019 	beq	aca0 <strtok_r+0x94>
    ac38:	e1a0c001 	mov	ip, r1
    ac3c:	ea000001 	b	ac48 <strtok_r+0x3c>
    ac40:	e15e0003 	cmp	lr, r3
    ac44:	0a000015 	beq	aca0 <strtok_r+0x94>
    ac48:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    ac4c:	e3530000 	cmp	r3, #0
    ac50:	1afffffa 	bne	ac40 <strtok_r+0x34>
    ac54:	e35e0000 	cmp	lr, #0
    ac58:	0a000017 	beq	acbc <strtok_r+0xb0>
    ac5c:	e1a05000 	mov	r5, r0
    ac60:	e3540000 	cmp	r4, #0
    ac64:	0a000008 	beq	ac8c <strtok_r+0x80>
    ac68:	e15e0004 	cmp	lr, r4
    ac6c:	0a00000d 	beq	aca8 <strtok_r+0x9c>
    ac70:	e1a0c001 	mov	ip, r1
    ac74:	ea000001 	b	ac80 <strtok_r+0x74>
    ac78:	e15e0003 	cmp	lr, r3
    ac7c:	0a000009 	beq	aca8 <strtok_r+0x9c>
    ac80:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    ac84:	e3530000 	cmp	r3, #0
    ac88:	1afffffa 	bne	ac78 <strtok_r+0x6c>
    ac8c:	e1f5e0d1 	ldrsb	lr, [r5, #1]!
    ac90:	e35e0000 	cmp	lr, #0
    ac94:	1afffff1 	bne	ac60 <strtok_r+0x54>
    ac98:	e5825000 	str	r5, [r2]
    ac9c:	e8bd8030 	pop	{r4, r5, pc}
    aca0:	e1f0e0d1 	ldrsb	lr, [r0, #1]!
    aca4:	eaffffdf 	b	ac28 <strtok_r+0x1c>
    aca8:	e3a03000 	mov	r3, #0
    acac:	e2855001 	add	r5, r5, #1
    acb0:	e5453001 	strb	r3, [r5, #-1]
    acb4:	e5825000 	str	r5, [r2]
    acb8:	e8bd8030 	pop	{r4, r5, pc}
    acbc:	e3a00000 	mov	r0, #0
    acc0:	e5820000 	str	r0, [r2]
    acc4:	e8bd8030 	pop	{r4, r5, pc}
    acc8:	e5920000 	ldr	r0, [r2]
    accc:	e3500000 	cmp	r0, #0
    acd0:	1affffcf 	bne	ac14 <strtok_r+0x8>
    acd4:	e12fff1e 	bx	lr

0000acd8 <strtoul>:
    acd8:	e3510000 	cmp	r1, #0
    acdc:	e92d4070 	push	{r4, r5, r6, lr}
    ace0:	e2425002 	sub	r5, r2, #2
    ace4:	e3c2e010 	bic	lr, r2, #16
    ace8:	15810000 	strne	r0, [r1]
    acec:	e3520000 	cmp	r2, #0
    acf0:	13550022 	cmpne	r5, #34	; 0x22
    acf4:	83a05001 	movhi	r5, #1
    acf8:	93a05000 	movls	r5, #0
    acfc:	8a000036 	bhi	addc <strtoul+0x104>
    ad00:	e1d0c0d0 	ldrsb	ip, [r0]
    ad04:	e1a04000 	mov	r4, r0
    ad08:	e2800001 	add	r0, r0, #1
    ad0c:	e35c0020 	cmp	ip, #32
    ad10:	e24c3009 	sub	r3, ip, #9
    ad14:	e6ef3073 	uxtb	r3, r3
    ad18:	0afffff8 	beq	ad00 <strtoul+0x28>
    ad1c:	e3530004 	cmp	r3, #4
    ad20:	9afffff6 	bls	ad00 <strtoul+0x28>
    ad24:	e35c002b 	cmp	ip, #43	; 0x2b
    ad28:	0a00002d 	beq	ade4 <strtoul+0x10c>
    ad2c:	e35c002d 	cmp	ip, #45	; 0x2d
    ad30:	03a06001 	moveq	r6, #1
    ad34:	13a06000 	movne	r6, #0
    ad38:	01d4c0d1 	ldrsbeq	ip, [r4, #1]
    ad3c:	01a04000 	moveq	r4, r0
    ad40:	e35c0030 	cmp	ip, #48	; 0x30
    ad44:	0a00002b 	beq	adf8 <strtoul+0x120>
    ad48:	e3520000 	cmp	r2, #0
    ad4c:	03a0200a 	moveq	r2, #10
    ad50:	e35c002f 	cmp	ip, #47	; 0x2f
    ad54:	e1a0300c 	mov	r3, ip
    ad58:	da00001c 	ble	add0 <strtoul+0xf8>
    ad5c:	e3a05001 	mov	r5, #1
    ad60:	e3a0e000 	mov	lr, #0
    ad64:	ea000007 	b	ad88 <strtoul+0xb0>
    ad68:	e150000e 	cmp	r0, lr
    ad6c:	e3a05000 	mov	r5, #0
    ad70:	e1a0e000 	mov	lr, r0
    ad74:	3a000028 	bcc	ae1c <strtoul+0x144>
    ad78:	e1f430d1 	ldrsb	r3, [r4, #1]!
    ad7c:	e353002f 	cmp	r3, #47	; 0x2f
    ad80:	e1a0c003 	mov	ip, r3
    ad84:	da000029 	ble	ae30 <strtoul+0x158>
    ad88:	e24cc061 	sub	ip, ip, #97	; 0x61
    ad8c:	e35c0019 	cmp	ip, #25
    ad90:	92433020 	subls	r3, r3, #32
    ad94:	e3530040 	cmp	r3, #64	; 0x40
    ad98:	c2433007 	subgt	r3, r3, #7
    ad9c:	e2433030 	sub	r3, r3, #48	; 0x30
    ada0:	e1520003 	cmp	r2, r3
    ada4:	e020329e 	mla	r0, lr, r2, r3
    ada8:	caffffee 	bgt	ad68 <strtoul+0x90>
    adac:	e2255001 	eor	r5, r5, #1
    adb0:	e1a0000e 	mov	r0, lr
    adb4:	e3510000 	cmp	r1, #0
    adb8:	e0055006 	and	r5, r5, r6
    adbc:	0a000000 	beq	adc4 <strtoul+0xec>
    adc0:	e5814000 	str	r4, [r1]
    adc4:	e3550000 	cmp	r5, #0
    adc8:	12600000 	rsbne	r0, r0, #0
    adcc:	e8bd8070 	pop	{r4, r5, r6, pc}
    add0:	e3510000 	cmp	r1, #0
    add4:	13a00000 	movne	r0, #0
    add8:	1afffff8 	bne	adc0 <strtoul+0xe8>
    addc:	e3a00000 	mov	r0, #0
    ade0:	e8bd8070 	pop	{r4, r5, r6, pc}
    ade4:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    ade8:	e3a06000 	mov	r6, #0
    adec:	e1a04000 	mov	r4, r0
    adf0:	e35c0030 	cmp	ip, #48	; 0x30
    adf4:	1affffd3 	bne	ad48 <strtoul+0x70>
    adf8:	e1d4c0d1 	ldrsb	ip, [r4, #1]
    adfc:	e2840001 	add	r0, r4, #1
    ae00:	e3cc3020 	bic	r3, ip, #32
    ae04:	e3530058 	cmp	r3, #88	; 0x58
    ae08:	0a00000a 	beq	ae38 <strtoul+0x160>
    ae0c:	e3520000 	cmp	r2, #0
    ae10:	e1a04000 	mov	r4, r0
    ae14:	03a02008 	moveq	r2, #8
    ae18:	eaffffcc 	b	ad50 <strtoul+0x78>
    ae1c:	e1510005 	cmp	r1, r5
    ae20:	0a00000a 	beq	ae50 <strtoul+0x178>
    ae24:	e5814000 	str	r4, [r1]
    ae28:	e3e00000 	mvn	r0, #0
    ae2c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae30:	e3a05001 	mov	r5, #1
    ae34:	eaffffde 	b	adb4 <strtoul+0xdc>
    ae38:	e35e0000 	cmp	lr, #0
    ae3c:	1affffe6 	bne	addc <strtoul+0x104>
    ae40:	e1d4c0d2 	ldrsb	ip, [r4, #2]
    ae44:	e3a02010 	mov	r2, #16
    ae48:	e2844002 	add	r4, r4, #2
    ae4c:	eaffffbf 	b	ad50 <strtoul+0x78>
    ae50:	e3e00000 	mvn	r0, #0
    ae54:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ae58 <char2int>:
    ae58:	e12fff1e 	bx	lr

0000ae5c <memcpy>:
    ae5c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    ae60:	e352007f 	cmp	r2, #127	; 0x7f
    ae64:	9a00000b 	bls	ae98 <memcpy+0x3c>
    ae68:	e3110003 	tst	r1, #3
    ae6c:	1a000009 	bne	ae98 <memcpy+0x3c>
    ae70:	e3100003 	tst	r0, #3
    ae74:	1a000007 	bne	ae98 <memcpy+0x3c>
    ae78:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    ae7c:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ae80:	e2422020 	sub	r2, r2, #32
    ae84:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    ae88:	f5d1f040 	pld	[r1, #64]	; 0x40
    ae8c:	e352001f 	cmp	r2, #31
    ae90:	8afffff9 	bhi	ae7c <memcpy+0x20>
    ae94:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    ae98:	e3520000 	cmp	r2, #0
    ae9c:	0a000003 	beq	aeb0 <memcpy+0x54>
    aea0:	e4d13001 	ldrb	r3, [r1], #1
    aea4:	e2522001 	subs	r2, r2, #1
    aea8:	e4c03001 	strb	r3, [r0], #1
    aeac:	1afffffb 	bne	aea0 <memcpy+0x44>
    aeb0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    aeb4:	e12fff1e 	bx	lr

0000aeb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    aeb8:	e3a01000 	mov	r1, #0
    aebc:	e3a0c00a 	mov	ip, #10
    aec0:	ea000009 	b	aeec <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x34>
    aec4:	e3530009 	cmp	r3, #9
    aec8:	8a00000f 	bhi	af0c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    aecc:	e3720001 	cmn	r2, #1
    aed0:	13a03000 	movne	r3, #0
    aed4:	03a03001 	moveq	r3, #1
    aed8:	e1510002 	cmp	r1, r2
    aedc:	83833001 	orrhi	r3, r3, #1
    aee0:	e1a01002 	mov	r1, r2
    aee4:	e3530000 	cmp	r3, #0
    aee8:	1a000007 	bne	af0c <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    aeec:	e0d020d1 	ldrsb	r2, [r0], #1
    aef0:	e3520000 	cmp	r2, #0
    aef4:	e2423030 	sub	r3, r2, #48	; 0x30
    aef8:	e022319c 	mla	r2, ip, r1, r3
    aefc:	e6ef3073 	uxtb	r3, r3
    af00:	1affffef 	bne	aec4 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0xc>
    af04:	e1a00001 	mov	r0, r1
    af08:	e12fff1e 	bx	lr
    af0c:	e3e01000 	mvn	r1, #0
    af10:	e1a00001 	mov	r0, r1
    af14:	e12fff1e 	bx	lr

0000af18 <CKernelOptions::~CKernelOptions()>:
    af18:	e3013b8c 	movw	r3, #7052	; 0x1b8c
    af1c:	e3403001 	movt	r3, #1
    af20:	e3a02000 	mov	r2, #0
    af24:	e5832000 	str	r2, [r3]
    af28:	e12fff1e 	bx	lr

0000af2c <CKernelOptions::GetWidth() const>:
    af2c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    af30:	e12fff1e 	bx	lr

0000af34 <CKernelOptions::GetHeight() const>:
    af34:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    af38:	e12fff1e 	bx	lr

0000af3c <CKernelOptions::GetLogDevice() const>:
    af3c:	e2800e81 	add	r0, r0, #2064	; 0x810
    af40:	e2800008 	add	r0, r0, #8
    af44:	e12fff1e 	bx	lr

0000af48 <CKernelOptions::GetLogLevel() const>:
    af48:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    af4c:	e12fff1e 	bx	lr

0000af50 <CKernelOptions::GetKeyMap() const>:
    af50:	e2800e83 	add	r0, r0, #2096	; 0x830
    af54:	e12fff1e 	bx	lr

0000af58 <CKernelOptions::GetUSBPowerDelay() const>:
    af58:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    af5c:	e12fff1e 	bx	lr

0000af60 <CKernelOptions::GetCPUSpeed() const>:
    af60:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    af64:	e12fff1e 	bx	lr

0000af68 <CKernelOptions::GetSoCMaxTemp() const>:
    af68:	e590083c 	ldr	r0, [r0, #2108]	; 0x83c
    af6c:	e12fff1e 	bx	lr

0000af70 <CKernelOptions::Get()>:
    af70:	e3013b8c 	movw	r3, #7052	; 0x1b8c
    af74:	e3403001 	movt	r3, #1
    af78:	e5930000 	ldr	r0, [r3]
    af7c:	e12fff1e 	bx	lr

0000af80 <CKernelOptions::GetToken()>:
    af80:	e590380c 	ldr	r3, [r0, #2060]	; 0x80c
    af84:	e1d320d0 	ldrsb	r2, [r3]
    af88:	e3520000 	cmp	r2, #0
    af8c:	1a000005 	bne	afa8 <CKernelOptions::GetToken()+0x28>
    af90:	ea000016 	b	aff0 <CKernelOptions::GetToken()+0x70>
    af94:	e2833001 	add	r3, r3, #1
    af98:	e580380c 	str	r3, [r0, #2060]	; 0x80c
    af9c:	e1d320d0 	ldrsb	r2, [r3]
    afa0:	e3520000 	cmp	r2, #0
    afa4:	0a000011 	beq	aff0 <CKernelOptions::GetToken()+0x70>
    afa8:	e3520020 	cmp	r2, #32
    afac:	0afffff8 	beq	af94 <CKernelOptions::GetToken()+0x14>
    afb0:	e1a02003 	mov	r2, r3
    afb4:	ea000000 	b	afbc <CKernelOptions::GetToken()+0x3c>
    afb8:	e1a02001 	mov	r2, r1
    afbc:	e2821001 	add	r1, r2, #1
    afc0:	e580180c 	str	r1, [r0, #2060]	; 0x80c
    afc4:	e1d2c0d1 	ldrsb	ip, [r2, #1]
    afc8:	e35c0000 	cmp	ip, #0
    afcc:	0a000008 	beq	aff4 <CKernelOptions::GetToken()+0x74>
    afd0:	e35c0020 	cmp	ip, #32
    afd4:	1afffff7 	bne	afb8 <CKernelOptions::GetToken()+0x38>
    afd8:	e2822002 	add	r2, r2, #2
    afdc:	e3a0c000 	mov	ip, #0
    afe0:	e580280c 	str	r2, [r0, #2060]	; 0x80c
    afe4:	e1a00003 	mov	r0, r3
    afe8:	e5c1c000 	strb	ip, [r1]
    afec:	e12fff1e 	bx	lr
    aff0:	e3a03000 	mov	r3, #0
    aff4:	e1a00003 	mov	r0, r3
    aff8:	e12fff1e 	bx	lr

0000affc <CKernelOptions::CKernelOptions()>:
    affc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b000:	e1a05000 	mov	r5, r0
    b004:	e2807e81 	add	r7, r0, #2064	; 0x810
    b008:	e3a04000 	mov	r4, #0
    b00c:	e3a02004 	mov	r2, #4
    b010:	e3a0303c 	mov	r3, #60	; 0x3c
    b014:	e2877008 	add	r7, r7, #8
    b018:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    b01c:	e24dd01c 	sub	sp, sp, #28
    b020:	e585383c 	str	r3, [r5, #2108]	; 0x83c
    b024:	e1a00007 	mov	r0, r7
    b028:	e30f1a34 	movw	r1, #64052	; 0xfa34
    b02c:	e3401000 	movt	r1, #0
    b030:	e5854810 	str	r4, [r5, #2064]	; 0x810
    b034:	e2859e83 	add	r9, r5, #2096	; 0x830
    b038:	e5854814 	str	r4, [r5, #2068]	; 0x814
    b03c:	e5854834 	str	r4, [r5, #2100]	; 0x834
    b040:	e5c54838 	strb	r4, [r5, #2104]	; 0x838
    b044:	ebfffeb1 	bl	ab10 <strcpy>
    b048:	e1a00009 	mov	r0, r9
    b04c:	e30f1a3c 	movw	r1, #64060	; 0xfa3c
    b050:	e3401000 	movt	r1, #0
    b054:	ebfffead 	bl	ab10 <strcpy>
    b058:	e3013b8c 	movw	r3, #7052	; 0x1b8c
    b05c:	e3403001 	movt	r3, #1
    b060:	e28d0010 	add	r0, sp, #16
    b064:	e5835000 	str	r5, [r3]
    b068:	ebfffa40 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    b06c:	e58d4000 	str	r4, [sp]
    b070:	e1a02005 	mov	r2, r5
    b074:	e28d0010 	add	r0, sp, #16
    b078:	e3a01001 	mov	r1, #1
    b07c:	e3401005 	movt	r1, #5
    b080:	e300380c 	movw	r3, #2060	; 0x80c
    b084:	ebfffa81 	bl	9a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b088:	e1500004 	cmp	r0, r4
    b08c:	0a000040 	beq	b194 <CKernelOptions::CKernelOptions()+0x198>
    b090:	e5953008 	ldr	r3, [r5, #8]
    b094:	e3530b02 	cmp	r3, #2048	; 0x800
    b098:	2a00003d 	bcs	b194 <CKernelOptions::CKernelOptions()+0x198>
    b09c:	e0853003 	add	r3, r5, r3
    b0a0:	e285200c 	add	r2, r5, #12
    b0a4:	e30f6a90 	movw	r6, #64144	; 0xfa90
    b0a8:	e3406000 	movt	r6, #0
    b0ac:	e30f8a40 	movw	r8, #64064	; 0xfa40
    b0b0:	e3408000 	movt	r8, #0
    b0b4:	e30faa48 	movw	sl, #64072	; 0xfa48
    b0b8:	e340a000 	movt	sl, #0
    b0bc:	e5c3400c 	strb	r4, [r3, #12]
    b0c0:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    b0c4:	e1a00005 	mov	r0, r5
    b0c8:	ebffffac 	bl	af80 <CKernelOptions::GetToken()>
    b0cc:	e250b000 	subs	fp, r0, #0
    b0d0:	0a00002f 	beq	b194 <CKernelOptions::CKernelOptions()+0x198>
    b0d4:	e1db30d0 	ldrsb	r3, [fp]
    b0d8:	e3530000 	cmp	r3, #0
    b0dc:	0a000008 	beq	b104 <CKernelOptions::CKernelOptions()+0x108>
    b0e0:	e353003d 	cmp	r3, #61	; 0x3d
    b0e4:	e1a0400b 	mov	r4, fp
    b0e8:	1a000002 	bne	b0f8 <CKernelOptions::CKernelOptions()+0xfc>
    b0ec:	ea00002d 	b	b1a8 <CKernelOptions::CKernelOptions()+0x1ac>
    b0f0:	e353003d 	cmp	r3, #61	; 0x3d
    b0f4:	0a00002b 	beq	b1a8 <CKernelOptions::CKernelOptions()+0x1ac>
    b0f8:	e1f430d1 	ldrsb	r3, [r4, #1]!
    b0fc:	e3530000 	cmp	r3, #0
    b100:	1afffffa 	bne	b0f0 <CKernelOptions::CKernelOptions()+0xf4>
    b104:	e1a01006 	mov	r1, r6
    b108:	e1a0000b 	mov	r0, fp
    b10c:	ebfffe64 	bl	aaa4 <strcmp>
    b110:	e3500000 	cmp	r0, #0
    b114:	0affffea 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b118:	e1a01008 	mov	r1, r8
    b11c:	e1a0000b 	mov	r0, fp
    b120:	ebfffe5f 	bl	aaa4 <strcmp>
    b124:	e3500000 	cmp	r0, #0
    b128:	13a03000 	movne	r3, #0
    b12c:	0affffe4 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b130:	e1a0100a 	mov	r1, sl
    b134:	e1a0000b 	mov	r0, fp
    b138:	e58d300c 	str	r3, [sp, #12]
    b13c:	ebfffe58 	bl	aaa4 <strcmp>
    b140:	e2504000 	subs	r4, r0, #0
    b144:	e59d300c 	ldr	r3, [sp, #12]
    b148:	0a00002a 	beq	b1f8 <CKernelOptions::CKernelOptions()+0x1fc>
    b14c:	e30f1a50 	movw	r1, #64080	; 0xfa50
    b150:	e3401000 	movt	r1, #0
    b154:	e1a0000b 	mov	r0, fp
    b158:	e58d300c 	str	r3, [sp, #12]
    b15c:	ebfffe50 	bl	aaa4 <strcmp>
    b160:	e3500000 	cmp	r0, #0
    b164:	e59d300c 	ldr	r3, [sp, #12]
    b168:	1a000028 	bne	b210 <CKernelOptions::CKernelOptions()+0x214>
    b16c:	e3530000 	cmp	r3, #0
    b170:	0affffd3 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b174:	e1d320d0 	ldrsb	r2, [r3]
    b178:	e3520000 	cmp	r2, #0
    b17c:	0affffd0 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b180:	e1a00003 	mov	r0, r3
    b184:	ebffff4b 	bl	aeb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b188:	e3500004 	cmp	r0, #4
    b18c:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    b190:	eaffffcb 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b194:	e28d0010 	add	r0, sp, #16
    b198:	ebfff9fa 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    b19c:	e1a00005 	mov	r0, r5
    b1a0:	e28dd01c 	add	sp, sp, #28
    b1a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1a8:	e3a03000 	mov	r3, #0
    b1ac:	e1a01006 	mov	r1, r6
    b1b0:	e5c43000 	strb	r3, [r4]
    b1b4:	e1a0000b 	mov	r0, fp
    b1b8:	ebfffe39 	bl	aaa4 <strcmp>
    b1bc:	e3500000 	cmp	r0, #0
    b1c0:	e2843001 	add	r3, r4, #1
    b1c4:	1a000058 	bne	b32c <CKernelOptions::CKernelOptions()+0x330>
    b1c8:	e3530000 	cmp	r3, #0
    b1cc:	0affffbc 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b1d0:	e1d420d1 	ldrsb	r2, [r4, #1]
    b1d4:	e3520000 	cmp	r2, #0
    b1d8:	0affffb9 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b1dc:	e1a00003 	mov	r0, r3
    b1e0:	ebffff34 	bl	aeb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b1e4:	e300353c 	movw	r3, #1340	; 0x53c
    b1e8:	e2402d0a 	sub	r2, r0, #640	; 0x280
    b1ec:	e1520003 	cmp	r2, r3
    b1f0:	95850810 	strls	r0, [r5, #2064]	; 0x810
    b1f4:	eaffffb2 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b1f8:	e1a01003 	mov	r1, r3
    b1fc:	e3a02013 	mov	r2, #19
    b200:	e1a00007 	mov	r0, r7
    b204:	ebfffe4c 	bl	ab3c <strncpy>
    b208:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    b20c:	eaffffac 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b210:	e30f1a5c 	movw	r1, #64092	; 0xfa5c
    b214:	e3401000 	movt	r1, #0
    b218:	e1a0000b 	mov	r0, fp
    b21c:	e58d300c 	str	r3, [sp, #12]
    b220:	ebfffe1f 	bl	aaa4 <strcmp>
    b224:	e2504000 	subs	r4, r0, #0
    b228:	e59d300c 	ldr	r3, [sp, #12]
    b22c:	1a000005 	bne	b248 <CKernelOptions::CKernelOptions()+0x24c>
    b230:	e1a01003 	mov	r1, r3
    b234:	e3a02002 	mov	r2, #2
    b238:	e1a00009 	mov	r0, r9
    b23c:	ebfffe3e 	bl	ab3c <strncpy>
    b240:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    b244:	eaffff9e 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b248:	e30f1a64 	movw	r1, #64100	; 0xfa64
    b24c:	e3401000 	movt	r1, #0
    b250:	e1a0000b 	mov	r0, fp
    b254:	e58d300c 	str	r3, [sp, #12]
    b258:	ebfffe11 	bl	aaa4 <strcmp>
    b25c:	e3500000 	cmp	r0, #0
    b260:	e59d300c 	ldr	r3, [sp, #12]
    b264:	1a00000b 	bne	b298 <CKernelOptions::CKernelOptions()+0x29c>
    b268:	e3530000 	cmp	r3, #0
    b26c:	0affff94 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b270:	e1d320d0 	ldrsb	r2, [r3]
    b274:	e3520000 	cmp	r2, #0
    b278:	0affff91 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b27c:	e1a00003 	mov	r0, r3
    b280:	ebffff0c 	bl	aeb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b284:	e3013e78 	movw	r3, #7800	; 0x1e78
    b288:	e24020c8 	sub	r2, r0, #200	; 0xc8
    b28c:	e1520003 	cmp	r2, r3
    b290:	95850834 	strls	r0, [r5, #2100]	; 0x834
    b294:	eaffff8a 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b298:	e30f1a74 	movw	r1, #64116	; 0xfa74
    b29c:	e3401000 	movt	r1, #0
    b2a0:	e1a0000b 	mov	r0, fp
    b2a4:	e58d300c 	str	r3, [sp, #12]
    b2a8:	ebfffdfd 	bl	aaa4 <strcmp>
    b2ac:	e3500000 	cmp	r0, #0
    b2b0:	e59d300c 	ldr	r3, [sp, #12]
    b2b4:	1a000007 	bne	b2d8 <CKernelOptions::CKernelOptions()+0x2dc>
    b2b8:	e1a00003 	mov	r0, r3
    b2bc:	e30f1a7c 	movw	r1, #64124	; 0xfa7c
    b2c0:	e3401000 	movt	r1, #0
    b2c4:	ebfffdf6 	bl	aaa4 <strcmp>
    b2c8:	e3500000 	cmp	r0, #0
    b2cc:	03a03001 	moveq	r3, #1
    b2d0:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    b2d4:	eaffff7a 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b2d8:	e1a0000b 	mov	r0, fp
    b2dc:	e30f1a84 	movw	r1, #64132	; 0xfa84
    b2e0:	e3401000 	movt	r1, #0
    b2e4:	e58d300c 	str	r3, [sp, #12]
    b2e8:	ebfffded 	bl	aaa4 <strcmp>
    b2ec:	e59d300c 	ldr	r3, [sp, #12]
    b2f0:	e2902000 	adds	r2, r0, #0
    b2f4:	13a02001 	movne	r2, #1
    b2f8:	e3530000 	cmp	r3, #0
    b2fc:	03822001 	orreq	r2, r2, #1
    b300:	e3520000 	cmp	r2, #0
    b304:	1affff6e 	bne	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b308:	e1d320d0 	ldrsb	r2, [r3]
    b30c:	e3520000 	cmp	r2, #0
    b310:	0affff6b 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b314:	e1a00003 	mov	r0, r3
    b318:	ebfffee6 	bl	aeb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b31c:	e2403028 	sub	r3, r0, #40	; 0x28
    b320:	e3530026 	cmp	r3, #38	; 0x26
    b324:	9585083c 	strls	r0, [r5, #2108]	; 0x83c
    b328:	eaffff65 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b32c:	e1a01008 	mov	r1, r8
    b330:	e1a0000b 	mov	r0, fp
    b334:	e58d300c 	str	r3, [sp, #12]
    b338:	ebfffdd9 	bl	aaa4 <strcmp>
    b33c:	e3500000 	cmp	r0, #0
    b340:	e59d300c 	ldr	r3, [sp, #12]
    b344:	1affff79 	bne	b130 <CKernelOptions::CKernelOptions()+0x134>
    b348:	e3530000 	cmp	r3, #0
    b34c:	0affff5c 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b350:	e1d420d1 	ldrsb	r2, [r4, #1]
    b354:	e3520000 	cmp	r2, #0
    b358:	0affff59 	beq	b0c4 <CKernelOptions::CKernelOptions()+0xc8>
    b35c:	e1a00003 	mov	r0, r3
    b360:	ebfffed4 	bl	aeb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    b364:	e2403e1e 	sub	r3, r0, #480	; 0x1e0
    b368:	e3530f96 	cmp	r3, #600	; 0x258
    b36c:	95850814 	strls	r0, [r5, #2068]	; 0x814
    b370:	eaffff53 	b	b0c4 <CKernelOptions::CKernelOptions()+0xc8>

0000b374 <CKernelOptions::GetOptionValue(char*)>:
    b374:	e1d030d0 	ldrsb	r3, [r0]
    b378:	e3530000 	cmp	r3, #0
    b37c:	1a000003 	bne	b390 <CKernelOptions::GetOptionValue(char*)+0x1c>
    b380:	ea000007 	b	b3a4 <CKernelOptions::GetOptionValue(char*)+0x30>
    b384:	e1f030d1 	ldrsb	r3, [r0, #1]!
    b388:	e3530000 	cmp	r3, #0
    b38c:	0a000004 	beq	b3a4 <CKernelOptions::GetOptionValue(char*)+0x30>
    b390:	e353003d 	cmp	r3, #61	; 0x3d
    b394:	1afffffa 	bne	b384 <CKernelOptions::GetOptionValue(char*)+0x10>
    b398:	e3a02000 	mov	r2, #0
    b39c:	e2803001 	add	r3, r0, #1
    b3a0:	e5c02000 	strb	r2, [r0]
    b3a4:	e1a00003 	mov	r0, r3
    b3a8:	e12fff1e 	bx	lr

0000b3ac <CKernelOptions::GetDecimal(char*)>:
    b3ac:	e2503000 	subs	r3, r0, #0
    b3b0:	0a000002 	beq	b3c0 <CKernelOptions::GetDecimal(char*)+0x14>
    b3b4:	e1d330d0 	ldrsb	r3, [r3]
    b3b8:	e3530000 	cmp	r3, #0
    b3bc:	1a000001 	bne	b3c8 <CKernelOptions::GetDecimal(char*)+0x1c>
    b3c0:	e3e00000 	mvn	r0, #0
    b3c4:	e12fff1e 	bx	lr
    b3c8:	eafffeba 	b	aeb8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>

0000b3cc <CPageTable::CPageTable()>:
    b3cc:	e92d4010 	push	{r4, lr}
    b3d0:	e1a04000 	mov	r4, r0
    b3d4:	e3a01000 	mov	r1, #0
    b3d8:	e3a029b2 	mov	r2, #2916352	; 0x2c8000
    b3dc:	e1a0c001 	mov	ip, r1
    b3e0:	e1a03002 	mov	r3, r2
    b3e4:	e3a0e002 	mov	lr, #2
    b3e8:	e3a00001 	mov	r0, #1
    b3ec:	e8840006 	stm	r4, {r1, r2}
    b3f0:	e5d32000 	ldrb	r2, [r3]
    b3f4:	e35c0b01 	cmp	ip, #1024	; 0x400
    b3f8:	e5d31002 	ldrb	r1, [r3, #2]
    b3fc:	e2833004 	add	r3, r3, #4
    b400:	e7c1201e 	bfi	r2, lr, #0, #2
    b404:	e3811001 	orr	r1, r1, #1
    b408:	e6ef2072 	uxtb	r2, r2
    b40c:	e20110f9 	and	r1, r1, #249	; 0xf9
    b410:	e3822004 	orr	r2, r2, #4
    b414:	e7c3119f 	bfc	r1, #3, #1
    b418:	e20220f7 	and	r2, r2, #247	; 0xf7
    b41c:	e5431002 	strb	r1, [r3, #-2]
    b420:	e7c4221f 	bfc	r2, #4, #1
    b424:	e5432004 	strb	r2, [r3, #-4]
    b428:	e15310b2 	ldrh	r1, [r3, #-2]
    b42c:	e15320b4 	ldrh	r2, [r3, #-4]
    b430:	e7cf121c 	bfi	r1, ip, #4, #12
    b434:	e28cc001 	add	ip, ip, #1
    b438:	e7c8229f 	bfc	r2, #5, #4
    b43c:	e14310b2 	strh	r1, [r3, #-2]
    b440:	e14320b4 	strh	r2, [r3, #-4]
    b444:	e1a02422 	lsr	r2, r2, #8
    b448:	e20220fd 	and	r2, r2, #253	; 0xfd
    b44c:	e7c32110 	bfi	r2, r0, #2, #2
    b450:	e202208f 	and	r2, r2, #143	; 0x8f
    b454:	e7c7239f 	bfc	r2, #7, #1
    b458:	e5432003 	strb	r2, [r3, #-3]
    b45c:	25532004 	ldrbcs	r2, [r3, #-4]
    b460:	23822010 	orrcs	r2, r2, #16
    b464:	25432004 	strbcs	r2, [r3, #-4]
    b468:	e35c0a01 	cmp	ip, #4096	; 0x1000
    b46c:	1affffdf 	bne	b3f0 <CPageTable::CPageTable()+0x24>
    b470:	ebfff519 	bl	88dc <CleanDataCache>
    b474:	e1a00004 	mov	r0, r4
    b478:	e8bd8010 	pop	{r4, pc}

0000b47c <CPageTable::CPageTable(unsigned int)>:
    b47c:	e3a03001 	mov	r3, #1
    b480:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b484:	e1a04000 	mov	r4, r0
    b488:	e5803000 	str	r3, [r0]
    b48c:	e1a05001 	mov	r5, r1
    b490:	ebfff8db 	bl	9804 <palloc>
    b494:	e3500000 	cmp	r0, #0
    b498:	e5840004 	str	r0, [r4, #4]
    b49c:	0a00003e 	beq	b59c <CPageTable::CPageTable(unsigned int)+0x120>
    b4a0:	e7eb3050 	ubfx	r3, r0, #0, #12
    b4a4:	e3530000 	cmp	r3, #0
    b4a8:	1a000033 	bne	b57c <CPageTable::CPageTable(unsigned int)+0x100>
    b4ac:	e3a02000 	mov	r2, #0
    b4b0:	e30fe078 	movw	lr, #61560	; 0xf078
    b4b4:	e340e000 	movt	lr, #0
    b4b8:	e1a08002 	mov	r8, r2
    b4bc:	e3a07002 	mov	r7, #2
    b4c0:	e3a06001 	mov	r6, #1
    b4c4:	ea000009 	b	b4f0 <CPageTable::CPageTable(unsigned int)+0x74>
    b4c8:	e6ef3071 	uxtb	r3, r1
    b4cc:	e5d01000 	ldrb	r1, [r0]
    b4d0:	e3833001 	orr	r3, r3, #1
    b4d4:	e7c31198 	bfi	r1, r8, #3, #1
    b4d8:	e5c03002 	strb	r3, [r0, #2]
    b4dc:	e5c01000 	strb	r1, [r0]
    b4e0:	e2822601 	add	r2, r2, #1048576	; 0x100000
    b4e4:	e2800004 	add	r0, r0, #4
    b4e8:	e3520101 	cmp	r2, #1073741824	; 0x40000000
    b4ec:	0a00001f 	beq	b570 <CPageTable::CPageTable(unsigned int)+0xf4>
    b4f0:	e5d03001 	ldrb	r3, [r0, #1]
    b4f4:	e7e31a52 	ubfx	r1, r2, #20, #4
    b4f8:	e152000e 	cmp	r2, lr
    b4fc:	e387c00c 	orr	ip, r7, #12
    b500:	e20330fc 	and	r3, r3, #252	; 0xfc
    b504:	e1a09c22 	lsr	r9, r2, #24
    b508:	e7c33116 	bfi	r3, r6, #2, #2
    b50c:	e1a01201 	lsl	r1, r1, #4
    b510:	e203308f 	and	r3, r3, #143	; 0x8f
    b514:	e5c01002 	strb	r1, [r0, #2]
    b518:	e7c7339f 	bfc	r3, #7, #1
    b51c:	e5c0c000 	strb	ip, [r0]
    b520:	e5c03001 	strb	r3, [r0, #1]
    b524:	e5c09003 	strb	r9, [r0, #3]
    b528:	3affffec 	bcc	b4e0 <CPageTable::CPageTable(unsigned int)+0x64>
    b52c:	e1520005 	cmp	r2, r5
    b530:	e6ef307c 	uxtb	r3, ip
    b534:	e3833010 	orr	r3, r3, #16
    b538:	e5c03000 	strb	r3, [r0]
    b53c:	2affffe1 	bcs	b4c8 <CPageTable::CPageTable(unsigned int)+0x4c>
    b540:	e3520501 	cmp	r2, #4194304	; 0x400000
    b544:	1affffe5 	bne	b4e0 <CPageTable::CPageTable(unsigned int)+0x64>
    b548:	e5d03000 	ldrb	r3, [r0]
    b54c:	e2800004 	add	r0, r0, #4
    b550:	e5502002 	ldrb	r2, [r0, #-2]
    b554:	e20330fb 	and	r3, r3, #251	; 0xfb
    b558:	e3822001 	orr	r2, r2, #1
    b55c:	e7c33198 	bfi	r3, r8, #3, #1
    b560:	e5402002 	strb	r2, [r0, #-2]
    b564:	e3a02605 	mov	r2, #5242880	; 0x500000
    b568:	e5403004 	strb	r3, [r0, #-4]
    b56c:	eaffffdf 	b	b4f0 <CPageTable::CPageTable(unsigned int)+0x74>
    b570:	ebfff4d9 	bl	88dc <CleanDataCache>
    b574:	e1a00004 	mov	r0, r4
    b578:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    b57c:	e30f1a98 	movw	r1, #64152	; 0xfa98
    b580:	e3401000 	movt	r1, #0
    b584:	e30f0ab8 	movw	r0, #64184	; 0xfab8
    b588:	e3400000 	movt	r0, #0
    b58c:	e3a02053 	mov	r2, #83	; 0x53
    b590:	eb000492 	bl	c7e0 <assertion_failed>
    b594:	e5940004 	ldr	r0, [r4, #4]
    b598:	eaffffc3 	b	b4ac <CPageTable::CPageTable(unsigned int)+0x30>
    b59c:	e30f1a98 	movw	r1, #64152	; 0xfa98
    b5a0:	e3401000 	movt	r1, #0
    b5a4:	e30f0aa8 	movw	r0, #64168	; 0xfaa8
    b5a8:	e3400000 	movt	r0, #0
    b5ac:	e3a02052 	mov	r2, #82	; 0x52
    b5b0:	eb00048a 	bl	c7e0 <assertion_failed>
    b5b4:	e5940004 	ldr	r0, [r4, #4]
    b5b8:	eaffffb8 	b	b4a0 <CPageTable::CPageTable(unsigned int)+0x24>

0000b5bc <CPageTable::~CPageTable()>:
    b5bc:	e5903000 	ldr	r3, [r0]
    b5c0:	e92d4010 	push	{r4, lr}
    b5c4:	e1a04000 	mov	r4, r0
    b5c8:	e3530000 	cmp	r3, #0
    b5cc:	0a000001 	beq	b5d8 <CPageTable::~CPageTable()+0x1c>
    b5d0:	e5900004 	ldr	r0, [r0, #4]
    b5d4:	ebfff8c4 	bl	98ec <pfree>
    b5d8:	e1a00004 	mov	r0, r4
    b5dc:	e8bd8010 	pop	{r4, pc}

0000b5e0 <CPageTable::GetBaseAddress() const>:
    b5e0:	e5900004 	ldr	r0, [r0, #4]
    b5e4:	e3800059 	orr	r0, r0, #89	; 0x59
    b5e8:	e12fff1e 	bx	lr

0000b5ec <CScreenDevice::~CScreenDevice()>:
    b5ec:	e590300c 	ldr	r3, [r0, #12]
    b5f0:	e59f2064 	ldr	r2, [pc, #100]	; b65c <CScreenDevice::~CScreenDevice()+0x70>
    b5f4:	e3530000 	cmp	r3, #0
    b5f8:	e92d4070 	push	{r4, r5, r6, lr}
    b5fc:	e1a04000 	mov	r4, r0
    b600:	e5802000 	str	r2, [r0]
    b604:	0a000003 	beq	b618 <CScreenDevice::~CScreenDevice()+0x2c>
    b608:	e5900018 	ldr	r0, [r0, #24]
    b60c:	e3500000 	cmp	r0, #0
    b610:	0a000000 	beq	b618 <CScreenDevice::~CScreenDevice()+0x2c>
    b614:	ebfff9e7 	bl	9db8 <operator delete[](void*)>
    b618:	e5945010 	ldr	r5, [r4, #16]
    b61c:	e3a03000 	mov	r3, #0
    b620:	e5843018 	str	r3, [r4, #24]
    b624:	e1550003 	cmp	r5, r3
    b628:	0a000003 	beq	b63c <CScreenDevice::~CScreenDevice()+0x50>
    b62c:	e1a00005 	mov	r0, r5
    b630:	eb000e01 	bl	ee3c <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b634:	e1a00005 	mov	r0, r5
    b638:	ebfff9dd 	bl	9db4 <operator delete(void*)>
    b63c:	e3a03000 	mov	r3, #0
    b640:	e2840014 	add	r0, r4, #20
    b644:	e5843010 	str	r3, [r4, #16]
    b648:	eb000489 	bl	c874 <CCharGenerator::~CCharGenerator()>
    b64c:	e1a00004 	mov	r0, r4
    b650:	eb000e79 	bl	f03c <CDevice::~CDevice()>
    b654:	e1a00004 	mov	r0, r4
    b658:	e8bd8070 	pop	{r4, r5, r6, pc}
    b65c:	0000fae0 	.word	0x0000fae0

0000b660 <CScreenDevice::~CScreenDevice()>:
    b660:	e92d4010 	push	{r4, lr}
    b664:	e1a04000 	mov	r4, r0
    b668:	ebffffdf 	bl	b5ec <CScreenDevice::~CScreenDevice()>
    b66c:	e1a00004 	mov	r0, r4
    b670:	ebfff9cf 	bl	9db4 <operator delete(void*)>
    b674:	e1a00004 	mov	r0, r4
    b678:	e8bd8010 	pop	{r4, pc}

0000b67c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>:
    b67c:	e590c028 	ldr	ip, [r0, #40]	; 0x28
    b680:	e15c0002 	cmp	ip, r2
    b684:	8590c020 	ldrhi	ip, [r0, #32]
    b688:	85900018 	ldrhi	r0, [r0, #24]
    b68c:	8022029c 	mlahi	r2, ip, r2, r0
    b690:	87c23001 	strbhi	r3, [r2, r1]
    b694:	e12fff1e 	bx	lr

0000b698 <CScreenDevice::InvertCursor() [clone .part.6]>:
    b698:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b69c:	e2806014 	add	r6, r0, #20
    b6a0:	e1a04000 	mov	r4, r0
    b6a4:	e1a00006 	mov	r0, r6
    b6a8:	eb000476 	bl	c888 <CCharGenerator::GetUnderline() const>
    b6ac:	e1a07000 	mov	r7, r0
    b6b0:	e1a00006 	mov	r0, r6
    b6b4:	eb000471 	bl	c880 <CCharGenerator::GetCharHeight() const>
    b6b8:	e1500007 	cmp	r0, r7
    b6bc:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    b6c0:	e3a05000 	mov	r5, #0
    b6c4:	ea000008 	b	b6ec <CScreenDevice::InvertCursor() [clone .part.6]+0x54>
    b6c8:	e5948020 	ldr	r8, [r4, #32]
    b6cc:	e3a03000 	mov	r3, #0
    b6d0:	e5949018 	ldr	r9, [r4, #24]
    b6d4:	e0289e98 	mla	r8, r8, lr, r9
    b6d8:	e7d8800c 	ldrb	r8, [r8, ip]
    b6dc:	e1580003 	cmp	r8, r3
    b6e0:	0a000012 	beq	b730 <CScreenDevice::InvertCursor() [clone .part.6]+0x98>
    b6e4:	ebffffe4 	bl	b67c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b6e8:	e2855001 	add	r5, r5, #1
    b6ec:	e1a00006 	mov	r0, r6
    b6f0:	eb000460 	bl	c878 <CCharGenerator::GetCharWidth() const>
    b6f4:	e1500005 	cmp	r0, r5
    b6f8:	9a00000f 	bls	b73c <CScreenDevice::InvertCursor() [clone .part.6]+0xa4>
    b6fc:	e594c03c 	ldr	ip, [r4, #60]	; 0x3c
    b700:	e5943024 	ldr	r3, [r4, #36]	; 0x24
    b704:	e085c00c 	add	ip, r5, ip
    b708:	e15c0003 	cmp	ip, r3
    b70c:	2afffff5 	bcs	b6e8 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b710:	e594e040 	ldr	lr, [r4, #64]	; 0x40
    b714:	e1a0100c 	mov	r1, ip
    b718:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b71c:	e1a00004 	mov	r0, r4
    b720:	e087e00e 	add	lr, r7, lr
    b724:	e15e0003 	cmp	lr, r3
    b728:	e1a0200e 	mov	r2, lr
    b72c:	3affffe5 	bcc	b6c8 <CScreenDevice::InvertCursor() [clone .part.6]+0x30>
    b730:	e5d43048 	ldrb	r3, [r4, #72]	; 0x48
    b734:	ebffffd0 	bl	b67c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    b738:	eaffffea 	b	b6e8 <CScreenDevice::InvertCursor() [clone .part.6]+0x50>
    b73c:	e2877001 	add	r7, r7, #1
    b740:	eaffffda 	b	b6b0 <CScreenDevice::InvertCursor() [clone .part.6]+0x18>

0000b744 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)>:
    b744:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b748:	e1a04000 	mov	r4, r0
    b74c:	e1a06003 	mov	r6, r3
    b750:	e1a08001 	mov	r8, r1
    b754:	e1a07002 	mov	r7, r2
    b758:	eb000e42 	bl	f068 <CDevice::CDevice()>
    b75c:	e59fc050 	ldr	ip, [pc, #80]	; b7b4 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, int)+0x70>
    b760:	e3a05000 	mov	r5, #0
    b764:	e5848004 	str	r8, [r4, #4]
    b768:	e5847008 	str	r7, [r4, #8]
    b76c:	e2840014 	add	r0, r4, #20
    b770:	e584600c 	str	r6, [r4, #12]
    b774:	e584c000 	str	ip, [r4]
    b778:	e5845010 	str	r5, [r4, #16]
    b77c:	eb000439 	bl	c868 <CCharGenerator::CCharGenerator()>
    b780:	e3a03001 	mov	r3, #1
    b784:	e5845018 	str	r5, [r4, #24]
    b788:	e1a00004 	mov	r0, r4
    b78c:	e5845030 	str	r5, [r4, #48]	; 0x30
    b790:	e5845034 	str	r5, [r4, #52]	; 0x34
    b794:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b798:	e5845040 	str	r5, [r4, #64]	; 0x40
    b79c:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b7a0:	e5845058 	str	r5, [r4, #88]	; 0x58
    b7a4:	e5843044 	str	r3, [r4, #68]	; 0x44
    b7a8:	e5c43048 	strb	r3, [r4, #72]	; 0x48
    b7ac:	e584305c 	str	r3, [r4, #92]	; 0x5c
    b7b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b7b4:	0000fae0 	.word	0x0000fae0

0000b7b8 <CScreenDevice::GetWidth() const>:
    b7b8:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b7bc:	e12fff1e 	bx	lr

0000b7c0 <CScreenDevice::GetHeight() const>:
    b7c0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    b7c4:	e12fff1e 	bx	lr

0000b7c8 <CScreenDevice::GetColumns() const>:
    b7c8:	e1a03000 	mov	r3, r0
    b7cc:	e92d4010 	push	{r4, lr}
    b7d0:	e2800014 	add	r0, r0, #20
    b7d4:	e5934024 	ldr	r4, [r3, #36]	; 0x24
    b7d8:	eb000426 	bl	c878 <CCharGenerator::GetCharWidth() const>
    b7dc:	e730f014 	udiv	r0, r4, r0
    b7e0:	e8bd8010 	pop	{r4, pc}

0000b7e4 <CScreenDevice::GetRows() const>:
    b7e4:	e1a03000 	mov	r3, r0
    b7e8:	e92d4010 	push	{r4, lr}
    b7ec:	e2800014 	add	r0, r0, #20
    b7f0:	e593402c 	ldr	r4, [r3, #44]	; 0x2c
    b7f4:	eb000421 	bl	c880 <CCharGenerator::GetCharHeight() const>
    b7f8:	e730f014 	udiv	r0, r4, r0
    b7fc:	e8bd8010 	pop	{r4, pc}

0000b800 <CScreenDevice::GetStatus()>:
    b800:	e591c018 	ldr	ip, [r1, #24]
    b804:	e591201c 	ldr	r2, [r1, #28]
    b808:	e92d4070 	push	{r4, r5, r6, lr}
    b80c:	e5915030 	ldr	r5, [r1, #48]	; 0x30
    b810:	e5914034 	ldr	r4, [r1, #52]	; 0x34
    b814:	e591e038 	ldr	lr, [r1, #56]	; 0x38
    b818:	e580c000 	str	ip, [r0]
    b81c:	e5802004 	str	r2, [r0, #4]
    b820:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b824:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b828:	e5805008 	str	r5, [r0, #8]
    b82c:	e5916044 	ldr	r6, [r1, #68]	; 0x44
    b830:	e580400c 	str	r4, [r0, #12]
    b834:	e5d15048 	ldrb	r5, [r1, #72]	; 0x48
    b838:	e580e010 	str	lr, [r0, #16]
    b83c:	e591404c 	ldr	r4, [r1, #76]	; 0x4c
    b840:	e580c014 	str	ip, [r0, #20]
    b844:	e591e050 	ldr	lr, [r1, #80]	; 0x50
    b848:	e5802018 	str	r2, [r0, #24]
    b84c:	e591c054 	ldr	ip, [r1, #84]	; 0x54
    b850:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    b854:	e580601c 	str	r6, [r0, #28]
    b858:	e5c05020 	strb	r5, [r0, #32]
    b85c:	e5804024 	str	r4, [r0, #36]	; 0x24
    b860:	e580e028 	str	lr, [r0, #40]	; 0x28
    b864:	e580c02c 	str	ip, [r0, #44]	; 0x2c
    b868:	e5802030 	str	r2, [r0, #48]	; 0x30
    b86c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b870 <CScreenDevice::SetStatus(TScreenStatus)>:
    b870:	e24dd010 	sub	sp, sp, #16
    b874:	e92d4070 	push	{r4, r5, r6, lr}
    b878:	e28dc014 	add	ip, sp, #20
    b87c:	e88c000e 	stm	ip, {r1, r2, r3}
    b880:	e590201c 	ldr	r2, [r0, #28]
    b884:	e59d3018 	ldr	r3, [sp, #24]
    b888:	e1520003 	cmp	r2, r3
    b88c:	0a000003 	beq	b8a0 <CScreenDevice::SetStatus(TScreenStatus)+0x30>
    b890:	e3a00000 	mov	r0, #0
    b894:	e8bd4070 	pop	{r4, r5, r6, lr}
    b898:	e28dd010 	add	sp, sp, #16
    b89c:	e12fff1e 	bx	lr
    b8a0:	e5901020 	ldr	r1, [r0, #32]
    b8a4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    b8a8:	e1510003 	cmp	r1, r3
    b8ac:	1afffff7 	bne	b890 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b8b0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    b8b4:	e1a04000 	mov	r4, r0
    b8b8:	e3530000 	cmp	r3, #0
    b8bc:	1a000020 	bne	b944 <CScreenDevice::SetStatus(TScreenStatus)+0xd4>
    b8c0:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b8c4:	e3530000 	cmp	r3, #0
    b8c8:	1afffff0 	bne	b890 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b8cc:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b8d0:	e3530000 	cmp	r3, #0
    b8d4:	1affffed 	bne	b890 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b8d8:	e59d1014 	ldr	r1, [sp, #20]
    b8dc:	e5940018 	ldr	r0, [r4, #24]
    b8e0:	ebfffd5d 	bl	ae5c <memcpy>
    b8e4:	e28d2020 	add	r2, sp, #32
    b8e8:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b8ec:	e59d101c 	ldr	r1, [sp, #28]
    b8f0:	e3530000 	cmp	r3, #0
    b8f4:	e59dc030 	ldr	ip, [sp, #48]	; 0x30
    b8f8:	e892402c 	ldm	r2, {r2, r3, r5, lr}
    b8fc:	e5841030 	str	r1, [r4, #48]	; 0x30
    b900:	e5dd0034 	ldrb	r0, [sp, #52]	; 0x34
    b904:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
    b908:	e5842034 	str	r2, [r4, #52]	; 0x34
    b90c:	e5843038 	str	r3, [r4, #56]	; 0x38
    b910:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    b914:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    b918:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b91c:	e584e040 	str	lr, [r4, #64]	; 0x40
    b920:	e584c044 	str	ip, [r4, #68]	; 0x44
    b924:	e5c40048 	strb	r0, [r4, #72]	; 0x48
    b928:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b92c:	e5842050 	str	r2, [r4, #80]	; 0x50
    b930:	e5843054 	str	r3, [r4, #84]	; 0x54
    b934:	1a00000f 	bne	b978 <CScreenDevice::SetStatus(TScreenStatus)+0x108>
    b938:	f57ff05f 	dmb	sy
    b93c:	e3a00001 	mov	r0, #1
    b940:	eaffffd3 	b	b894 <CScreenDevice::SetStatus(TScreenStatus)+0x24>
    b944:	ebfff91c 	bl	9dbc <EnterCritical>
    b948:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b94c:	e3530000 	cmp	r3, #0
    b950:	1a000003 	bne	b964 <CScreenDevice::SetStatus(TScreenStatus)+0xf4>
    b954:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
    b958:	e3530000 	cmp	r3, #0
    b95c:	0594201c 	ldreq	r2, [r4, #28]
    b960:	0affffdc 	beq	b8d8 <CScreenDevice::SetStatus(TScreenStatus)+0x68>
    b964:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
    b968:	e3530000 	cmp	r3, #0
    b96c:	0affffc7 	beq	b890 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b970:	ebfff91e 	bl	9df0 <LeaveCritical>
    b974:	eaffffc5 	b	b890 <CScreenDevice::SetStatus(TScreenStatus)+0x20>
    b978:	ebfff91c 	bl	9df0 <LeaveCritical>
    b97c:	eaffffed 	b	b938 <CScreenDevice::SetStatus(TScreenStatus)+0xc8>

0000b980 <CScreenDevice::CarriageReturn()>:
    b980:	e3a03000 	mov	r3, #0
    b984:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b988:	e12fff1e 	bx	lr

0000b98c <CScreenDevice::CursorHome()>:
    b98c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b990:	e3a02000 	mov	r2, #0
    b994:	e580203c 	str	r2, [r0, #60]	; 0x3c
    b998:	e5803040 	str	r3, [r0, #64]	; 0x40
    b99c:	e12fff1e 	bx	lr

0000b9a0 <CScreenDevice::CursorLeft()>:
    b9a0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b9a4:	e92d4070 	push	{r4, r5, r6, lr}
    b9a8:	e1a04000 	mov	r4, r0
    b9ac:	e3530000 	cmp	r3, #0
    b9b0:	1a00000f 	bne	b9f4 <CScreenDevice::CursorLeft()+0x54>
    b9b4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b9b8:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    b9bc:	e1520003 	cmp	r2, r3
    b9c0:	98bd8070 	popls	{r4, r5, r6, pc}
    b9c4:	e5905024 	ldr	r5, [r0, #36]	; 0x24
    b9c8:	e2806014 	add	r6, r0, #20
    b9cc:	e1a00006 	mov	r0, r6
    b9d0:	eb0003a8 	bl	c878 <CCharGenerator::GetCharWidth() const>
    b9d4:	e0450000 	sub	r0, r5, r0
    b9d8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    b9dc:	e1a00006 	mov	r0, r6
    b9e0:	eb0003a6 	bl	c880 <CCharGenerator::GetCharHeight() const>
    b9e4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b9e8:	e0430000 	sub	r0, r3, r0
    b9ec:	e5840040 	str	r0, [r4, #64]	; 0x40
    b9f0:	e8bd8070 	pop	{r4, r5, r6, pc}
    b9f4:	e2800014 	add	r0, r0, #20
    b9f8:	eb00039e 	bl	c878 <CCharGenerator::GetCharWidth() const>
    b9fc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    ba00:	e0430000 	sub	r0, r3, r0
    ba04:	e584003c 	str	r0, [r4, #60]	; 0x3c
    ba08:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ba0c <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    ba0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ba10:	e1a04002 	mov	r4, r2
    ba14:	e2444001 	sub	r4, r4, #1
    ba18:	e1a05000 	mov	r5, r0
    ba1c:	e2806014 	add	r6, r0, #20
    ba20:	e1a00006 	mov	r0, r6
    ba24:	e1a07001 	mov	r7, r1
    ba28:	eb000392 	bl	c878 <CCharGenerator::GetCharWidth() const>
    ba2c:	e0040490 	mul	r4, r0, r4
    ba30:	e1a00006 	mov	r0, r6
    ba34:	eb000391 	bl	c880 <CCharGenerator::GetCharHeight() const>
    ba38:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    ba3c:	e1540003 	cmp	r4, r3
    ba40:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    ba44:	e2477001 	sub	r7, r7, #1
    ba48:	e5953034 	ldr	r3, [r5, #52]	; 0x34
    ba4c:	e0000790 	mul	r0, r0, r7
    ba50:	e1500003 	cmp	r0, r3
    ba54:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    ba58:	e5953038 	ldr	r3, [r5, #56]	; 0x38
    ba5c:	e1500003 	cmp	r0, r3
    ba60:	3585403c 	strcc	r4, [r5, #60]	; 0x3c
    ba64:	35850040 	strcc	r0, [r5, #64]	; 0x40
    ba68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000ba6c <CScreenDevice::CursorUp()>:
    ba6c:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    ba70:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    ba74:	e1520003 	cmp	r2, r3
    ba78:	912fff1e 	bxls	lr
    ba7c:	e92d4010 	push	{r4, lr}
    ba80:	e1a04000 	mov	r4, r0
    ba84:	e2800014 	add	r0, r0, #20
    ba88:	eb00037c 	bl	c880 <CCharGenerator::GetCharHeight() const>
    ba8c:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    ba90:	e0430000 	sub	r0, r3, r0
    ba94:	e5840040 	str	r0, [r4, #64]	; 0x40
    ba98:	e8bd8010 	pop	{r4, pc}

0000ba9c <CScreenDevice::DeleteChars(unsigned int)>:
    ba9c:	e12fff1e 	bx	lr

0000baa0 <CScreenDevice::DeleteLines(unsigned int)>:
    baa0:	e12fff1e 	bx	lr

0000baa4 <CScreenDevice::InsertLines(unsigned int)>:
    baa4:	e12fff1e 	bx	lr

0000baa8 <CScreenDevice::InsertMode(int)>:
    baa8:	e580104c 	str	r1, [r0, #76]	; 0x4c
    baac:	e12fff1e 	bx	lr

0000bab0 <CScreenDevice::ReverseScroll()>:
    bab0:	e12fff1e 	bx	lr

0000bab4 <CScreenDevice::SetCursorMode(int)>:
    bab4:	e5801044 	str	r1, [r0, #68]	; 0x44
    bab8:	e12fff1e 	bx	lr

0000babc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    babc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bac0:	e1a04001 	mov	r4, r1
    bac4:	e2444001 	sub	r4, r4, #1
    bac8:	e1a06000 	mov	r6, r0
    bacc:	e1a05002 	mov	r5, r2
    bad0:	e2807014 	add	r7, r0, #20
    bad4:	e1a00007 	mov	r0, r7
    bad8:	eb000368 	bl	c880 <CCharGenerator::GetCharHeight() const>
    badc:	e0040490 	mul	r4, r0, r4
    bae0:	e1a00007 	mov	r0, r7
    bae4:	eb000365 	bl	c880 <CCharGenerator::GetCharHeight() const>
    bae8:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
    baec:	e0000095 	mul	r0, r5, r0
    baf0:	e3500000 	cmp	r0, #0
    baf4:	11540002 	cmpne	r4, r2
    baf8:	33a03001 	movcc	r3, #1
    bafc:	23a03000 	movcs	r3, #0
    bb00:	e1500002 	cmp	r0, r2
    bb04:	83a03000 	movhi	r3, #0
    bb08:	92033001 	andls	r3, r3, #1
    bb0c:	e1540000 	cmp	r4, r0
    bb10:	23a03000 	movcs	r3, #0
    bb14:	32033001 	andcc	r3, r3, #1
    bb18:	e3530000 	cmp	r3, #0
    bb1c:	e3a03000 	mov	r3, #0
    bb20:	15864034 	strne	r4, [r6, #52]	; 0x34
    bb24:	15860038 	strne	r0, [r6, #56]	; 0x38
    bb28:	05964034 	ldreq	r4, [r6, #52]	; 0x34
    bb2c:	e586303c 	str	r3, [r6, #60]	; 0x3c
    bb30:	e5864040 	str	r4, [r6, #64]	; 0x40
    bb34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bb38 <CScreenDevice::SetStandoutMode(unsigned int)>:
    bb38:	e351001b 	cmp	r1, #27
    bb3c:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    bb40:	ea00001d 	b	bbbc <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    bb44:	0000bbcc 	.word	0x0000bbcc
    bb48:	0000bbc0 	.word	0x0000bbc0
    bb4c:	0000bbb4 	.word	0x0000bbb4
    bb50:	0000bbbc 	.word	0x0000bbbc
    bb54:	0000bbbc 	.word	0x0000bbbc
    bb58:	0000bbbc 	.word	0x0000bbbc
    bb5c:	0000bbbc 	.word	0x0000bbbc
    bb60:	0000bbbc 	.word	0x0000bbbc
    bb64:	0000bbbc 	.word	0x0000bbbc
    bb68:	0000bbbc 	.word	0x0000bbbc
    bb6c:	0000bbbc 	.word	0x0000bbbc
    bb70:	0000bbbc 	.word	0x0000bbbc
    bb74:	0000bbbc 	.word	0x0000bbbc
    bb78:	0000bbbc 	.word	0x0000bbbc
    bb7c:	0000bbbc 	.word	0x0000bbbc
    bb80:	0000bbbc 	.word	0x0000bbbc
    bb84:	0000bbbc 	.word	0x0000bbbc
    bb88:	0000bbbc 	.word	0x0000bbbc
    bb8c:	0000bbbc 	.word	0x0000bbbc
    bb90:	0000bbbc 	.word	0x0000bbbc
    bb94:	0000bbbc 	.word	0x0000bbbc
    bb98:	0000bbbc 	.word	0x0000bbbc
    bb9c:	0000bbbc 	.word	0x0000bbbc
    bba0:	0000bbbc 	.word	0x0000bbbc
    bba4:	0000bbbc 	.word	0x0000bbbc
    bba8:	0000bbbc 	.word	0x0000bbbc
    bbac:	0000bbbc 	.word	0x0000bbbc
    bbb0:	0000bbcc 	.word	0x0000bbcc
    bbb4:	e3a03003 	mov	r3, #3
    bbb8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bbbc:	e12fff1e 	bx	lr
    bbc0:	e3a03002 	mov	r3, #2
    bbc4:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bbc8:	e12fff1e 	bx	lr
    bbcc:	e3a03001 	mov	r3, #1
    bbd0:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    bbd4:	e12fff1e 	bx	lr

0000bbd8 <CScreenDevice::Scroll()>:
    bbd8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bbdc:	e1a05000 	mov	r5, r0
    bbe0:	e2800014 	add	r0, r0, #20
    bbe4:	eb000325 	bl	c880 <CCharGenerator::GetCharHeight() const>
    bbe8:	e1a06000 	mov	r6, r0
    bbec:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    bbf0:	e5954038 	ldr	r4, [r5, #56]	; 0x38
    bbf4:	e5953020 	ldr	r3, [r5, #32]
    bbf8:	e0444002 	sub	r4, r4, r2
    bbfc:	e5951018 	ldr	r1, [r5, #24]
    bc00:	e0444000 	sub	r4, r4, r0
    bc04:	e0271293 	mla	r7, r3, r2, r1
    bc08:	e0040493 	mul	r4, r3, r4
    bc0c:	e3540000 	cmp	r4, #0
    bc10:	1a000007 	bne	bc34 <CScreenDevice::Scroll()+0x5c>
    bc14:	e0030693 	mul	r3, r3, r6
    bc18:	e1b03123 	lsrs	r3, r3, #2
    bc1c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    bc20:	e1a00007 	mov	r0, r7
    bc24:	e1a02103 	lsl	r2, r3, #2
    bc28:	e3a01000 	mov	r1, #0
    bc2c:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    bc30:	eafffb71 	b	a9fc <memset>
    bc34:	e0808002 	add	r8, r0, r2
    bc38:	e3c4900f 	bic	r9, r4, #15
    bc3c:	e1a02009 	mov	r2, r9
    bc40:	e1a00007 	mov	r0, r7
    bc44:	e0281893 	mla	r8, r3, r8, r1
    bc48:	e1a01008 	mov	r1, r8
    bc4c:	ebfffc82 	bl	ae5c <memcpy>
    bc50:	e0870009 	add	r0, r7, r9
    bc54:	e204200f 	and	r2, r4, #15
    bc58:	e0881009 	add	r1, r8, r9
    bc5c:	e3c44003 	bic	r4, r4, #3
    bc60:	ebfffc7d 	bl	ae5c <memcpy>
    bc64:	e0877004 	add	r7, r7, r4
    bc68:	e5953020 	ldr	r3, [r5, #32]
    bc6c:	eaffffe8 	b	bc14 <CScreenDevice::Scroll()+0x3c>

0000bc70 <CScreenDevice::CursorDown()>:
    bc70:	e92d4070 	push	{r4, r5, r6, lr}
    bc74:	e1a04000 	mov	r4, r0
    bc78:	e2805014 	add	r5, r0, #20
    bc7c:	e1a00005 	mov	r0, r5
    bc80:	eb0002fe 	bl	c880 <CCharGenerator::GetCharHeight() const>
    bc84:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bc88:	e5942038 	ldr	r2, [r4, #56]	; 0x38
    bc8c:	e0800003 	add	r0, r0, r3
    bc90:	e1500002 	cmp	r0, r2
    bc94:	e5840040 	str	r0, [r4, #64]	; 0x40
    bc98:	38bd8070 	popcc	{r4, r5, r6, pc}
    bc9c:	e1a00004 	mov	r0, r4
    bca0:	ebffffcc 	bl	bbd8 <CScreenDevice::Scroll()>
    bca4:	e1a00005 	mov	r0, r5
    bca8:	eb0002f4 	bl	c880 <CCharGenerator::GetCharHeight() const>
    bcac:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bcb0:	e0430000 	sub	r0, r3, r0
    bcb4:	e5840040 	str	r0, [r4, #64]	; 0x40
    bcb8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bcbc <CScreenDevice::NewLine()>:
    bcbc:	e3a02000 	mov	r2, #0
    bcc0:	e580203c 	str	r2, [r0, #60]	; 0x3c
    bcc4:	eaffffe9 	b	bc70 <CScreenDevice::CursorDown()>

0000bcc8 <CScreenDevice::CursorRight()>:
    bcc8:	e92d4010 	push	{r4, lr}
    bccc:	e1a04000 	mov	r4, r0
    bcd0:	e2800014 	add	r0, r0, #20
    bcd4:	eb0002e7 	bl	c878 <CCharGenerator::GetCharWidth() const>
    bcd8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bcdc:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bce0:	e0800003 	add	r0, r0, r3
    bce4:	e1500002 	cmp	r0, r2
    bce8:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bcec:	38bd8010 	popcc	{r4, pc}
    bcf0:	e3a03000 	mov	r3, #0
    bcf4:	e1a00004 	mov	r0, r4
    bcf8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bcfc:	e8bd4010 	pop	{r4, lr}
    bd00:	eaffffda 	b	bc70 <CScreenDevice::CursorDown()>

0000bd04 <CScreenDevice::Tabulator()>:
    bd04:	e92d4010 	push	{r4, lr}
    bd08:	e1a04000 	mov	r4, r0
    bd0c:	e2800014 	add	r0, r0, #20
    bd10:	eb0002d8 	bl	c878 <CCharGenerator::GetCharWidth() const>
    bd14:	e1a00180 	lsl	r0, r0, #3
    bd18:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    bd1c:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bd20:	e0803003 	add	r3, r0, r3
    bd24:	e733f013 	udiv	r3, r3, r0
    bd28:	e0000390 	mul	r0, r0, r3
    bd2c:	e1500002 	cmp	r0, r2
    bd30:	e584003c 	str	r0, [r4, #60]	; 0x3c
    bd34:	38bd8010 	popcc	{r4, pc}
    bd38:	e3a03000 	mov	r3, #0
    bd3c:	e1a00004 	mov	r0, r4
    bd40:	e584303c 	str	r3, [r4, #60]	; 0x3c
    bd44:	e8bd4010 	pop	{r4, lr}
    bd48:	eaffffc8 	b	bc70 <CScreenDevice::CursorDown()>

0000bd4c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>:
    bd4c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd50:	e2806014 	add	r6, r0, #20
    bd54:	e1a08000 	mov	r8, r0
    bd58:	e24dd00c 	sub	sp, sp, #12
    bd5c:	e3a07000 	mov	r7, #0
    bd60:	e1a00006 	mov	r0, r6
    bd64:	e1a0a001 	mov	sl, r1
    bd68:	e1a09002 	mov	r9, r2
    bd6c:	e5ddb030 	ldrb	fp, [sp, #48]	; 0x30
    bd70:	e58d3004 	str	r3, [sp, #4]
    bd74:	eb0002c1 	bl	c880 <CCharGenerator::GetCharHeight() const>
    bd78:	e1570000 	cmp	r7, r0
    bd7c:	2a00001e 	bcs	bdfc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0xb0>
    bd80:	e59d3004 	ldr	r3, [sp, #4]
    bd84:	e3a04000 	mov	r4, #0
    bd88:	e0873003 	add	r3, r7, r3
    bd8c:	e58d3000 	str	r3, [sp]
    bd90:	e1a00006 	mov	r0, r6
    bd94:	e0845009 	add	r5, r4, r9
    bd98:	eb0002b6 	bl	c878 <CCharGenerator::GetCharWidth() const>
    bd9c:	e1540000 	cmp	r4, r0
    bda0:	e1a02004 	mov	r2, r4
    bda4:	e1a03007 	mov	r3, r7
    bda8:	e1a0100a 	mov	r1, sl
    bdac:	e1a00006 	mov	r0, r6
    bdb0:	e2844001 	add	r4, r4, #1
    bdb4:	2a00000b 	bcs	bde8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x9c>
    bdb8:	eb0002b4 	bl	c890 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bdbc:	e5982024 	ldr	r2, [r8, #36]	; 0x24
    bdc0:	e3500000 	cmp	r0, #0
    bdc4:	11a0300b 	movne	r3, fp
    bdc8:	03a03000 	moveq	r3, #0
    bdcc:	e1550002 	cmp	r5, r2
    bdd0:	2affffee 	bcs	bd90 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    bdd4:	e1a01005 	mov	r1, r5
    bdd8:	e59d2000 	ldr	r2, [sp]
    bddc:	e1a00008 	mov	r0, r8
    bde0:	ebfffe25 	bl	b67c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    bde4:	eaffffe9 	b	bd90 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x44>
    bde8:	e2877001 	add	r7, r7, #1
    bdec:	e1a00006 	mov	r0, r6
    bdf0:	eb0002a2 	bl	c880 <CCharGenerator::GetCharHeight() const>
    bdf4:	e1570000 	cmp	r7, r0
    bdf8:	3affffe0 	bcc	bd80 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)+0x34>
    bdfc:	e28dd00c 	add	sp, sp, #12
    be00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000be04 <CScreenDevice::DisplayChar(char)>:
    be04:	e6ef3071 	uxtb	r3, r1
    be08:	e353001f 	cmp	r3, #31
    be0c:	912fff1e 	bxls	lr
    be10:	e92d4010 	push	{r4, lr}
    be14:	e1a04000 	mov	r4, r0
    be18:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    be1c:	e24dd008 	sub	sp, sp, #8
    be20:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    be24:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    be28:	e58dc000 	str	ip, [sp]
    be2c:	ebffffc6 	bl	bd4c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    be30:	e1a00004 	mov	r0, r4
    be34:	e28dd008 	add	sp, sp, #8
    be38:	e8bd4010 	pop	{r4, lr}
    be3c:	eaffffa1 	b	bcc8 <CScreenDevice::CursorRight()>

0000be40 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    be40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    be44:	e1a05000 	mov	r5, r0
    be48:	e1a07001 	mov	r7, r1
    be4c:	e1a0a002 	mov	sl, r2
    be50:	e2806014 	add	r6, r0, #20
    be54:	e3a08000 	mov	r8, #0
    be58:	e1a00006 	mov	r0, r6
    be5c:	eb000287 	bl	c880 <CCharGenerator::GetCharHeight() const>
    be60:	e1580000 	cmp	r8, r0
    be64:	28bd87f0 	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
    be68:	e3a04000 	mov	r4, #0
    be6c:	e088900a 	add	r9, r8, sl
    be70:	e1a00006 	mov	r0, r6
    be74:	eb00027f 	bl	c878 <CCharGenerator::GetCharWidth() const>
    be78:	e1540000 	cmp	r4, r0
    be7c:	e0841007 	add	r1, r4, r7
    be80:	e2844001 	add	r4, r4, #1
    be84:	2a000007 	bcs	bea8 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    be88:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    be8c:	e1510003 	cmp	r1, r3
    be90:	2afffff6 	bcs	be70 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    be94:	e3a03000 	mov	r3, #0
    be98:	e1a02009 	mov	r2, r9
    be9c:	e1a00005 	mov	r0, r5
    bea0:	ebfffdf5 	bl	b67c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>
    bea4:	eafffff1 	b	be70 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x30>
    bea8:	e2888001 	add	r8, r8, #1
    beac:	eaffffe9 	b	be58 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000beb0 <CScreenDevice::ClearLineEnd()>:
    beb0:	e92d4070 	push	{r4, r5, r6, lr}
    beb4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    beb8:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bebc:	e1540003 	cmp	r4, r3
    bec0:	28bd8070 	popcs	{r4, r5, r6, pc}
    bec4:	e1a05000 	mov	r5, r0
    bec8:	e2806014 	add	r6, r0, #20
    becc:	e1a01004 	mov	r1, r4
    bed0:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bed4:	e1a00005 	mov	r0, r5
    bed8:	ebffffd8 	bl	be40 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bedc:	e1a00006 	mov	r0, r6
    bee0:	eb000264 	bl	c878 <CCharGenerator::GetCharWidth() const>
    bee4:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bee8:	e0844000 	add	r4, r4, r0
    beec:	e1530004 	cmp	r3, r4
    bef0:	8afffff5 	bhi	becc <CScreenDevice::ClearLineEnd()+0x1c>
    bef4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bef8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>:
    bef8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    befc:	e1a05000 	mov	r5, r0
    bf00:	e1a06001 	mov	r6, r1
    bf04:	e2807014 	add	r7, r0, #20
    bf08:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bf0c:	e1a00007 	mov	r0, r7
    bf10:	eb000258 	bl	c878 <CCharGenerator::GetCharWidth() const>
    bf14:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bf18:	e0264096 	mla	r6, r6, r0, r4
    bf1c:	e595403c 	ldr	r4, [r5, #60]	; 0x3c
    bf20:	e1560003 	cmp	r6, r3
    bf24:	21a06003 	movcs	r6, r3
    bf28:	e1540006 	cmp	r4, r6
    bf2c:	28bd81f0 	popcs	{r4, r5, r6, r7, r8, pc}
    bf30:	e1a01004 	mov	r1, r4
    bf34:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bf38:	e1a00005 	mov	r0, r5
    bf3c:	ebffffbf 	bl	be40 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bf40:	e1a00007 	mov	r0, r7
    bf44:	eb00024b 	bl	c878 <CCharGenerator::GetCharWidth() const>
    bf48:	e0844000 	add	r4, r4, r0
    bf4c:	e1540006 	cmp	r4, r6
    bf50:	3afffff6 	bcc	bf30 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]+0x38>
    bf54:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bf58 <CScreenDevice::EraseChars(unsigned int)>:
    bf58:	e3510000 	cmp	r1, #0
    bf5c:	012fff1e 	bxeq	lr
    bf60:	eaffffe4 	b	bef8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>

0000bf64 <CScreenDevice::ClearDisplayEnd()>:
    bf64:	e92d4070 	push	{r4, r5, r6, lr}
    bf68:	e1a05000 	mov	r5, r0
    bf6c:	e590403c 	ldr	r4, [r0, #60]	; 0x3c
    bf70:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bf74:	e2806014 	add	r6, r0, #20
    bf78:	e1540003 	cmp	r4, r3
    bf7c:	2a000009 	bcs	bfa8 <CScreenDevice::ClearDisplayEnd()+0x44>
    bf80:	e1a01004 	mov	r1, r4
    bf84:	e5952040 	ldr	r2, [r5, #64]	; 0x40
    bf88:	e1a00005 	mov	r0, r5
    bf8c:	ebffffab 	bl	be40 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bf90:	e1a00006 	mov	r0, r6
    bf94:	eb000237 	bl	c878 <CCharGenerator::GetCharWidth() const>
    bf98:	e5953024 	ldr	r3, [r5, #36]	; 0x24
    bf9c:	e0844000 	add	r4, r4, r0
    bfa0:	e1530004 	cmp	r3, r4
    bfa4:	8afffff5 	bhi	bf80 <CScreenDevice::ClearDisplayEnd()+0x1c>
    bfa8:	e5954040 	ldr	r4, [r5, #64]	; 0x40
    bfac:	e1a00006 	mov	r0, r6
    bfb0:	eb000232 	bl	c880 <CCharGenerator::GetCharHeight() const>
    bfb4:	e5953020 	ldr	r3, [r5, #32]
    bfb8:	e0840000 	add	r0, r4, r0
    bfbc:	e595201c 	ldr	r2, [r5, #28]
    bfc0:	e5951018 	ldr	r1, [r5, #24]
    bfc4:	e0000093 	mul	r0, r3, r0
    bfc8:	e0522000 	subs	r2, r2, r0
    bfcc:	0a000003 	beq	bfe0 <CScreenDevice::ClearDisplayEnd()+0x7c>
    bfd0:	e0810000 	add	r0, r1, r0
    bfd4:	e3a01000 	mov	r1, #0
    bfd8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bfdc:	eafffa86 	b	a9fc <memset>
    bfe0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bfe4 <CScreenDevice::Write(char)>:
    bfe4:	e92d4010 	push	{r4, lr}
    bfe8:	e1a04000 	mov	r4, r0
    bfec:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bff0:	e24dd008 	sub	sp, sp, #8
    bff4:	e3530007 	cmp	r3, #7
    bff8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    bffc:	ea000010 	b	c044 <CScreenDevice::Write(char)+0x60>
    c000:	0000c090 	.word	0x0000c090
    c004:	0000c0f0 	.word	0x0000c0f0
    c008:	0000c10c 	.word	0x0000c10c
    c00c:	0000c164 	.word	0x0000c164
    c010:	0000c240 	.word	0x0000c240
    c014:	0000c260 	.word	0x0000c260
    c018:	0000c280 	.word	0x0000c280
    c01c:	0000c054 	.word	0x0000c054
    c020:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c024:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c028:	e1520003 	cmp	r2, r3
    c02c:	2a000004 	bcs	c044 <CScreenDevice::Write(char)+0x60>
    c030:	e2800014 	add	r0, r0, #20
    c034:	eb000211 	bl	c880 <CCharGenerator::GetCharHeight() const>
    c038:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    c03c:	e0433000 	sub	r3, r3, r0
    c040:	e5843040 	str	r3, [r4, #64]	; 0x40
    c044:	e3a03000 	mov	r3, #0
    c048:	e5843030 	str	r3, [r4, #48]	; 0x30
    c04c:	e28dd008 	add	sp, sp, #8
    c050:	e8bd8010 	pop	{r4, pc}
    c054:	e3510068 	cmp	r1, #104	; 0x68
    c058:	0a000097 	beq	c2bc <CScreenDevice::Write(char)+0x2d8>
    c05c:	e351006c 	cmp	r1, #108	; 0x6c
    c060:	0a000095 	beq	c2bc <CScreenDevice::Write(char)+0x2d8>
    c064:	e2411030 	sub	r1, r1, #48	; 0x30
    c068:	e6ef3071 	uxtb	r3, r1
    c06c:	e3530009 	cmp	r3, #9
    c070:	8afffff3 	bhi	c044 <CScreenDevice::Write(char)+0x60>
    c074:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c078:	e3a0200a 	mov	r2, #10
    c07c:	e0211392 	mla	r1, r2, r3, r1
    c080:	e3510063 	cmp	r1, #99	; 0x63
    c084:	e5841050 	str	r1, [r4, #80]	; 0x50
    c088:	8affffed 	bhi	c044 <CScreenDevice::Write(char)+0x60>
    c08c:	eaffffee 	b	c04c <CScreenDevice::Write(char)+0x68>
    c090:	e2413008 	sub	r3, r1, #8
    c094:	e3530013 	cmp	r3, #19
    c098:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c09c:	ea0000ec 	b	c454 <CScreenDevice::Write(char)+0x470>
    c0a0:	0000c328 	.word	0x0000c328
    c0a4:	0000c31c 	.word	0x0000c31c
    c0a8:	0000c308 	.word	0x0000c308
    c0ac:	0000c454 	.word	0x0000c454
    c0b0:	0000c454 	.word	0x0000c454
    c0b4:	0000c2fc 	.word	0x0000c2fc
    c0b8:	0000c454 	.word	0x0000c454
    c0bc:	0000c454 	.word	0x0000c454
    c0c0:	0000c454 	.word	0x0000c454
    c0c4:	0000c454 	.word	0x0000c454
    c0c8:	0000c454 	.word	0x0000c454
    c0cc:	0000c454 	.word	0x0000c454
    c0d0:	0000c454 	.word	0x0000c454
    c0d4:	0000c454 	.word	0x0000c454
    c0d8:	0000c454 	.word	0x0000c454
    c0dc:	0000c454 	.word	0x0000c454
    c0e0:	0000c454 	.word	0x0000c454
    c0e4:	0000c454 	.word	0x0000c454
    c0e8:	0000c454 	.word	0x0000c454
    c0ec:	0000c2f0 	.word	0x0000c2f0
    c0f0:	e351004d 	cmp	r1, #77	; 0x4d
    c0f4:	0affffd2 	beq	c044 <CScreenDevice::Write(char)+0x60>
    c0f8:	e351005b 	cmp	r1, #91	; 0x5b
    c0fc:	03a03002 	moveq	r3, #2
    c100:	05803030 	streq	r3, [r0, #48]	; 0x30
    c104:	0affffd0 	beq	c04c <CScreenDevice::Write(char)+0x68>
    c108:	eaffffcd 	b	c044 <CScreenDevice::Write(char)+0x60>
    c10c:	e241303f 	sub	r3, r1, #63	; 0x3f
    c110:	e3530011 	cmp	r3, #17
    c114:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c118:	ea0000d9 	b	c484 <CScreenDevice::Write(char)+0x4a0>
    c11c:	0000c410 	.word	0x0000c410
    c120:	0000c484 	.word	0x0000c484
    c124:	0000c020 	.word	0x0000c020
    c128:	0000c444 	.word	0x0000c444
    c12c:	0000c434 	.word	0x0000c434
    c130:	0000c484 	.word	0x0000c484
    c134:	0000c484 	.word	0x0000c484
    c138:	0000c484 	.word	0x0000c484
    c13c:	0000c484 	.word	0x0000c484
    c140:	0000c41c 	.word	0x0000c41c
    c144:	0000c484 	.word	0x0000c484
    c148:	0000c400 	.word	0x0000c400
    c14c:	0000c3f0 	.word	0x0000c3f0
    c150:	0000c044 	.word	0x0000c044
    c154:	0000c044 	.word	0x0000c044
    c158:	0000c484 	.word	0x0000c484
    c15c:	0000c484 	.word	0x0000c484
    c160:	0000c044 	.word	0x0000c044
    c164:	e241303b 	sub	r3, r1, #59	; 0x3b
    c168:	e3530032 	cmp	r3, #50	; 0x32
    c16c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c170:	eaffffbb 	b	c064 <CScreenDevice::Write(char)+0x80>
    c174:	0000c3e4 	.word	0x0000c3e4
    c178:	0000c064 	.word	0x0000c064
    c17c:	0000c064 	.word	0x0000c064
    c180:	0000c064 	.word	0x0000c064
    c184:	0000c064 	.word	0x0000c064
    c188:	0000c064 	.word	0x0000c064
    c18c:	0000c064 	.word	0x0000c064
    c190:	0000c064 	.word	0x0000c064
    c194:	0000c064 	.word	0x0000c064
    c198:	0000c064 	.word	0x0000c064
    c19c:	0000c064 	.word	0x0000c064
    c1a0:	0000c064 	.word	0x0000c064
    c1a4:	0000c064 	.word	0x0000c064
    c1a8:	0000c064 	.word	0x0000c064
    c1ac:	0000c064 	.word	0x0000c064
    c1b0:	0000c064 	.word	0x0000c064
    c1b4:	0000c064 	.word	0x0000c064
    c1b8:	0000c044 	.word	0x0000c044
    c1bc:	0000c044 	.word	0x0000c044
    c1c0:	0000c064 	.word	0x0000c064
    c1c4:	0000c064 	.word	0x0000c064
    c1c8:	0000c044 	.word	0x0000c044
    c1cc:	0000c064 	.word	0x0000c064
    c1d0:	0000c064 	.word	0x0000c064
    c1d4:	0000c064 	.word	0x0000c064
    c1d8:	0000c064 	.word	0x0000c064
    c1dc:	0000c064 	.word	0x0000c064
    c1e0:	0000c064 	.word	0x0000c064
    c1e4:	0000c064 	.word	0x0000c064
    c1e8:	0000c334 	.word	0x0000c334
    c1ec:	0000c064 	.word	0x0000c064
    c1f0:	0000c064 	.word	0x0000c064
    c1f4:	0000c064 	.word	0x0000c064
    c1f8:	0000c064 	.word	0x0000c064
    c1fc:	0000c064 	.word	0x0000c064
    c200:	0000c064 	.word	0x0000c064
    c204:	0000c064 	.word	0x0000c064
    c208:	0000c064 	.word	0x0000c064
    c20c:	0000c064 	.word	0x0000c064
    c210:	0000c064 	.word	0x0000c064
    c214:	0000c064 	.word	0x0000c064
    c218:	0000c064 	.word	0x0000c064
    c21c:	0000c064 	.word	0x0000c064
    c220:	0000c064 	.word	0x0000c064
    c224:	0000c064 	.word	0x0000c064
    c228:	0000c348 	.word	0x0000c348
    c22c:	0000c064 	.word	0x0000c064
    c230:	0000c064 	.word	0x0000c064
    c234:	0000c064 	.word	0x0000c064
    c238:	0000c348 	.word	0x0000c348
    c23c:	0000c364 	.word	0x0000c364
    c240:	e2411030 	sub	r1, r1, #48	; 0x30
    c244:	e6ef3071 	uxtb	r3, r1
    c248:	e3530009 	cmp	r3, #9
    c24c:	8affff7c 	bhi	c044 <CScreenDevice::Write(char)+0x60>
    c250:	e3a03007 	mov	r3, #7
    c254:	e5801050 	str	r1, [r0, #80]	; 0x50
    c258:	e5803030 	str	r3, [r0, #48]	; 0x30
    c25c:	eaffff7a 	b	c04c <CScreenDevice::Write(char)+0x68>
    c260:	e2411030 	sub	r1, r1, #48	; 0x30
    c264:	e6ef3071 	uxtb	r3, r1
    c268:	e3530009 	cmp	r3, #9
    c26c:	8affff74 	bhi	c044 <CScreenDevice::Write(char)+0x60>
    c270:	e3a03006 	mov	r3, #6
    c274:	e5801054 	str	r1, [r0, #84]	; 0x54
    c278:	e5803030 	str	r3, [r0, #48]	; 0x30
    c27c:	eaffff72 	b	c04c <CScreenDevice::Write(char)+0x68>
    c280:	e3510048 	cmp	r1, #72	; 0x48
    c284:	0a00008f 	beq	c4c8 <CScreenDevice::Write(char)+0x4e4>
    c288:	e3510072 	cmp	r1, #114	; 0x72
    c28c:	0a000011 	beq	c2d8 <CScreenDevice::Write(char)+0x2f4>
    c290:	e2411030 	sub	r1, r1, #48	; 0x30
    c294:	e6ef3071 	uxtb	r3, r1
    c298:	e3530009 	cmp	r3, #9
    c29c:	8affff68 	bhi	c044 <CScreenDevice::Write(char)+0x60>
    c2a0:	e5903054 	ldr	r3, [r0, #84]	; 0x54
    c2a4:	e3a0200a 	mov	r2, #10
    c2a8:	e0211392 	mla	r1, r2, r3, r1
    c2ac:	e35100c7 	cmp	r1, #199	; 0xc7
    c2b0:	e5801054 	str	r1, [r0, #84]	; 0x54
    c2b4:	8affff62 	bhi	c044 <CScreenDevice::Write(char)+0x60>
    c2b8:	eaffff63 	b	c04c <CScreenDevice::Write(char)+0x68>
    c2bc:	e5943050 	ldr	r3, [r4, #80]	; 0x50
    c2c0:	e3530019 	cmp	r3, #25
    c2c4:	02411068 	subeq	r1, r1, #104	; 0x68
    c2c8:	016f1f11 	clzeq	r1, r1
    c2cc:	01a012a1 	lsreq	r1, r1, #5
    c2d0:	05841044 	streq	r1, [r4, #68]	; 0x44
    c2d4:	eaffff5a 	b	c044 <CScreenDevice::Write(char)+0x60>
    c2d8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c2dc:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c2e0:	ebfffdf5 	bl	babc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c2e4:	e3a03000 	mov	r3, #0
    c2e8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c2ec:	eaffff56 	b	c04c <CScreenDevice::Write(char)+0x68>
    c2f0:	e3a03001 	mov	r3, #1
    c2f4:	e5803030 	str	r3, [r0, #48]	; 0x30
    c2f8:	eaffff53 	b	c04c <CScreenDevice::Write(char)+0x68>
    c2fc:	e3a03000 	mov	r3, #0
    c300:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c304:	eaffff50 	b	c04c <CScreenDevice::Write(char)+0x68>
    c308:	e3a03000 	mov	r3, #0
    c30c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c310:	e28dd008 	add	sp, sp, #8
    c314:	e8bd4010 	pop	{r4, lr}
    c318:	eafffe54 	b	bc70 <CScreenDevice::CursorDown()>
    c31c:	e28dd008 	add	sp, sp, #8
    c320:	e8bd4010 	pop	{r4, lr}
    c324:	eafffe76 	b	bd04 <CScreenDevice::Tabulator()>
    c328:	e28dd008 	add	sp, sp, #8
    c32c:	e8bd4010 	pop	{r4, lr}
    c330:	eafffd9a 	b	b9a0 <CScreenDevice::CursorLeft()>
    c334:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c338:	e3510000 	cmp	r1, #0
    c33c:	0affff40 	beq	c044 <CScreenDevice::Write(char)+0x60>
    c340:	ebfffeec 	bl	bef8 <CScreenDevice::EraseChars(unsigned int) [clone .part.4]>
    c344:	eaffff3e 	b	c044 <CScreenDevice::Write(char)+0x60>
    c348:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c34c:	e3530004 	cmp	r3, #4
    c350:	02411068 	subeq	r1, r1, #104	; 0x68
    c354:	016f1f11 	clzeq	r1, r1
    c358:	01a012a1 	lsreq	r1, r1, #5
    c35c:	0580104c 	streq	r1, [r0, #76]	; 0x4c
    c360:	eaffff37 	b	c044 <CScreenDevice::Write(char)+0x60>
    c364:	e5903050 	ldr	r3, [r0, #80]	; 0x50
    c368:	e353001b 	cmp	r3, #27
    c36c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c370:	eaffff33 	b	c044 <CScreenDevice::Write(char)+0x60>
    c374:	0000c4bc 	.word	0x0000c4bc
    c378:	0000c4b0 	.word	0x0000c4b0
    c37c:	0000c4a4 	.word	0x0000c4a4
    c380:	0000c044 	.word	0x0000c044
    c384:	0000c044 	.word	0x0000c044
    c388:	0000c044 	.word	0x0000c044
    c38c:	0000c044 	.word	0x0000c044
    c390:	0000c044 	.word	0x0000c044
    c394:	0000c044 	.word	0x0000c044
    c398:	0000c044 	.word	0x0000c044
    c39c:	0000c044 	.word	0x0000c044
    c3a0:	0000c044 	.word	0x0000c044
    c3a4:	0000c044 	.word	0x0000c044
    c3a8:	0000c044 	.word	0x0000c044
    c3ac:	0000c044 	.word	0x0000c044
    c3b0:	0000c044 	.word	0x0000c044
    c3b4:	0000c044 	.word	0x0000c044
    c3b8:	0000c044 	.word	0x0000c044
    c3bc:	0000c044 	.word	0x0000c044
    c3c0:	0000c044 	.word	0x0000c044
    c3c4:	0000c044 	.word	0x0000c044
    c3c8:	0000c044 	.word	0x0000c044
    c3cc:	0000c044 	.word	0x0000c044
    c3d0:	0000c044 	.word	0x0000c044
    c3d4:	0000c044 	.word	0x0000c044
    c3d8:	0000c044 	.word	0x0000c044
    c3dc:	0000c044 	.word	0x0000c044
    c3e0:	0000c4bc 	.word	0x0000c4bc
    c3e4:	e3a03005 	mov	r3, #5
    c3e8:	e5803030 	str	r3, [r0, #48]	; 0x30
    c3ec:	eaffff16 	b	c04c <CScreenDevice::Write(char)+0x68>
    c3f0:	ebfffeae 	bl	beb0 <CScreenDevice::ClearLineEnd()>
    c3f4:	e3a03000 	mov	r3, #0
    c3f8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c3fc:	eaffff12 	b	c04c <CScreenDevice::Write(char)+0x68>
    c400:	ebfffed7 	bl	bf64 <CScreenDevice::ClearDisplayEnd()>
    c404:	e3a03000 	mov	r3, #0
    c408:	e5843030 	str	r3, [r4, #48]	; 0x30
    c40c:	eaffff0e 	b	c04c <CScreenDevice::Write(char)+0x68>
    c410:	e3a03004 	mov	r3, #4
    c414:	e5803030 	str	r3, [r0, #48]	; 0x30
    c418:	eaffff0b 	b	c04c <CScreenDevice::Write(char)+0x68>
    c41c:	e5902034 	ldr	r2, [r0, #52]	; 0x34
    c420:	e3a03000 	mov	r3, #0
    c424:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c428:	e5802040 	str	r2, [r0, #64]	; 0x40
    c42c:	e5803030 	str	r3, [r0, #48]	; 0x30
    c430:	eaffff05 	b	c04c <CScreenDevice::Write(char)+0x68>
    c434:	ebfffe23 	bl	bcc8 <CScreenDevice::CursorRight()>
    c438:	e3a03000 	mov	r3, #0
    c43c:	e5843030 	str	r3, [r4, #48]	; 0x30
    c440:	eaffff01 	b	c04c <CScreenDevice::Write(char)+0x68>
    c444:	ebfffe09 	bl	bc70 <CScreenDevice::CursorDown()>
    c448:	e3a03000 	mov	r3, #0
    c44c:	e5843030 	str	r3, [r4, #48]	; 0x30
    c450:	eafffefd 	b	c04c <CScreenDevice::Write(char)+0x68>
    c454:	e6ef3071 	uxtb	r3, r1
    c458:	e353001f 	cmp	r3, #31
    c45c:	9afffefa 	bls	c04c <CScreenDevice::Write(char)+0x68>
    c460:	e5d0c048 	ldrb	ip, [r0, #72]	; 0x48
    c464:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c468:	e590203c 	ldr	r2, [r0, #60]	; 0x3c
    c46c:	e58dc000 	str	ip, [sp]
    c470:	ebfffe35 	bl	bd4c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c474:	e1a00004 	mov	r0, r4
    c478:	e28dd008 	add	sp, sp, #8
    c47c:	e8bd4010 	pop	{r4, lr}
    c480:	eafffe10 	b	bcc8 <CScreenDevice::CursorRight()>
    c484:	e2411030 	sub	r1, r1, #48	; 0x30
    c488:	e6ef3071 	uxtb	r3, r1
    c48c:	e3530009 	cmp	r3, #9
    c490:	8afffeeb 	bhi	c044 <CScreenDevice::Write(char)+0x60>
    c494:	e3a03003 	mov	r3, #3
    c498:	e5801050 	str	r1, [r0, #80]	; 0x50
    c49c:	e5803030 	str	r3, [r0, #48]	; 0x30
    c4a0:	eafffee9 	b	c04c <CScreenDevice::Write(char)+0x68>
    c4a4:	e3a03003 	mov	r3, #3
    c4a8:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c4ac:	eafffee4 	b	c044 <CScreenDevice::Write(char)+0x60>
    c4b0:	e3a03002 	mov	r3, #2
    c4b4:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c4b8:	eafffee1 	b	c044 <CScreenDevice::Write(char)+0x60>
    c4bc:	e3a03001 	mov	r3, #1
    c4c0:	e5c03048 	strb	r3, [r0, #72]	; 0x48
    c4c4:	eafffede 	b	c044 <CScreenDevice::Write(char)+0x60>
    c4c8:	e5902054 	ldr	r2, [r0, #84]	; 0x54
    c4cc:	e5901050 	ldr	r1, [r0, #80]	; 0x50
    c4d0:	ebfffd4d 	bl	ba0c <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c4d4:	e3a03000 	mov	r3, #0
    c4d8:	e5843030 	str	r3, [r4, #48]	; 0x30
    c4dc:	eafffeda 	b	c04c <CScreenDevice::Write(char)+0x68>

0000c4e0 <CScreenDevice::Write(void const*, unsigned int)>:
    c4e0:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c4e4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c4e8:	e1a05000 	mov	r5, r0
    c4ec:	e3530000 	cmp	r3, #0
    c4f0:	e1a06001 	mov	r6, r1
    c4f4:	e1a08002 	mov	r8, r2
    c4f8:	1a000026 	bne	c598 <CScreenDevice::Write(void const*, unsigned int)+0xb8>
    c4fc:	e5954044 	ldr	r4, [r5, #68]	; 0x44
    c500:	e3a03001 	mov	r3, #1
    c504:	e5853058 	str	r3, [r5, #88]	; 0x58
    c508:	e3540000 	cmp	r4, #0
    c50c:	1a00001a 	bne	c57c <CScreenDevice::Write(void const*, unsigned int)+0x9c>
    c510:	e3580000 	cmp	r8, #0
    c514:	e2487001 	sub	r7, r8, #1
    c518:	0a00000b 	beq	c54c <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c51c:	e1a04006 	mov	r4, r6
    c520:	e0d410d1 	ldrsb	r1, [r4], #1
    c524:	e1a00005 	mov	r0, r5
    c528:	ebfffead 	bl	bfe4 <CScreenDevice::Write(char)>
    c52c:	e2643001 	rsb	r3, r4, #1
    c530:	e0833007 	add	r3, r3, r7
    c534:	e1760003 	cmn	r6, r3
    c538:	1afffff8 	bne	c520 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c53c:	e2874001 	add	r4, r7, #1
    c540:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    c544:	e3530000 	cmp	r3, #0
    c548:	1a000008 	bne	c570 <CScreenDevice::Write(void const*, unsigned int)+0x90>
    c54c:	e595305c 	ldr	r3, [r5, #92]	; 0x5c
    c550:	e3a02000 	mov	r2, #0
    c554:	e5852058 	str	r2, [r5, #88]	; 0x58
    c558:	e1530002 	cmp	r3, r2
    c55c:	0a000000 	beq	c564 <CScreenDevice::Write(void const*, unsigned int)+0x84>
    c560:	ebfff622 	bl	9df0 <LeaveCritical>
    c564:	f57ff05f 	dmb	sy
    c568:	e1a00004 	mov	r0, r4
    c56c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c570:	e1a00005 	mov	r0, r5
    c574:	ebfffc47 	bl	b698 <CScreenDevice::InvertCursor() [clone .part.6]>
    c578:	eafffff3 	b	c54c <CScreenDevice::Write(void const*, unsigned int)+0x6c>
    c57c:	e1a00005 	mov	r0, r5
    c580:	e2487001 	sub	r7, r8, #1
    c584:	ebfffc43 	bl	b698 <CScreenDevice::InvertCursor() [clone .part.6]>
    c588:	e3580000 	cmp	r8, #0
    c58c:	1affffe2 	bne	c51c <CScreenDevice::Write(void const*, unsigned int)+0x3c>
    c590:	e1a04008 	mov	r4, r8
    c594:	eaffffe9 	b	c540 <CScreenDevice::Write(void const*, unsigned int)+0x60>
    c598:	ebfff607 	bl	9dbc <EnterCritical>
    c59c:	eaffffd6 	b	c4fc <CScreenDevice::Write(void const*, unsigned int)+0x1c>

0000c5a0 <CScreenDevice::Initialize()>:
    c5a0:	e92d4070 	push	{r4, r5, r6, lr}
    c5a4:	e1a04000 	mov	r4, r0
    c5a8:	e590500c 	ldr	r5, [r0, #12]
    c5ac:	e24dd008 	sub	sp, sp, #8
    c5b0:	e3550000 	cmp	r5, #0
    c5b4:	1a00001c 	bne	c62c <CScreenDevice::Initialize()+0x8c>
    c5b8:	e3a00024 	mov	r0, #36	; 0x24
    c5bc:	ebfff5fa 	bl	9dac <operator new(unsigned int)>
    c5c0:	e3a03008 	mov	r3, #8
    c5c4:	e5942008 	ldr	r2, [r4, #8]
    c5c8:	e1a06000 	mov	r6, r0
    c5cc:	e5941004 	ldr	r1, [r4, #4]
    c5d0:	e58d5004 	str	r5, [sp, #4]
    c5d4:	e58d5000 	str	r5, [sp]
    c5d8:	eb0009c9 	bl	ed04 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
    c5dc:	e1a00006 	mov	r0, r6
    c5e0:	e30f2fdf 	movw	r2, #65503	; 0xffdf
    c5e4:	e3a01001 	mov	r1, #1
    c5e8:	e5846010 	str	r6, [r4, #16]
    c5ec:	eb000a18 	bl	ee54 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c5f0:	e3a02b3e 	mov	r2, #63488	; 0xf800
    c5f4:	e3a01002 	mov	r1, #2
    c5f8:	e5940010 	ldr	r0, [r4, #16]
    c5fc:	eb000a14 	bl	ee54 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c600:	e3a0201f 	mov	r2, #31
    c604:	e3a01003 	mov	r1, #3
    c608:	e5940010 	ldr	r0, [r4, #16]
    c60c:	eb000a10 	bl	ee54 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>
    c610:	e5940010 	ldr	r0, [r4, #16]
    c614:	eb000a23 	bl	eea8 <CBcmFrameBuffer::Initialize()>
    c618:	e3500000 	cmp	r0, #0
    c61c:	1a000028 	bne	c6c4 <CScreenDevice::Initialize()+0x124>
    c620:	e1a00005 	mov	r0, r5
    c624:	e28dd008 	add	sp, sp, #8
    c628:	e8bd8070 	pop	{r4, r5, r6, pc}
    c62c:	e5903004 	ldr	r3, [r0, #4]
    c630:	e5900008 	ldr	r0, [r0, #8]
    c634:	e5843024 	str	r3, [r4, #36]	; 0x24
    c638:	e5840028 	str	r0, [r4, #40]	; 0x28
    c63c:	e5843020 	str	r3, [r4, #32]
    c640:	e0000390 	mul	r0, r0, r3
    c644:	e584001c 	str	r0, [r4, #28]
    c648:	ebfff5d8 	bl	9db0 <operator new[](unsigned int)>
    c64c:	e5946028 	ldr	r6, [r4, #40]	; 0x28
    c650:	e5840018 	str	r0, [r4, #24]
    c654:	e2845014 	add	r5, r4, #20
    c658:	e1a00005 	mov	r0, r5
    c65c:	eb000087 	bl	c880 <CCharGenerator::GetCharHeight() const>
    c660:	e736f016 	udiv	r6, r6, r0
    c664:	e1a00005 	mov	r0, r5
    c668:	eb000084 	bl	c880 <CCharGenerator::GetCharHeight() const>
    c66c:	e5943034 	ldr	r3, [r4, #52]	; 0x34
    c670:	e3a02000 	mov	r2, #0
    c674:	e5843040 	str	r3, [r4, #64]	; 0x40
    c678:	e0060690 	mul	r6, r0, r6
    c67c:	e584203c 	str	r2, [r4, #60]	; 0x3c
    c680:	e1a00004 	mov	r0, r4
    c684:	e584602c 	str	r6, [r4, #44]	; 0x2c
    c688:	e5846038 	str	r6, [r4, #56]	; 0x38
    c68c:	ebfffe34 	bl	bf64 <CScreenDevice::ClearDisplayEnd()>
    c690:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c694:	e3530000 	cmp	r3, #0
    c698:	1a000021 	bne	c724 <CScreenDevice::Initialize()+0x184>
    c69c:	eb0001a2 	bl	cd2c <CDeviceNameService::Get()>
    c6a0:	e3a05001 	mov	r5, #1
    c6a4:	e1a02004 	mov	r2, r4
    c6a8:	e3a03000 	mov	r3, #0
    c6ac:	e30f1a34 	movw	r1, #64052	; 0xfa34
    c6b0:	e3401000 	movt	r1, #0
    c6b4:	eb000128 	bl	cb5c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>
    c6b8:	e1a00005 	mov	r0, r5
    c6bc:	e28dd008 	add	sp, sp, #8
    c6c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c6c4:	e5940010 	ldr	r0, [r4, #16]
    c6c8:	eb000a31 	bl	ef94 <CBcmFrameBuffer::GetDepth() const>
    c6cc:	e3500008 	cmp	r0, #8
    c6d0:	1affffd2 	bne	c620 <CScreenDevice::Initialize()+0x80>
    c6d4:	e5940010 	ldr	r0, [r4, #16]
    c6d8:	eb000a2f 	bl	ef9c <CBcmFrameBuffer::GetBuffer() const>
    c6dc:	e5840018 	str	r0, [r4, #24]
    c6e0:	e5940010 	ldr	r0, [r4, #16]
    c6e4:	eb000a2e 	bl	efa4 <CBcmFrameBuffer::GetSize() const>
    c6e8:	e584001c 	str	r0, [r4, #28]
    c6ec:	e5940010 	ldr	r0, [r4, #16]
    c6f0:	eb000a25 	bl	ef8c <CBcmFrameBuffer::GetPitch() const>
    c6f4:	e5840020 	str	r0, [r4, #32]
    c6f8:	e5940010 	ldr	r0, [r4, #16]
    c6fc:	eb000a1a 	bl	ef6c <CBcmFrameBuffer::GetWidth() const>
    c700:	e5840024 	str	r0, [r4, #36]	; 0x24
    c704:	e5940010 	ldr	r0, [r4, #16]
    c708:	eb000a19 	bl	ef74 <CBcmFrameBuffer::GetHeight() const>
    c70c:	e5943020 	ldr	r3, [r4, #32]
    c710:	e1a06000 	mov	r6, r0
    c714:	e5840028 	str	r0, [r4, #40]	; 0x28
    c718:	e3130003 	tst	r3, #3
    c71c:	0affffcc 	beq	c654 <CScreenDevice::Initialize()+0xb4>
    c720:	eaffffbe 	b	c620 <CScreenDevice::Initialize()+0x80>
    c724:	e1a00004 	mov	r0, r4
    c728:	ebfffbda 	bl	b698 <CScreenDevice::InvertCursor() [clone .part.6]>
    c72c:	eaffffda 	b	c69c <CScreenDevice::Initialize()+0xfc>

0000c730 <CScreenDevice::InvertCursor()>:
    c730:	e5903044 	ldr	r3, [r0, #68]	; 0x44
    c734:	e3530000 	cmp	r3, #0
    c738:	012fff1e 	bxeq	lr
    c73c:	eafffbd5 	b	b698 <CScreenDevice::InvertCursor() [clone .part.6]>

0000c740 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char)>:
    c740:	e590c024 	ldr	ip, [r0, #36]	; 0x24
    c744:	e15c0001 	cmp	ip, r1
    c748:	912fff1e 	bxls	lr
    c74c:	eafffbca 	b	b67c <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned char) [clone .part.2]>

0000c750 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c750:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c754:	e1530001 	cmp	r3, r1
    c758:	9a000007 	bls	c77c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c75c:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    c760:	e1530002 	cmp	r3, r2
    c764:	9a000004 	bls	c77c <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x2c>
    c768:	e590c020 	ldr	ip, [r0, #32]
    c76c:	e5903018 	ldr	r3, [r0, #24]
    c770:	e022329c 	mla	r2, ip, r2, r3
    c774:	e7d20001 	ldrb	r0, [r2, r1]
    c778:	e12fff1e 	bx	lr
    c77c:	e3a00000 	mov	r0, #0
    c780:	e12fff1e 	bx	lr

0000c784 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c784:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c788:	e1a05000 	mov	r5, r0
    c78c:	e1a04001 	mov	r4, r1
    c790:	e24dd00c 	sub	sp, sp, #12
    c794:	e1a06002 	mov	r6, r2
    c798:	e2800014 	add	r0, r0, #20
    c79c:	e2044003 	and	r4, r4, #3
    c7a0:	e5957024 	ldr	r7, [r5, #36]	; 0x24
    c7a4:	eb000033 	bl	c878 <CCharGenerator::GetCharWidth() const>
    c7a8:	e2061003 	and	r1, r6, #3
    c7ac:	e30f3ad8 	movw	r3, #64216	; 0xfad8
    c7b0:	e3403000 	movt	r3, #0
    c7b4:	e0831001 	add	r1, r3, r1
    c7b8:	e0240094 	mla	r4, r4, r0, r0
    c7bc:	e3a02002 	mov	r2, #2
    c7c0:	e3a03000 	mov	r3, #0
    c7c4:	e58d2000 	str	r2, [sp]
    c7c8:	e1a00005 	mov	r0, r5
    c7cc:	e1d111dc 	ldrsb	r1, [r1, #28]
    c7d0:	e0472004 	sub	r2, r7, r4
    c7d4:	ebfffd5c 	bl	bd4c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned char)>
    c7d8:	e28dd00c 	add	sp, sp, #12
    c7dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c7e0 <assertion_failed>:
    c7e0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c7e4:	e1a05000 	mov	r5, r0
    c7e8:	e1a06001 	mov	r6, r1
    c7ec:	e24dd01c 	sub	sp, sp, #28
    c7f0:	e1a07002 	mov	r7, r2
    c7f4:	e1a0400d 	mov	r4, sp
    c7f8:	e28d0008 	add	r0, sp, #8
    c7fc:	eb0002a3 	bl	d290 <CString::CString()>
    c800:	e1a03007 	mov	r3, r7
    c804:	e1a02006 	mov	r2, r6
    c808:	e28d0008 	add	r0, sp, #8
    c80c:	e30f1afc 	movw	r1, #64252	; 0xfafc
    c810:	e3401000 	movt	r1, #0
    c814:	eb0005b0 	bl	dedc <CString::Format(char const*, ...)>
    c818:	e28d0008 	add	r0, sp, #8
    c81c:	eb0002b1 	bl	d2e8 <CString::operator char const*() const>
    c820:	e1a01000 	mov	r1, r0
    c824:	e1a00004 	mov	r0, r4
    c828:	eb00007b 	bl	ca1c <debug_stacktrace(unsigned int const*, char const*)>
    c82c:	eb00016a 	bl	cddc <CLogger::Get()>
    c830:	e1a04000 	mov	r4, r0
    c834:	e28d0008 	add	r0, sp, #8
    c838:	eb0002aa 	bl	d2e8 <CString::operator char const*() const>
    c83c:	e3a02000 	mov	r2, #0
    c840:	e1a01000 	mov	r1, r0
    c844:	e58d5000 	str	r5, [sp]
    c848:	e1a00004 	mov	r0, r4
    c84c:	e30f3b04 	movw	r3, #64260	; 0xfb04
    c850:	e3403000 	movt	r3, #0
    c854:	eb00023d 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c858:	e28d0008 	add	r0, sp, #8
    c85c:	eb000259 	bl	d1c8 <CString::~CString()>
    c860:	e28dd01c 	add	sp, sp, #28
    c864:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c868 <CCharGenerator::CCharGenerator()>:
    c868:	e3a03008 	mov	r3, #8
    c86c:	e5803000 	str	r3, [r0]
    c870:	e12fff1e 	bx	lr

0000c874 <CCharGenerator::~CCharGenerator()>:
    c874:	e12fff1e 	bx	lr

0000c878 <CCharGenerator::GetCharWidth() const>:
    c878:	e5900000 	ldr	r0, [r0]
    c87c:	e12fff1e 	bx	lr

0000c880 <CCharGenerator::GetCharHeight() const>:
    c880:	e3a00013 	mov	r0, #19
    c884:	e12fff1e 	bx	lr

0000c888 <CCharGenerator::GetUnderline() const>:
    c888:	e3a00010 	mov	r0, #16
    c88c:	e12fff1e 	bx	lr

0000c890 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
    c890:	e6ef1071 	uxtb	r1, r1
    c894:	e92d4070 	push	{r4, r5, r6, lr}
    c898:	e2414021 	sub	r4, r1, #33	; 0x21
    c89c:	e35400de 	cmp	r4, #222	; 0xde
    c8a0:	8a00000f 	bhi	c8e4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c8a4:	e1a06003 	mov	r6, r3
    c8a8:	e5903000 	ldr	r3, [r0]
    c8ac:	e1a05002 	mov	r5, r2
    c8b0:	e1530002 	cmp	r3, r2
    c8b4:	9a00000c 	bls	c8ec <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x5c>
    c8b8:	e356000f 	cmp	r6, #15
    c8bc:	8a000008 	bhi	c8e4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>
    c8c0:	e30f1b1c 	movw	r1, #64284	; 0xfb1c
    c8c4:	e3401000 	movt	r1, #0
    c8c8:	e3a02080 	mov	r2, #128	; 0x80
    c8cc:	e0811204 	add	r1, r1, r4, lsl #4
    c8d0:	e7d13006 	ldrb	r3, [r1, r6]
    c8d4:	e0133552 	ands	r3, r3, r2, asr r5
    c8d8:	13a00001 	movne	r0, #1
    c8dc:	03a00000 	moveq	r0, #0
    c8e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    c8e4:	e3a00000 	mov	r0, #0
    c8e8:	e8bd8070 	pop	{r4, r5, r6, pc}
    c8ec:	e300190c 	movw	r1, #2316	; 0x90c
    c8f0:	e3401001 	movt	r1, #1
    c8f4:	e3000920 	movw	r0, #2336	; 0x920
    c8f8:	e3400001 	movt	r0, #1
    c8fc:	e3a02050 	mov	r2, #80	; 0x50
    c900:	ebffffb6 	bl	c7e0 <assertion_failed>
    c904:	e356000f 	cmp	r6, #15
    c908:	9affffec 	bls	c8c0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x30>
    c90c:	eafffff4 	b	c8e4 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x54>

0000c910 <debug_hexdump(void const*, unsigned int, char const*)>:
    c910:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c914:	e3520000 	cmp	r2, #0
    c918:	e1a05001 	mov	r5, r1
    c91c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    c920:	e1a04000 	mov	r4, r0
    c924:	e3007938 	movw	r7, #2360	; 0x938
    c928:	e3407001 	movt	r7, #1
    c92c:	11a07002 	movne	r7, r2
    c930:	eb000129 	bl	cddc <CLogger::Get()>
    c934:	e58d4004 	str	r4, [sp, #4]
    c938:	e1a01007 	mov	r1, r7
    c93c:	e58d5000 	str	r5, [sp]
    c940:	e3003940 	movw	r3, #2368	; 0x940
    c944:	e3403001 	movt	r3, #1
    c948:	e3a02004 	mov	r2, #4
    c94c:	eb0001ff 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c950:	e3550000 	cmp	r5, #0
    c954:	0a00002a 	beq	ca04 <debug_hexdump(void const*, unsigned int, char const*)+0xf4>
    c958:	e3008964 	movw	r8, #2404	; 0x964
    c95c:	e3408001 	movt	r8, #1
    c960:	eb00011d 	bl	cddc <CLogger::Get()>
    c964:	e5d4e00f 	ldrb	lr, [r4, #15]
    c968:	e5d4b00e 	ldrb	fp, [r4, #14]
    c96c:	e6ffc074 	uxth	ip, r4
    c970:	e5d4a00d 	ldrb	sl, [r4, #13]
    c974:	e1a03008 	mov	r3, r8
    c978:	e5d4900c 	ldrb	r9, [r4, #12]
    c97c:	e3a02004 	mov	r2, #4
    c980:	e5d4600b 	ldrb	r6, [r4, #11]
    c984:	e1a01007 	mov	r1, r7
    c988:	e58de040 	str	lr, [sp, #64]	; 0x40
    c98c:	e2844010 	add	r4, r4, #16
    c990:	e554e006 	ldrb	lr, [r4, #-6]
    c994:	e58db03c 	str	fp, [sp, #60]	; 0x3c
    c998:	e554b007 	ldrb	fp, [r4, #-7]
    c99c:	e58da038 	str	sl, [sp, #56]	; 0x38
    c9a0:	e554a008 	ldrb	sl, [r4, #-8]
    c9a4:	e58d9034 	str	r9, [sp, #52]	; 0x34
    c9a8:	e5549009 	ldrb	r9, [r4, #-9]
    c9ac:	e58d6030 	str	r6, [sp, #48]	; 0x30
    c9b0:	e554600a 	ldrb	r6, [r4, #-10]
    c9b4:	e58de02c 	str	lr, [sp, #44]	; 0x2c
    c9b8:	e554e00b 	ldrb	lr, [r4, #-11]
    c9bc:	e58db028 	str	fp, [sp, #40]	; 0x28
    c9c0:	e554b00c 	ldrb	fp, [r4, #-12]
    c9c4:	e58da024 	str	sl, [sp, #36]	; 0x24
    c9c8:	e554a00d 	ldrb	sl, [r4, #-13]
    c9cc:	e58d9020 	str	r9, [sp, #32]
    c9d0:	e554900e 	ldrb	r9, [r4, #-14]
    c9d4:	e58d601c 	str	r6, [sp, #28]
    c9d8:	e554600f 	ldrb	r6, [r4, #-15]
    c9dc:	e58de018 	str	lr, [sp, #24]
    c9e0:	e554e010 	ldrb	lr, [r4, #-16]
    c9e4:	e58db014 	str	fp, [sp, #20]
    c9e8:	e58da010 	str	sl, [sp, #16]
    c9ec:	e58d900c 	str	r9, [sp, #12]
    c9f0:	e58d6008 	str	r6, [sp, #8]
    c9f4:	e88d5000 	stm	sp, {ip, lr}
    c9f8:	eb0001d4 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c9fc:	e355000f 	cmp	r5, #15
    ca00:	8a000001 	bhi	ca0c <debug_hexdump(void const*, unsigned int, char const*)+0xfc>
    ca04:	e28dd04c 	add	sp, sp, #76	; 0x4c
    ca08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ca0c:	e2555010 	subs	r5, r5, #16
    ca10:	1affffd2 	bne	c960 <debug_hexdump(void const*, unsigned int, char const*)+0x50>
    ca14:	e28dd04c 	add	sp, sp, #76	; 0x4c
    ca18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ca1c <debug_stacktrace(unsigned int const*, char const*)>:
    ca1c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ca20:	e3510000 	cmp	r1, #0
    ca24:	e3007938 	movw	r7, #2360	; 0x938
    ca28:	e3407001 	movt	r7, #1
    ca2c:	11a07001 	movne	r7, r1
    ca30:	e30f6078 	movw	r6, #61560	; 0xf078
    ca34:	e3406000 	movt	r6, #0
    ca38:	e30089bc 	movw	r8, #2492	; 0x9bc
    ca3c:	e3408001 	movt	r8, #1
    ca40:	e24dd008 	sub	sp, sp, #8
    ca44:	e1a05000 	mov	r5, r0
    ca48:	e3a04000 	mov	r4, #0
    ca4c:	ea000003 	b	ca60 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    ca50:	e2844001 	add	r4, r4, #1
    ca54:	e2855004 	add	r5, r5, #4
    ca58:	e3540040 	cmp	r4, #64	; 0x40
    ca5c:	0a000010 	beq	caa4 <debug_stacktrace(unsigned int const*, char const*)+0x88>
    ca60:	e5953000 	ldr	r3, [r5]
    ca64:	e3530902 	cmp	r3, #32768	; 0x8000
    ca68:	3afffff8 	bcc	ca50 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    ca6c:	e1530006 	cmp	r3, r6
    ca70:	2afffff6 	bcs	ca50 <debug_stacktrace(unsigned int const*, char const*)+0x34>
    ca74:	eb0000d8 	bl	cddc <CLogger::Get()>
    ca78:	e5952000 	ldr	r2, [r5]
    ca7c:	e1a03008 	mov	r3, r8
    ca80:	e58d4000 	str	r4, [sp]
    ca84:	e58d2004 	str	r2, [sp, #4]
    ca88:	e1a01007 	mov	r1, r7
    ca8c:	e3a02004 	mov	r2, #4
    ca90:	e2844001 	add	r4, r4, #1
    ca94:	eb0001ad 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ca98:	e3540040 	cmp	r4, #64	; 0x40
    ca9c:	e2855004 	add	r5, r5, #4
    caa0:	1affffee 	bne	ca60 <debug_stacktrace(unsigned int const*, char const*)+0x44>
    caa4:	e28dd008 	add	sp, sp, #8
    caa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000caac <CDeviceNameService::CDeviceNameService()>:
    caac:	e92d4070 	push	{r4, r5, r6, lr}
    cab0:	e3015b90 	movw	r5, #7056	; 0x1b90
    cab4:	e3405001 	movt	r5, #1
    cab8:	e3a03000 	mov	r3, #0
    cabc:	e1a04000 	mov	r4, r0
    cac0:	e5803004 	str	r3, [r0, #4]
    cac4:	e5952000 	ldr	r2, [r5]
    cac8:	e5803000 	str	r3, [r0]
    cacc:	e1520003 	cmp	r2, r3
    cad0:	0a000005 	beq	caec <CDeviceNameService::CDeviceNameService()+0x40>
    cad4:	e30019d0 	movw	r1, #2512	; 0x9d0
    cad8:	e3401001 	movt	r1, #1
    cadc:	e30009e8 	movw	r0, #2536	; 0x9e8
    cae0:	e3400001 	movt	r0, #1
    cae4:	e3a02020 	mov	r2, #32
    cae8:	ebffff3c 	bl	c7e0 <assertion_failed>
    caec:	e5854000 	str	r4, [r5]
    caf0:	e1a00004 	mov	r0, r4
    caf4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000caf8 <CDeviceNameService::~CDeviceNameService()>:
    caf8:	e5903000 	ldr	r3, [r0]
    cafc:	e92d4070 	push	{r4, r5, r6, lr}
    cb00:	e1a05000 	mov	r5, r0
    cb04:	e3530000 	cmp	r3, #0
    cb08:	0a00000d 	beq	cb44 <CDeviceNameService::~CDeviceNameService()+0x4c>
    cb0c:	e3a06000 	mov	r6, #0
    cb10:	e5930004 	ldr	r0, [r3, #4]
    cb14:	e5934000 	ldr	r4, [r3]
    cb18:	e3500000 	cmp	r0, #0
    cb1c:	0a000000 	beq	cb24 <CDeviceNameService::~CDeviceNameService()+0x2c>
    cb20:	ebfff4a4 	bl	9db8 <operator delete[](void*)>
    cb24:	e5953000 	ldr	r3, [r5]
    cb28:	e1a00003 	mov	r0, r3
    cb2c:	e5836004 	str	r6, [r3, #4]
    cb30:	e5836008 	str	r6, [r3, #8]
    cb34:	ebfff49e 	bl	9db4 <operator delete(void*)>
    cb38:	e2543000 	subs	r3, r4, #0
    cb3c:	e5854000 	str	r4, [r5]
    cb40:	1afffff2 	bne	cb10 <CDeviceNameService::~CDeviceNameService()+0x18>
    cb44:	e3013b90 	movw	r3, #7056	; 0x1b90
    cb48:	e3403001 	movt	r3, #1
    cb4c:	e3a02000 	mov	r2, #0
    cb50:	e1a00005 	mov	r0, r5
    cb54:	e5832000 	str	r2, [r3]
    cb58:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cb5c <CDeviceNameService::AddDevice(char const*, CDevice*, int)>:
    cb5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cb60:	e1a08003 	mov	r8, r3
    cb64:	e5903004 	ldr	r3, [r0, #4]
    cb68:	e1a05000 	mov	r5, r0
    cb6c:	e1a06001 	mov	r6, r1
    cb70:	e3530000 	cmp	r3, #0
    cb74:	e1a07002 	mov	r7, r2
    cb78:	1a000017 	bne	cbdc <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x80>
    cb7c:	e3a00010 	mov	r0, #16
    cb80:	ebfff489 	bl	9dac <operator new(unsigned int)>
    cb84:	e3560000 	cmp	r6, #0
    cb88:	e1a04000 	mov	r4, r0
    cb8c:	0a00001b 	beq	cc00 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0xa4>
    cb90:	e1a00006 	mov	r0, r6
    cb94:	ebfff7b8 	bl	aa7c <strlen>
    cb98:	e2800001 	add	r0, r0, #1
    cb9c:	ebfff483 	bl	9db0 <operator new[](unsigned int)>
    cba0:	e1a01006 	mov	r1, r6
    cba4:	e5840004 	str	r0, [r4, #4]
    cba8:	ebfff7d8 	bl	ab10 <strcpy>
    cbac:	e3570000 	cmp	r7, #0
    cbb0:	0a00000b 	beq	cbe4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x88>
    cbb4:	e5952004 	ldr	r2, [r5, #4]
    cbb8:	e5953000 	ldr	r3, [r5]
    cbbc:	e3520000 	cmp	r2, #0
    cbc0:	e5847008 	str	r7, [r4, #8]
    cbc4:	e584800c 	str	r8, [r4, #12]
    cbc8:	e5843000 	str	r3, [r4]
    cbcc:	e5854000 	str	r4, [r5]
    cbd0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    cbd4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    cbd8:	eafff484 	b	9df0 <LeaveCritical>
    cbdc:	ebfff476 	bl	9dbc <EnterCritical>
    cbe0:	eaffffe5 	b	cb7c <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x20>
    cbe4:	e30019d0 	movw	r1, #2512	; 0x9d0
    cbe8:	e3401001 	movt	r1, #1
    cbec:	e3000a00 	movw	r0, #2560	; 0xa00
    cbf0:	e3400001 	movt	r0, #1
    cbf4:	e3a02041 	mov	r2, #65	; 0x41
    cbf8:	ebfffef8 	bl	c7e0 <assertion_failed>
    cbfc:	eaffffec 	b	cbb4 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x58>
    cc00:	e30019d0 	movw	r1, #2512	; 0x9d0
    cc04:	e3401001 	movt	r1, #1
    cc08:	e30009f4 	movw	r0, #2548	; 0x9f4
    cc0c:	e3400001 	movt	r0, #1
    cc10:	e3a0203c 	mov	r2, #60	; 0x3c
    cc14:	ebfffef1 	bl	c7e0 <assertion_failed>
    cc18:	eaffffdc 	b	cb90 <CDeviceNameService::AddDevice(char const*, CDevice*, int)+0x34>

0000cc1c <CDeviceNameService::GetDevice(char const*, int)>:
    cc1c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cc20:	e2515000 	subs	r5, r1, #0
    cc24:	e1a07000 	mov	r7, r0
    cc28:	e1a06002 	mov	r6, r2
    cc2c:	0a000037 	beq	cd10 <CDeviceNameService::GetDevice(char const*, int)+0xf4>
    cc30:	e5973004 	ldr	r3, [r7, #4]
    cc34:	e3530000 	cmp	r3, #0
    cc38:	1a00001a 	bne	cca8 <CDeviceNameService::GetDevice(char const*, int)+0x8c>
    cc3c:	e5974000 	ldr	r4, [r7]
    cc40:	e3540000 	cmp	r4, #0
    cc44:	0a00001f 	beq	ccc8 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    cc48:	e30099d0 	movw	r9, #2512	; 0x9d0
    cc4c:	e3409001 	movt	r9, #1
    cc50:	e3008a10 	movw	r8, #2576	; 0xa10
    cc54:	e3408001 	movt	r8, #1
    cc58:	ea000009 	b	cc84 <CDeviceNameService::GetDevice(char const*, int)+0x68>
    cc5c:	e1a00005 	mov	r0, r5
    cc60:	ebfff78f 	bl	aaa4 <strcmp>
    cc64:	e3500000 	cmp	r0, #0
    cc68:	1a000002 	bne	cc78 <CDeviceNameService::GetDevice(char const*, int)+0x5c>
    cc6c:	e594300c 	ldr	r3, [r4, #12]
    cc70:	e1530006 	cmp	r3, r6
    cc74:	0a000016 	beq	ccd4 <CDeviceNameService::GetDevice(char const*, int)+0xb8>
    cc78:	e5944000 	ldr	r4, [r4]
    cc7c:	e3540000 	cmp	r4, #0
    cc80:	0a00000c 	beq	ccb8 <CDeviceNameService::GetDevice(char const*, int)+0x9c>
    cc84:	e5941004 	ldr	r1, [r4, #4]
    cc88:	e3510000 	cmp	r1, #0
    cc8c:	1afffff2 	bne	cc5c <CDeviceNameService::GetDevice(char const*, int)+0x40>
    cc90:	e1a01009 	mov	r1, r9
    cc94:	e3a02055 	mov	r2, #85	; 0x55
    cc98:	e1a00008 	mov	r0, r8
    cc9c:	ebfffecf 	bl	c7e0 <assertion_failed>
    cca0:	e5941004 	ldr	r1, [r4, #4]
    cca4:	eaffffec 	b	cc5c <CDeviceNameService::GetDevice(char const*, int)+0x40>
    cca8:	ebfff443 	bl	9dbc <EnterCritical>
    ccac:	e5974000 	ldr	r4, [r7]
    ccb0:	e3540000 	cmp	r4, #0
    ccb4:	1affffe3 	bne	cc48 <CDeviceNameService::GetDevice(char const*, int)+0x2c>
    ccb8:	e5973004 	ldr	r3, [r7, #4]
    ccbc:	e3530000 	cmp	r3, #0
    ccc0:	0a000000 	beq	ccc8 <CDeviceNameService::GetDevice(char const*, int)+0xac>
    ccc4:	ebfff449 	bl	9df0 <LeaveCritical>
    ccc8:	e3a04000 	mov	r4, #0
    cccc:	e1a00004 	mov	r0, r4
    ccd0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    ccd4:	e5973004 	ldr	r3, [r7, #4]
    ccd8:	e5944008 	ldr	r4, [r4, #8]
    ccdc:	e3530000 	cmp	r3, #0
    cce0:	1a000008 	bne	cd08 <CDeviceNameService::GetDevice(char const*, int)+0xec>
    cce4:	e3540000 	cmp	r4, #0
    cce8:	1afffff7 	bne	cccc <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    ccec:	e30019d0 	movw	r1, #2512	; 0x9d0
    ccf0:	e3401001 	movt	r1, #1
    ccf4:	e3000a24 	movw	r0, #2596	; 0xa24
    ccf8:	e3400001 	movt	r0, #1
    ccfc:	e3a0205d 	mov	r2, #93	; 0x5d
    cd00:	ebfffeb6 	bl	c7e0 <assertion_failed>
    cd04:	eafffff0 	b	cccc <CDeviceNameService::GetDevice(char const*, int)+0xb0>
    cd08:	ebfff438 	bl	9df0 <LeaveCritical>
    cd0c:	eafffff4 	b	cce4 <CDeviceNameService::GetDevice(char const*, int)+0xc8>
    cd10:	e30019d0 	movw	r1, #2512	; 0x9d0
    cd14:	e3401001 	movt	r1, #1
    cd18:	e30009f4 	movw	r0, #2548	; 0x9f4
    cd1c:	e3400001 	movt	r0, #1
    cd20:	e3a0204e 	mov	r2, #78	; 0x4e
    cd24:	ebfffead 	bl	c7e0 <assertion_failed>
    cd28:	eaffffc0 	b	cc30 <CDeviceNameService::GetDevice(char const*, int)+0x14>

0000cd2c <CDeviceNameService::Get()>:
    cd2c:	e92d4010 	push	{r4, lr}
    cd30:	e3014b90 	movw	r4, #7056	; 0x1b90
    cd34:	e3404001 	movt	r4, #1
    cd38:	e5940000 	ldr	r0, [r4]
    cd3c:	e3500000 	cmp	r0, #0
    cd40:	18bd8010 	popne	{r4, pc}
    cd44:	e3a0206b 	mov	r2, #107	; 0x6b
    cd48:	e30019d0 	movw	r1, #2512	; 0x9d0
    cd4c:	e3401001 	movt	r1, #1
    cd50:	e3000a34 	movw	r0, #2612	; 0xa34
    cd54:	e3400001 	movt	r0, #1
    cd58:	ebfffea0 	bl	c7e0 <assertion_failed>
    cd5c:	e5940000 	ldr	r0, [r4]
    cd60:	e8bd8010 	pop	{r4, pc}

0000cd64 <CLogger::CLogger(unsigned int, CTimer*)>:
    cd64:	e92d4010 	push	{r4, lr}
    cd68:	e1a04000 	mov	r4, r0
    cd6c:	e3a03000 	mov	r3, #0
    cd70:	e3a0c001 	mov	ip, #1
    cd74:	e3a00901 	mov	r0, #16384	; 0x4000
    cd78:	e5843008 	str	r3, [r4, #8]
    cd7c:	e584300c 	str	r3, [r4, #12]
    cd80:	e5843010 	str	r3, [r4, #16]
    cd84:	e5843014 	str	r3, [r4, #20]
    cd88:	e8840006 	stm	r4, {r1, r2}
    cd8c:	e584c018 	str	ip, [r4, #24]
    cd90:	ebfff406 	bl	9db0 <operator new[](unsigned int)>
    cd94:	e3013b94 	movw	r3, #7060	; 0x1b94
    cd98:	e3403001 	movt	r3, #1
    cd9c:	e584000c 	str	r0, [r4, #12]
    cda0:	e1a00004 	mov	r0, r4
    cda4:	e5834000 	str	r4, [r3]
    cda8:	e8bd8010 	pop	{r4, pc}

0000cdac <CLogger::~CLogger()>:
    cdac:	e92d4010 	push	{r4, lr}
    cdb0:	e1a04000 	mov	r4, r0
    cdb4:	e590000c 	ldr	r0, [r0, #12]
    cdb8:	e3a02000 	mov	r2, #0
    cdbc:	e3013b94 	movw	r3, #7060	; 0x1b94
    cdc0:	e3403001 	movt	r3, #1
    cdc4:	e1500002 	cmp	r0, r2
    cdc8:	e5832000 	str	r2, [r3]
    cdcc:	0a000000 	beq	cdd4 <CLogger::~CLogger()+0x28>
    cdd0:	ebfff3f8 	bl	9db8 <operator delete[](void*)>
    cdd4:	e1a00004 	mov	r0, r4
    cdd8:	e8bd8010 	pop	{r4, pc}

0000cddc <CLogger::Get()>:
    cddc:	e3013b94 	movw	r3, #7060	; 0x1b94
    cde0:	e3403001 	movt	r3, #1
    cde4:	e5930000 	ldr	r0, [r3]
    cde8:	e12fff1e 	bx	lr

0000cdec <CLogger::Write(char const*)>:
    cdec:	e92d4070 	push	{r4, r5, r6, lr}
    cdf0:	e1a04000 	mov	r4, r0
    cdf4:	e1a00001 	mov	r0, r1
    cdf8:	e1a05001 	mov	r5, r1
    cdfc:	ebfff71e 	bl	aa7c <strlen>
    ce00:	e5943008 	ldr	r3, [r4, #8]
    ce04:	e1a02000 	mov	r2, r0
    ce08:	e1a06000 	mov	r6, r0
    ce0c:	e1a01005 	mov	r1, r5
    ce10:	e1a00003 	mov	r0, r3
    ce14:	e5933000 	ldr	r3, [r3]
    ce18:	e593300c 	ldr	r3, [r3, #12]
    ce1c:	e12fff33 	blx	r3
    ce20:	e5943018 	ldr	r3, [r4, #24]
    ce24:	e3530000 	cmp	r3, #0
    ce28:	1a000017 	bne	ce8c <CLogger::Write(char const*)+0xa0>
    ce2c:	e0850006 	add	r0, r5, r6
    ce30:	e1550000 	cmp	r5, r0
    ce34:	0a00000f 	beq	ce78 <CLogger::Write(char const*)+0x8c>
    ce38:	e0d530d1 	ldrsb	r3, [r5], #1
    ce3c:	e353000d 	cmp	r3, #13
    ce40:	0afffffa 	beq	ce30 <CLogger::Write(char const*)+0x44>
    ce44:	e5941010 	ldr	r1, [r4, #16]
    ce48:	e594c00c 	ldr	ip, [r4, #12]
    ce4c:	e7cc3001 	strb	r3, [ip, r1]
    ce50:	e5943010 	ldr	r3, [r4, #16]
    ce54:	e5941014 	ldr	r1, [r4, #20]
    ce58:	e2833001 	add	r3, r3, #1
    ce5c:	e7ed3053 	ubfx	r3, r3, #0, #14
    ce60:	e1530001 	cmp	r3, r1
    ce64:	e5843010 	str	r3, [r4, #16]
    ce68:	1afffff0 	bne	ce30 <CLogger::Write(char const*)+0x44>
    ce6c:	e2433001 	sub	r3, r3, #1
    ce70:	e7ed3053 	ubfx	r3, r3, #0, #14
    ce74:	e5843010 	str	r3, [r4, #16]
    ce78:	e5943018 	ldr	r3, [r4, #24]
    ce7c:	e3530000 	cmp	r3, #0
    ce80:	08bd8070 	popeq	{r4, r5, r6, pc}
    ce84:	e8bd4070 	pop	{r4, r5, r6, lr}
    ce88:	eafff3d8 	b	9df0 <LeaveCritical>
    ce8c:	ebfff3ca 	bl	9dbc <EnterCritical>
    ce90:	eaffffe5 	b	ce2c <CLogger::Write(char const*)+0x40>

0000ce94 <CLogger::Read(void*, unsigned int)>:
    ce94:	e5903018 	ldr	r3, [r0, #24]
    ce98:	e92d4070 	push	{r4, r5, r6, lr}
    ce9c:	e1a04000 	mov	r4, r0
    cea0:	e3530000 	cmp	r3, #0
    cea4:	e1a05001 	mov	r5, r1
    cea8:	e1a06002 	mov	r6, r2
    ceac:	1a00001b 	bne	cf20 <CLogger::Read(void*, unsigned int)+0x8c>
    ceb0:	e5902010 	ldr	r2, [r0, #16]
    ceb4:	e5903014 	ldr	r3, [r0, #20]
    ceb8:	e1520003 	cmp	r2, r3
    cebc:	0a000020 	beq	cf44 <CLogger::Read(void*, unsigned int)+0xb0>
    cec0:	e1a01005 	mov	r1, r5
    cec4:	e3a05000 	mov	r5, #0
    cec8:	ea00000a 	b	cef8 <CLogger::Read(void*, unsigned int)+0x64>
    cecc:	e594000c 	ldr	r0, [r4, #12]
    ced0:	e2855001 	add	r5, r5, #1
    ced4:	e19030d3 	ldrsb	r3, [r0, r3]
    ced8:	e4c13001 	strb	r3, [r1], #1
    cedc:	e5943014 	ldr	r3, [r4, #20]
    cee0:	e5940010 	ldr	r0, [r4, #16]
    cee4:	e2833001 	add	r3, r3, #1
    cee8:	e7ed3053 	ubfx	r3, r3, #0, #14
    ceec:	e1530000 	cmp	r3, r0
    cef0:	e5843014 	str	r3, [r4, #20]
    cef4:	0a000001 	beq	cf00 <CLogger::Read(void*, unsigned int)+0x6c>
    cef8:	e1550006 	cmp	r5, r6
    cefc:	1afffff2 	bne	cecc <CLogger::Read(void*, unsigned int)+0x38>
    cf00:	e5943018 	ldr	r3, [r4, #24]
    cf04:	e3530000 	cmp	r3, #0
    cf08:	1a000001 	bne	cf14 <CLogger::Read(void*, unsigned int)+0x80>
    cf0c:	e1a00005 	mov	r0, r5
    cf10:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf14:	ebfff3b5 	bl	9df0 <LeaveCritical>
    cf18:	e1a00005 	mov	r0, r5
    cf1c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf20:	ebfff3a5 	bl	9dbc <EnterCritical>
    cf24:	e5942010 	ldr	r2, [r4, #16]
    cf28:	e5943014 	ldr	r3, [r4, #20]
    cf2c:	e1520003 	cmp	r2, r3
    cf30:	1affffe2 	bne	cec0 <CLogger::Read(void*, unsigned int)+0x2c>
    cf34:	e5943018 	ldr	r3, [r4, #24]
    cf38:	e3530000 	cmp	r3, #0
    cf3c:	0a000000 	beq	cf44 <CLogger::Read(void*, unsigned int)+0xb0>
    cf40:	ebfff3aa 	bl	9df0 <LeaveCritical>
    cf44:	e3e05000 	mvn	r5, #0
    cf48:	e1a00005 	mov	r0, r5
    cf4c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000cf50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    cf50:	e590c000 	ldr	ip, [r0]
    cf54:	e152000c 	cmp	r2, ip
    cf58:	812fff1e 	bxhi	lr
    cf5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cf60:	e1a05002 	mov	r5, r2
    cf64:	e1a04000 	mov	r4, r0
    cf68:	e24dd020 	sub	sp, sp, #32
    cf6c:	e1a07003 	mov	r7, r3
    cf70:	e1a0000d 	mov	r0, sp
    cf74:	e1a06001 	mov	r6, r1
    cf78:	eb0000c4 	bl	d290 <CString::CString()>
    cf7c:	e3550000 	cmp	r5, #0
    cf80:	0a000049 	beq	d0ac <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x15c>
    cf84:	e5940004 	ldr	r0, [r4, #4]
    cf88:	e3500000 	cmp	r0, #0
    cf8c:	0a000032 	beq	d05c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x10c>
    cf90:	ebfff44b 	bl	a0c4 <CTimer::GetTimeString()>
    cf94:	e2508000 	subs	r8, r0, #0
    cf98:	0a00000b 	beq	cfcc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x7c>
    cf9c:	eb0000d1 	bl	d2e8 <CString::operator char const*() const>
    cfa0:	e1a01000 	mov	r1, r0
    cfa4:	e1a0000d 	mov	r0, sp
    cfa8:	eb0000e9 	bl	d354 <CString::Append(char const*)>
    cfac:	e1a0000d 	mov	r0, sp
    cfb0:	e3001a48 	movw	r1, #2632	; 0xa48
    cfb4:	e3401001 	movt	r1, #1
    cfb8:	eb0000e5 	bl	d354 <CString::Append(char const*)>
    cfbc:	e5983000 	ldr	r3, [r8]
    cfc0:	e1a00008 	mov	r0, r8
    cfc4:	e5933004 	ldr	r3, [r3, #4]
    cfc8:	e12fff33 	blx	r3
    cfcc:	e1a01006 	mov	r1, r6
    cfd0:	e1a0000d 	mov	r0, sp
    cfd4:	eb0000de 	bl	d354 <CString::Append(char const*)>
    cfd8:	e28d6010 	add	r6, sp, #16
    cfdc:	e1a0000d 	mov	r0, sp
    cfe0:	e3001a4c 	movw	r1, #2636	; 0xa4c
    cfe4:	e3401001 	movt	r1, #1
    cfe8:	eb0000d9 	bl	d354 <CString::Append(char const*)>
    cfec:	e1a00006 	mov	r0, r6
    cff0:	eb0000a6 	bl	d290 <CString::CString()>
    cff4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    cff8:	e1a01007 	mov	r1, r7
    cffc:	e1a00006 	mov	r0, r6
    d000:	eb0001da 	bl	d770 <CString::FormatV(char const*, std::__va_list)>
    d004:	e1a00006 	mov	r0, r6
    d008:	eb0000b6 	bl	d2e8 <CString::operator char const*() const>
    d00c:	e1a01000 	mov	r1, r0
    d010:	e1a0000d 	mov	r0, sp
    d014:	eb0000ce 	bl	d354 <CString::Append(char const*)>
    d018:	e3550000 	cmp	r5, #0
    d01c:	0a00003c 	beq	d114 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1c4>
    d020:	e1a0000d 	mov	r0, sp
    d024:	e3001a58 	movw	r1, #2648	; 0xa58
    d028:	e3401001 	movt	r1, #1
    d02c:	eb0000c8 	bl	d354 <CString::Append(char const*)>
    d030:	e1a0000d 	mov	r0, sp
    d034:	eb0000ab 	bl	d2e8 <CString::operator char const*() const>
    d038:	e1a01000 	mov	r1, r0
    d03c:	e1a00004 	mov	r0, r4
    d040:	ebffff69 	bl	cdec <CLogger::Write(char const*)>
    d044:	e1a00006 	mov	r0, r6
    d048:	eb00005e 	bl	d1c8 <CString::~CString()>
    d04c:	e1a0000d 	mov	r0, sp
    d050:	eb00005c 	bl	d1c8 <CString::~CString()>
    d054:	e28dd020 	add	sp, sp, #32
    d058:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d05c:	e1a01006 	mov	r1, r6
    d060:	e1a0000d 	mov	r0, sp
    d064:	eb0000ba 	bl	d354 <CString::Append(char const*)>
    d068:	e28d6010 	add	r6, sp, #16
    d06c:	e1a0000d 	mov	r0, sp
    d070:	e3001a4c 	movw	r1, #2636	; 0xa4c
    d074:	e3401001 	movt	r1, #1
    d078:	eb0000b5 	bl	d354 <CString::Append(char const*)>
    d07c:	e1a00006 	mov	r0, r6
    d080:	eb000082 	bl	d290 <CString::CString()>
    d084:	e1a01007 	mov	r1, r7
    d088:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d08c:	e1a00006 	mov	r0, r6
    d090:	eb0001b6 	bl	d770 <CString::FormatV(char const*, std::__va_list)>
    d094:	e1a00006 	mov	r0, r6
    d098:	eb000092 	bl	d2e8 <CString::operator char const*() const>
    d09c:	e1a01000 	mov	r1, r0
    d0a0:	e1a0000d 	mov	r0, sp
    d0a4:	eb0000aa 	bl	d354 <CString::Append(char const*)>
    d0a8:	eaffffdc 	b	d020 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xd0>
    d0ac:	e3001a40 	movw	r1, #2624	; 0xa40
    d0b0:	e3401001 	movt	r1, #1
    d0b4:	e1a0000d 	mov	r0, sp
    d0b8:	eb000090 	bl	d300 <CString::operator=(char const*)>
    d0bc:	e5940004 	ldr	r0, [r4, #4]
    d0c0:	e3500000 	cmp	r0, #0
    d0c4:	1affffb1 	bne	cf90 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x40>
    d0c8:	e1a01006 	mov	r1, r6
    d0cc:	e1a0000d 	mov	r0, sp
    d0d0:	eb00009f 	bl	d354 <CString::Append(char const*)>
    d0d4:	e28d6010 	add	r6, sp, #16
    d0d8:	e1a0000d 	mov	r0, sp
    d0dc:	e3001a4c 	movw	r1, #2636	; 0xa4c
    d0e0:	e3401001 	movt	r1, #1
    d0e4:	eb00009a 	bl	d354 <CString::Append(char const*)>
    d0e8:	e1a00006 	mov	r0, r6
    d0ec:	eb000067 	bl	d290 <CString::CString()>
    d0f0:	e1a01007 	mov	r1, r7
    d0f4:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    d0f8:	e1a00006 	mov	r0, r6
    d0fc:	eb00019b 	bl	d770 <CString::FormatV(char const*, std::__va_list)>
    d100:	e1a00006 	mov	r0, r6
    d104:	eb000077 	bl	d2e8 <CString::operator char const*() const>
    d108:	e1a01000 	mov	r1, r0
    d10c:	e1a0000d 	mov	r0, sp
    d110:	eb00008f 	bl	d354 <CString::Append(char const*)>
    d114:	e1a0000d 	mov	r0, sp
    d118:	e3001a50 	movw	r1, #2640	; 0xa50
    d11c:	e3401001 	movt	r1, #1
    d120:	eb00008b 	bl	d354 <CString::Append(char const*)>
    d124:	e1a0000d 	mov	r0, sp
    d128:	e3001a58 	movw	r1, #2648	; 0xa58
    d12c:	e3401001 	movt	r1, #1
    d130:	eb000087 	bl	d354 <CString::Append(char const*)>
    d134:	e1a0000d 	mov	r0, sp
    d138:	eb00006a 	bl	d2e8 <CString::operator char const*() const>
    d13c:	e1a01000 	mov	r1, r0
    d140:	e1a00004 	mov	r0, r4
    d144:	ebffff28 	bl	cdec <CLogger::Write(char const*)>
    d148:	ebffec68 	bl	82f0 <halt>
    d14c:	eaffffbc 	b	d044 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xf4>

0000d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    d150:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    d154:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d158:	e24dd010 	sub	sp, sp, #16
    d15c:	e28dc018 	add	ip, sp, #24
    d160:	e59d3014 	ldr	r3, [sp, #20]
    d164:	e58dc000 	str	ip, [sp]
    d168:	e58dc00c 	str	ip, [sp, #12]
    d16c:	ebffff77 	bl	cf50 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    d170:	e28dd010 	add	sp, sp, #16
    d174:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    d178:	e28dd004 	add	sp, sp, #4
    d17c:	e12fff1e 	bx	lr

0000d180 <CLogger::Initialize(CDevice*)>:
    d180:	e92d4010 	push	{r4, lr}
    d184:	e1a04000 	mov	r4, r0
    d188:	e24dd008 	sub	sp, sp, #8
    d18c:	e5801008 	str	r1, [r0, #8]
    d190:	ebffed7e 	bl	8790 <CMachineInfo::Get()>
    d194:	ebffed0b 	bl	85c8 <CMachineInfo::GetMachineName() const>
    d198:	e3a02003 	mov	r2, #3
    d19c:	e58d0000 	str	r0, [sp]
    d1a0:	e3003a5c 	movw	r3, #2652	; 0xa5c
    d1a4:	e3403001 	movt	r3, #1
    d1a8:	e1a00004 	mov	r0, r4
    d1ac:	e3001a74 	movw	r1, #2676	; 0xa74
    d1b0:	e3401001 	movt	r1, #1
    d1b4:	ebffffe5 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    d1b8:	e3a00001 	mov	r0, #1
    d1bc:	e28dd008 	add	sp, sp, #8
    d1c0:	e8bd8010 	pop	{r4, pc}
    d1c4:	00000000 	andeq	r0, r0, r0

0000d1c8 <CString::~CString()>:
    d1c8:	e92d4010 	push	{r4, lr}
    d1cc:	e1a04000 	mov	r4, r0
    d1d0:	e5900004 	ldr	r0, [r0, #4]
    d1d4:	e59f3014 	ldr	r3, [pc, #20]	; d1f0 <CString::~CString()+0x28>
    d1d8:	e3500000 	cmp	r0, #0
    d1dc:	e5843000 	str	r3, [r4]
    d1e0:	0a000000 	beq	d1e8 <CString::~CString()+0x20>
    d1e4:	ebfff2f3 	bl	9db8 <operator delete[](void*)>
    d1e8:	e1a00004 	mov	r0, r4
    d1ec:	e8bd8010 	pop	{r4, pc}
    d1f0:	00010a84 	.word	0x00010a84

0000d1f4 <CString::~CString()>:
    d1f4:	e92d4010 	push	{r4, lr}
    d1f8:	e1a04000 	mov	r4, r0
    d1fc:	e5900004 	ldr	r0, [r0, #4]
    d200:	e59f301c 	ldr	r3, [pc, #28]	; d224 <CString::~CString()+0x30>
    d204:	e3500000 	cmp	r0, #0
    d208:	e5843000 	str	r3, [r4]
    d20c:	0a000000 	beq	d214 <CString::~CString()+0x20>
    d210:	ebfff2e8 	bl	9db8 <operator delete[](void*)>
    d214:	e1a00004 	mov	r0, r4
    d218:	ebfff2e5 	bl	9db4 <operator delete(void*)>
    d21c:	e1a00004 	mov	r0, r4
    d220:	e8bd8010 	pop	{r4, pc}
    d224:	00010a84 	.word	0x00010a84

0000d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d228:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d22c:	e990002c 	ldmib	r0, {r2, r3, r5}
    d230:	e0455002 	sub	r5, r5, r2
    d234:	e0851001 	add	r1, r5, r1
    d238:	e2812001 	add	r2, r1, #1
    d23c:	e1520003 	cmp	r2, r3
    d240:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    d244:	e1a04000 	mov	r4, r0
    d248:	e2816041 	add	r6, r1, #65	; 0x41
    d24c:	e1a00006 	mov	r0, r6
    d250:	ebfff2d6 	bl	9db0 <operator new[](unsigned int)>
    d254:	e3a02000 	mov	r2, #0
    d258:	e594300c 	ldr	r3, [r4, #12]
    d25c:	e1a07000 	mov	r7, r0
    d260:	e5c32000 	strb	r2, [r3]
    d264:	e5941004 	ldr	r1, [r4, #4]
    d268:	ebfff628 	bl	ab10 <strcpy>
    d26c:	e5940004 	ldr	r0, [r4, #4]
    d270:	e3500000 	cmp	r0, #0
    d274:	0a000000 	beq	d27c <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    d278:	ebfff2ce 	bl	9db8 <operator delete[](void*)>
    d27c:	e0875005 	add	r5, r7, r5
    d280:	e5847004 	str	r7, [r4, #4]
    d284:	e584500c 	str	r5, [r4, #12]
    d288:	e5846008 	str	r6, [r4, #8]
    d28c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d290 <CString::CString()>:
    d290:	e59f100c 	ldr	r1, [pc, #12]	; d2a4 <CString::CString()+0x14>
    d294:	e3a02000 	mov	r2, #0
    d298:	e5802008 	str	r2, [r0, #8]
    d29c:	e8800006 	stm	r0, {r1, r2}
    d2a0:	e12fff1e 	bx	lr
    d2a4:	00010a84 	.word	0x00010a84

0000d2a8 <CString::CString(char const*)>:
    d2a8:	e92d4070 	push	{r4, r5, r6, lr}
    d2ac:	e1a04000 	mov	r4, r0
    d2b0:	e59f302c 	ldr	r3, [pc, #44]	; d2e4 <CString::CString(char const*)+0x3c>
    d2b4:	e1a00001 	mov	r0, r1
    d2b8:	e1a05001 	mov	r5, r1
    d2bc:	e5843000 	str	r3, [r4]
    d2c0:	ebfff5ed 	bl	aa7c <strlen>
    d2c4:	e2800001 	add	r0, r0, #1
    d2c8:	e5840008 	str	r0, [r4, #8]
    d2cc:	ebfff2b7 	bl	9db0 <operator new[](unsigned int)>
    d2d0:	e1a01005 	mov	r1, r5
    d2d4:	e5840004 	str	r0, [r4, #4]
    d2d8:	ebfff60c 	bl	ab10 <strcpy>
    d2dc:	e1a00004 	mov	r0, r4
    d2e0:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2e4:	00010a84 	.word	0x00010a84

0000d2e8 <CString::operator char const*() const>:
    d2e8:	e5900004 	ldr	r0, [r0, #4]
    d2ec:	e30f3838 	movw	r3, #63544	; 0xf838
    d2f0:	e3403000 	movt	r3, #0
    d2f4:	e3500000 	cmp	r0, #0
    d2f8:	01a00003 	moveq	r0, r3
    d2fc:	e12fff1e 	bx	lr

0000d300 <CString::operator=(char const*)>:
    d300:	e92d4070 	push	{r4, r5, r6, lr}
    d304:	e1a04000 	mov	r4, r0
    d308:	e5900004 	ldr	r0, [r0, #4]
    d30c:	e1a05001 	mov	r5, r1
    d310:	e3500000 	cmp	r0, #0
    d314:	0a000000 	beq	d31c <CString::operator=(char const*)+0x1c>
    d318:	ebfff2a6 	bl	9db8 <operator delete[](void*)>
    d31c:	e1a00005 	mov	r0, r5
    d320:	ebfff5d5 	bl	aa7c <strlen>
    d324:	e2800001 	add	r0, r0, #1
    d328:	e5840008 	str	r0, [r4, #8]
    d32c:	ebfff29f 	bl	9db0 <operator new[](unsigned int)>
    d330:	e1a01005 	mov	r1, r5
    d334:	e5840004 	str	r0, [r4, #4]
    d338:	ebfff5f4 	bl	ab10 <strcpy>
    d33c:	e5940004 	ldr	r0, [r4, #4]
    d340:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d344 <CString::GetLength() const>:
    d344:	e5900004 	ldr	r0, [r0, #4]
    d348:	e3500000 	cmp	r0, #0
    d34c:	012fff1e 	bxeq	lr
    d350:	eafff5c9 	b	aa7c <strlen>

0000d354 <CString::Append(char const*)>:
    d354:	e92d4070 	push	{r4, r5, r6, lr}
    d358:	e1a04000 	mov	r4, r0
    d35c:	e5900004 	ldr	r0, [r0, #4]
    d360:	e3a03001 	mov	r3, #1
    d364:	e1a06001 	mov	r6, r1
    d368:	e3500000 	cmp	r0, #0
    d36c:	e5843008 	str	r3, [r4, #8]
    d370:	0a000003 	beq	d384 <CString::Append(char const*)+0x30>
    d374:	ebfff5c0 	bl	aa7c <strlen>
    d378:	e5943008 	ldr	r3, [r4, #8]
    d37c:	e0830000 	add	r0, r3, r0
    d380:	e5840008 	str	r0, [r4, #8]
    d384:	e1a00006 	mov	r0, r6
    d388:	ebfff5bb 	bl	aa7c <strlen>
    d38c:	e5943008 	ldr	r3, [r4, #8]
    d390:	e0800003 	add	r0, r0, r3
    d394:	e5840008 	str	r0, [r4, #8]
    d398:	ebfff284 	bl	9db0 <operator new[](unsigned int)>
    d39c:	e5941004 	ldr	r1, [r4, #4]
    d3a0:	e1a05000 	mov	r5, r0
    d3a4:	e3510000 	cmp	r1, #0
    d3a8:	05c01000 	strbeq	r1, [r0]
    d3ac:	0a000004 	beq	d3c4 <CString::Append(char const*)+0x70>
    d3b0:	ebfff5d6 	bl	ab10 <strcpy>
    d3b4:	e5940004 	ldr	r0, [r4, #4]
    d3b8:	e3500000 	cmp	r0, #0
    d3bc:	0a000000 	beq	d3c4 <CString::Append(char const*)+0x70>
    d3c0:	ebfff27c 	bl	9db8 <operator delete[](void*)>
    d3c4:	e1a01006 	mov	r1, r6
    d3c8:	e1a00005 	mov	r0, r5
    d3cc:	ebfff5ed 	bl	ab88 <strcat>
    d3d0:	e5845004 	str	r5, [r4, #4]
    d3d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d3d8 <CString::Compare(char const*) const>:
    d3d8:	e5900004 	ldr	r0, [r0, #4]
    d3dc:	eafff5b0 	b	aaa4 <strcmp>

0000d3e0 <CString::Find(char) const>:
    d3e0:	e5902004 	ldr	r2, [r0, #4]
    d3e4:	e1d230d0 	ldrsb	r3, [r2]
    d3e8:	e3530000 	cmp	r3, #0
    d3ec:	0a000009 	beq	d418 <CString::Find(char) const+0x38>
    d3f0:	e1510003 	cmp	r1, r3
    d3f4:	e3a00000 	mov	r0, #0
    d3f8:	1a000002 	bne	d408 <CString::Find(char) const+0x28>
    d3fc:	ea000007 	b	d420 <CString::Find(char) const+0x40>
    d400:	e1530001 	cmp	r3, r1
    d404:	012fff1e 	bxeq	lr
    d408:	e1f230d1 	ldrsb	r3, [r2, #1]!
    d40c:	e2800001 	add	r0, r0, #1
    d410:	e3530000 	cmp	r3, #0
    d414:	1afffff9 	bne	d400 <CString::Find(char) const+0x20>
    d418:	e3e00000 	mvn	r0, #0
    d41c:	e12fff1e 	bx	lr
    d420:	e12fff1e 	bx	lr

0000d424 <CString::PutChar(char, unsigned int)>:
    d424:	e92d4070 	push	{r4, r5, r6, lr}
    d428:	e2524000 	subs	r4, r2, #0
    d42c:	08bd8070 	popeq	{r4, r5, r6, pc}
    d430:	e1a06001 	mov	r6, r1
    d434:	e1a01004 	mov	r1, r4
    d438:	e1a05000 	mov	r5, r0
    d43c:	ebffff79 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d440:	e2443001 	sub	r3, r4, #1
    d444:	e595200c 	ldr	r2, [r5, #12]
    d448:	e2433001 	sub	r3, r3, #1
    d44c:	e3730001 	cmn	r3, #1
    d450:	e2820001 	add	r0, r2, #1
    d454:	e585000c 	str	r0, [r5, #12]
    d458:	e5c26000 	strb	r6, [r2]
    d45c:	1afffff8 	bne	d444 <CString::PutChar(char, unsigned int)+0x20>
    d460:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d464 <CString::PutString(char const*)>:
    d464:	e92d4070 	push	{r4, r5, r6, lr}
    d468:	e1a04000 	mov	r4, r0
    d46c:	e1a00001 	mov	r0, r1
    d470:	e1a05001 	mov	r5, r1
    d474:	ebfff580 	bl	aa7c <strlen>
    d478:	e2506000 	subs	r6, r0, #0
    d47c:	0a000002 	beq	d48c <CString::PutString(char const*)+0x28>
    d480:	e1a01006 	mov	r1, r6
    d484:	e1a00004 	mov	r0, r4
    d488:	ebffff66 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d48c:	e1a01005 	mov	r1, r5
    d490:	e594000c 	ldr	r0, [r4, #12]
    d494:	ebfff59d 	bl	ab10 <strcpy>
    d498:	e594100c 	ldr	r1, [r4, #12]
    d49c:	e0811006 	add	r1, r1, r6
    d4a0:	e584100c 	str	r1, [r4, #12]
    d4a4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000d4a8 <CString::ReserveSpace(unsigned int)>:
    d4a8:	e3510000 	cmp	r1, #0
    d4ac:	012fff1e 	bxeq	lr
    d4b0:	eaffff5c 	b	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>

0000d4b4 <CString::ntoa(char*, unsigned long, unsigned int, int)>:
    d4b4:	e1510002 	cmp	r1, r2
    d4b8:	e92d4070 	push	{r4, r5, r6, lr}
    d4bc:	23a0c001 	movcs	ip, #1
    d4c0:	3a000018 	bcc	d528 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x74>
    d4c4:	e00c0c92 	mul	ip, r2, ip
    d4c8:	e734fc11 	udiv	r4, r1, ip
    d4cc:	e1540002 	cmp	r4, r2
    d4d0:	e1a0e004 	mov	lr, r4
    d4d4:	2afffffa 	bcs	d4c4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x10>
    d4d8:	e3530000 	cmp	r3, #0
    d4dc:	e1a05000 	mov	r5, r0
    d4e0:	13a06037 	movne	r6, #55	; 0x37
    d4e4:	03a06057 	moveq	r6, #87	; 0x57
    d4e8:	ea000001 	b	d4f4 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x40>
    d4ec:	e734fc11 	udiv	r4, r1, ip
    d4f0:	e1a0e004 	mov	lr, r4
    d4f4:	e061149c 	mls	r1, ip, r4, r1
    d4f8:	e35e0009 	cmp	lr, #9
    d4fc:	e73cf21c 	udiv	ip, ip, r2
    d500:	e086300e 	add	r3, r6, lr
    d504:	e28ee030 	add	lr, lr, #48	; 0x30
    d508:	e2855001 	add	r5, r5, #1
    d50c:	e6af3073 	sxtb	r3, r3
    d510:	96af307e 	sxtbls	r3, lr
    d514:	e35c0000 	cmp	ip, #0
    d518:	e5453001 	strb	r3, [r5, #-1]
    d51c:	1afffff2 	bne	d4ec <CString::ntoa(char*, unsigned long, unsigned int, int)+0x38>
    d520:	e5c5c000 	strb	ip, [r5]
    d524:	e8bd8070 	pop	{r4, r5, r6, pc}
    d528:	e1a0e001 	mov	lr, r1
    d52c:	e3a0c001 	mov	ip, #1
    d530:	e1a04001 	mov	r4, r1
    d534:	eaffffe7 	b	d4d8 <CString::ntoa(char*, unsigned long, unsigned int, int)+0x24>

0000d538 <CString::ftoa(char*, double, unsigned int)>:
    d538:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d53c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d540:	eddf0b88 	vldr	d16, [pc, #544]	; d768 <CString::ftoa(char*, double, unsigned int)+0x230>
    d544:	ed2d8b02 	vpush	{d8}
    d548:	eeb08b40 	vmov.f64	d8, d0
    d54c:	e24dd010 	sub	sp, sp, #16
    d550:	e1a05000 	mov	r5, r0
    d554:	e1a06001 	mov	r6, r1
    d558:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d55c:	4eb18b40 	vnegmi.f64	d8, d0
    d560:	43a0302d 	movmi	r3, #45	; 0x2d
    d564:	45c03000 	strbmi	r3, [r0]
    d568:	42807001 	addmi	r7, r0, #1
    d56c:	51a07000 	movpl	r7, r0
    d570:	eeb48be0 	vcmpe.f64	d8, d16
    d574:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d578:	ca000068 	bgt	d720 <CString::ftoa(char*, double, unsigned int)+0x1e8>
    d57c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d580:	ee174a90 	vmov	r4, s15
    d584:	e3540009 	cmp	r4, #9
    d588:	83a03001 	movhi	r3, #1
    d58c:	83a0100a 	movhi	r1, #10
    d590:	9a00006a 	bls	d740 <CString::ftoa(char*, double, unsigned int)+0x208>
    d594:	e0030391 	mul	r3, r1, r3
    d598:	e732f314 	udiv	r2, r4, r3
    d59c:	e3520009 	cmp	r2, #9
    d5a0:	8afffffb 	bhi	d594 <CString::ftoa(char*, double, unsigned int)+0x5c>
    d5a4:	e30c8ccd 	movw	r8, #52429	; 0xcccd
    d5a8:	e34c8ccc 	movt	r8, #52428	; 0xcccc
    d5ac:	e1a0c007 	mov	ip, r7
    d5b0:	e1a01004 	mov	r1, r4
    d5b4:	e73ef314 	udiv	lr, r4, r3
    d5b8:	ea000001 	b	d5c4 <CString::ftoa(char*, double, unsigned int)+0x8c>
    d5bc:	e73ef311 	udiv	lr, r1, r3
    d5c0:	e1a0200e 	mov	r2, lr
    d5c4:	e3520009 	cmp	r2, #9
    d5c8:	e2820057 	add	r0, r2, #87	; 0x57
    d5cc:	e2822030 	add	r2, r2, #48	; 0x30
    d5d0:	e0611e93 	mls	r1, r3, lr, r1
    d5d4:	e6af0070 	sxtb	r0, r0
    d5d8:	e28cc001 	add	ip, ip, #1
    d5dc:	96af0072 	sxtbls	r0, r2
    d5e0:	e0832398 	umull	r2, r3, r8, r3
    d5e4:	e1b031a3 	lsrs	r3, r3, #3
    d5e8:	e54c0001 	strb	r0, [ip, #-1]
    d5ec:	1afffff2 	bne	d5bc <CString::ftoa(char*, double, unsigned int)+0x84>
    d5f0:	e3560000 	cmp	r6, #0
    d5f4:	e5cc3000 	strb	r3, [ip]
    d5f8:	1a000003 	bne	d60c <CString::ftoa(char*, double, unsigned int)+0xd4>
    d5fc:	e1a00005 	mov	r0, r5
    d600:	e28dd010 	add	sp, sp, #16
    d604:	ecbd8b02 	vpop	{d8}
    d608:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d60c:	e1a00007 	mov	r0, r7
    d610:	ebfff519 	bl	aa7c <strlen>
    d614:	e3560009 	cmp	r6, #9
    d618:	23a06009 	movcs	r6, #9
    d61c:	e3a0302e 	mov	r3, #46	; 0x2e
    d620:	e3560001 	cmp	r6, #1
    d624:	e0878000 	add	r8, r7, r0
    d628:	e7c73000 	strb	r3, [r7, r0]
    d62c:	e2887001 	add	r7, r8, #1
    d630:	0a000049 	beq	d75c <CString::ftoa(char*, double, unsigned int)+0x224>
    d634:	e3a0200a 	mov	r2, #10
    d638:	e3a03002 	mov	r3, #2
    d63c:	e1a01002 	mov	r1, r2
    d640:	e2833001 	add	r3, r3, #1
    d644:	e0020291 	mul	r2, r1, r2
    d648:	e1530006 	cmp	r3, r6
    d64c:	9afffffb 	bls	d640 <CString::ftoa(char*, double, unsigned int)+0x108>
    d650:	ee072a90 	vmov	s15, r2
    d654:	eef81b67 	vcvt.f64.u32	d17, s15
    d658:	ee074a90 	vmov	s15, r4
    d65c:	eef80b67 	vcvt.f64.u32	d16, s15
    d660:	ee388b60 	vsub.f64	d8, d8, d16
    d664:	ee288b21 	vmul.f64	d8, d8, d17
    d668:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d66c:	ee17ca90 	vmov	ip, s15
    d670:	e35c0009 	cmp	ip, #9
    d674:	83a03001 	movhi	r3, #1
    d678:	83a0000a 	movhi	r0, #10
    d67c:	9a000032 	bls	d74c <CString::ftoa(char*, double, unsigned int)+0x214>
    d680:	e0030390 	mul	r3, r0, r3
    d684:	e731f31c 	udiv	r1, ip, r3
    d688:	e3510009 	cmp	r1, #9
    d68c:	e1a02001 	mov	r2, r1
    d690:	8afffffa 	bhi	d680 <CString::ftoa(char*, double, unsigned int)+0x148>
    d694:	e30c4ccd 	movw	r4, #52429	; 0xcccd
    d698:	e34c4ccc 	movt	r4, #52428	; 0xcccc
    d69c:	e28de004 	add	lr, sp, #4
    d6a0:	ea000001 	b	d6ac <CString::ftoa(char*, double, unsigned int)+0x174>
    d6a4:	e731f31c 	udiv	r1, ip, r3
    d6a8:	e1a02001 	mov	r2, r1
    d6ac:	e3520009 	cmp	r2, #9
    d6b0:	e2820057 	add	r0, r2, #87	; 0x57
    d6b4:	e2822030 	add	r2, r2, #48	; 0x30
    d6b8:	e06cc193 	mls	ip, r3, r1, ip
    d6bc:	e6af1070 	sxtb	r1, r0
    d6c0:	e28ee001 	add	lr, lr, #1
    d6c4:	96af1072 	sxtbls	r1, r2
    d6c8:	e0832394 	umull	r2, r3, r4, r3
    d6cc:	e1b031a3 	lsrs	r3, r3, #3
    d6d0:	e54e1001 	strb	r1, [lr, #-1]
    d6d4:	1afffff2 	bne	d6a4 <CString::ftoa(char*, double, unsigned int)+0x16c>
    d6d8:	e28d0004 	add	r0, sp, #4
    d6dc:	e5ce3000 	strb	r3, [lr]
    d6e0:	ebfff4e5 	bl	aa7c <strlen>
    d6e4:	e0566000 	subs	r6, r6, r0
    d6e8:	0a000005 	beq	d704 <CString::ftoa(char*, double, unsigned int)+0x1cc>
    d6ec:	e3a02030 	mov	r2, #48	; 0x30
    d6f0:	e0883006 	add	r3, r8, r6
    d6f4:	e5e82001 	strb	r2, [r8, #1]!
    d6f8:	e1580003 	cmp	r8, r3
    d6fc:	1afffffc 	bne	d6f4 <CString::ftoa(char*, double, unsigned int)+0x1bc>
    d700:	e0877006 	add	r7, r7, r6
    d704:	e28d1004 	add	r1, sp, #4
    d708:	e1a00007 	mov	r0, r7
    d70c:	ebfff4ff 	bl	ab10 <strcpy>
    d710:	e1a00005 	mov	r0, r5
    d714:	e28dd010 	add	sp, sp, #16
    d718:	ecbd8b02 	vpop	{d8}
    d71c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d720:	e1a00007 	mov	r0, r7
    d724:	e3001a8c 	movw	r1, #2700	; 0xa8c
    d728:	e3401001 	movt	r1, #1
    d72c:	ebfff4f7 	bl	ab10 <strcpy>
    d730:	e1a00005 	mov	r0, r5
    d734:	e28dd010 	add	sp, sp, #16
    d738:	ecbd8b02 	vpop	{d8}
    d73c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d740:	ee172a90 	vmov	r2, s15
    d744:	e3a03001 	mov	r3, #1
    d748:	eaffff95 	b	d5a4 <CString::ftoa(char*, double, unsigned int)+0x6c>
    d74c:	ee172a90 	vmov	r2, s15
    d750:	e3a03001 	mov	r3, #1
    d754:	ee171a90 	vmov	r1, s15
    d758:	eaffffcd 	b	d694 <CString::ftoa(char*, double, unsigned int)+0x15c>
    d75c:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    d760:	eaffffbc 	b	d658 <CString::ftoa(char*, double, unsigned int)+0x120>
    d764:	e320f000 	nop	{0}
    d768:	ffe00000 	.word	0xffe00000
    d76c:	41efffff 	.word	0x41efffff

0000d770 <CString::FormatV(char const*, std::__va_list)>:
    d770:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d774:	e1a06000 	mov	r6, r0
    d778:	e5900004 	ldr	r0, [r0, #4]
    d77c:	e24dd024 	sub	sp, sp, #36	; 0x24
    d780:	e1a05001 	mov	r5, r1
    d784:	e3500000 	cmp	r0, #0
    d788:	e1a09002 	mov	r9, r2
    d78c:	0a000000 	beq	d794 <CString::FormatV(char const*, std::__va_list)+0x24>
    d790:	ebfff188 	bl	9db8 <operator delete[](void*)>
    d794:	e3a00040 	mov	r0, #64	; 0x40
    d798:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    d79c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    d7a0:	e5860008 	str	r0, [r6, #8]
    d7a4:	e58d3004 	str	r3, [sp, #4]
    d7a8:	ebfff180 	bl	9db0 <operator new[](unsigned int)>
    d7ac:	e5860004 	str	r0, [r6, #4]
    d7b0:	e586000c 	str	r0, [r6, #12]
    d7b4:	e1d540d0 	ldrsb	r4, [r5]
    d7b8:	e3540000 	cmp	r4, #0
    d7bc:	0a00008a 	beq	d9ec <CString::FormatV(char const*, std::__va_list)+0x27c>
    d7c0:	e3540025 	cmp	r4, #37	; 0x25
    d7c4:	13a01001 	movne	r1, #1
    d7c8:	11a00006 	movne	r0, r6
    d7cc:	1a000129 	bne	dc78 <CString::FormatV(char const*, std::__va_list)+0x508>
    d7d0:	e1d570d1 	ldrsb	r7, [r5, #1]
    d7d4:	e3570025 	cmp	r7, #37	; 0x25
    d7d8:	0a00013c 	beq	dcd0 <CString::FormatV(char const*, std::__va_list)+0x560>
    d7dc:	e357002d 	cmp	r7, #45	; 0x2d
    d7e0:	e3a04000 	mov	r4, #0
    d7e4:	12855001 	addne	r5, r5, #1
    d7e8:	13a08000 	movne	r8, #0
    d7ec:	03a08001 	moveq	r8, #1
    d7f0:	01d570d2 	ldrsbeq	r7, [r5, #2]
    d7f4:	02855002 	addeq	r5, r5, #2
    d7f8:	e3570030 	cmp	r7, #48	; 0x30
    d7fc:	03a03001 	moveq	r3, #1
    d800:	13a03000 	movne	r3, #0
    d804:	058d3000 	streq	r3, [sp]
    d808:	01d570d1 	ldrsbeq	r7, [r5, #1]
    d80c:	00855003 	addeq	r5, r5, r3
    d810:	158d3000 	strne	r3, [sp]
    d814:	e2473030 	sub	r3, r7, #48	; 0x30
    d818:	e6ef3073 	uxtb	r3, r3
    d81c:	e3530009 	cmp	r3, #9
    d820:	8a000007 	bhi	d844 <CString::FormatV(char const*, std::__va_list)+0xd4>
    d824:	e3a0200a 	mov	r2, #10
    d828:	e0247492 	mla	r4, r2, r4, r7
    d82c:	e1f570d1 	ldrsb	r7, [r5, #1]!
    d830:	e2473030 	sub	r3, r7, #48	; 0x30
    d834:	e2444030 	sub	r4, r4, #48	; 0x30
    d838:	e6ef3073 	uxtb	r3, r3
    d83c:	e3530009 	cmp	r3, #9
    d840:	9afffff8 	bls	d828 <CString::FormatV(char const*, std::__va_list)+0xb8>
    d844:	e357002e 	cmp	r7, #46	; 0x2e
    d848:	0a000110 	beq	dc90 <CString::FormatV(char const*, std::__va_list)+0x520>
    d84c:	e1d500d0 	ldrsb	r0, [r5]
    d850:	e3a01006 	mov	r1, #6
    d854:	e350006c 	cmp	r0, #108	; 0x6c
    d858:	03a02001 	moveq	r2, #1
    d85c:	01d500d1 	ldrsbeq	r0, [r5, #1]
    d860:	00855002 	addeq	r5, r5, r2
    d864:	e2403058 	sub	r3, r0, #88	; 0x58
    d868:	e3530020 	cmp	r3, #32
    d86c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    d870:	ea0000f5 	b	dc4c <CString::FormatV(char const*, std::__va_list)+0x4dc>
    d874:	0000dbd4 	.word	0x0000dbd4
    d878:	0000dc4c 	.word	0x0000dc4c
    d87c:	0000dc4c 	.word	0x0000dc4c
    d880:	0000dc4c 	.word	0x0000dc4c
    d884:	0000dc4c 	.word	0x0000dc4c
    d888:	0000dc4c 	.word	0x0000dc4c
    d88c:	0000dc4c 	.word	0x0000dc4c
    d890:	0000dc4c 	.word	0x0000dc4c
    d894:	0000dc4c 	.word	0x0000dc4c
    d898:	0000dc4c 	.word	0x0000dc4c
    d89c:	0000dc4c 	.word	0x0000dc4c
    d8a0:	0000db68 	.word	0x0000db68
    d8a4:	0000da6c 	.word	0x0000da6c
    d8a8:	0000dc4c 	.word	0x0000dc4c
    d8ac:	0000d9fc 	.word	0x0000d9fc
    d8b0:	0000dc4c 	.word	0x0000dc4c
    d8b4:	0000dc4c 	.word	0x0000dc4c
    d8b8:	0000dc4c 	.word	0x0000dc4c
    d8bc:	0000dc4c 	.word	0x0000dc4c
    d8c0:	0000dc4c 	.word	0x0000dc4c
    d8c4:	0000dc4c 	.word	0x0000dc4c
    d8c8:	0000dc4c 	.word	0x0000dc4c
    d8cc:	0000dc4c 	.word	0x0000dc4c
    d8d0:	0000d8f8 	.word	0x0000d8f8
    d8d4:	0000dc4c 	.word	0x0000dc4c
    d8d8:	0000dc4c 	.word	0x0000dc4c
    d8dc:	0000dc4c 	.word	0x0000dc4c
    d8e0:	0000dbe4 	.word	0x0000dbe4
    d8e4:	0000dc4c 	.word	0x0000dc4c
    d8e8:	0000dbdc 	.word	0x0000dbdc
    d8ec:	0000dc4c 	.word	0x0000dc4c
    d8f0:	0000dc4c 	.word	0x0000dc4c
    d8f4:	0000dbd4 	.word	0x0000dbd4
    d8f8:	e3a0a008 	mov	sl, #8
    d8fc:	e599c000 	ldr	ip, [r9]
    d900:	e2899004 	add	r9, r9, #4
    d904:	e15c000a 	cmp	ip, sl
    d908:	23a03001 	movcs	r3, #1
    d90c:	3a00016e 	bcc	decc <CString::FormatV(char const*, std::__va_list)+0x75c>
    d910:	e003039a 	mul	r3, sl, r3
    d914:	e731f31c 	udiv	r1, ip, r3
    d918:	e15a0001 	cmp	sl, r1
    d91c:	e1a02001 	mov	r2, r1
    d920:	9afffffa 	bls	d910 <CString::FormatV(char const*, std::__va_list)+0x1a0>
    d924:	e3500058 	cmp	r0, #88	; 0x58
    d928:	e28d7008 	add	r7, sp, #8
    d92c:	13a0b057 	movne	fp, #87	; 0x57
    d930:	03a0b037 	moveq	fp, #55	; 0x37
    d934:	e1a0e007 	mov	lr, r7
    d938:	ea000001 	b	d944 <CString::FormatV(char const*, std::__va_list)+0x1d4>
    d93c:	e731f31c 	udiv	r1, ip, r3
    d940:	e1a02001 	mov	r2, r1
    d944:	e06cc193 	mls	ip, r3, r1, ip
    d948:	e3520009 	cmp	r2, #9
    d94c:	e733fa13 	udiv	r3, r3, sl
    d950:	e08b0002 	add	r0, fp, r2
    d954:	e2822030 	add	r2, r2, #48	; 0x30
    d958:	e28ee001 	add	lr, lr, #1
    d95c:	e6af0070 	sxtb	r0, r0
    d960:	96af0072 	sxtbls	r0, r2
    d964:	e3530000 	cmp	r3, #0
    d968:	e54e0001 	strb	r0, [lr, #-1]
    d96c:	1afffff2 	bne	d93c <CString::FormatV(char const*, std::__va_list)+0x1cc>
    d970:	e1a00007 	mov	r0, r7
    d974:	e5ce3000 	strb	r3, [lr]
    d978:	ebfff43f 	bl	aa7c <strlen>
    d97c:	e3580000 	cmp	r8, #0
    d980:	e1a0a000 	mov	sl, r0
    d984:	1a0000f4 	bne	dd5c <CString::FormatV(char const*, std::__va_list)+0x5ec>
    d988:	e1500004 	cmp	r0, r4
    d98c:	2a00000f 	bcs	d9d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    d990:	e59d3000 	ldr	r3, [sp]
    d994:	e0444000 	sub	r4, r4, r0
    d998:	e1a01004 	mov	r1, r4
    d99c:	e1a00006 	mov	r0, r6
    d9a0:	e3530000 	cmp	r3, #0
    d9a4:	03a08020 	moveq	r8, #32
    d9a8:	13a08030 	movne	r8, #48	; 0x30
    d9ac:	ebfffe1d 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d9b0:	e2443001 	sub	r3, r4, #1
    d9b4:	e596200c 	ldr	r2, [r6, #12]
    d9b8:	e2433001 	sub	r3, r3, #1
    d9bc:	e3730001 	cmn	r3, #1
    d9c0:	e2821001 	add	r1, r2, #1
    d9c4:	e586100c 	str	r1, [r6, #12]
    d9c8:	e5c28000 	strb	r8, [r2]
    d9cc:	1afffff8 	bne	d9b4 <CString::FormatV(char const*, std::__va_list)+0x244>
    d9d0:	e1a01007 	mov	r1, r7
    d9d4:	e1a00006 	mov	r0, r6
    d9d8:	ebfffea1 	bl	d464 <CString::PutString(char const*)>
    d9dc:	e2855001 	add	r5, r5, #1
    d9e0:	e1d540d0 	ldrsb	r4, [r5]
    d9e4:	e3540000 	cmp	r4, #0
    d9e8:	1affff74 	bne	d7c0 <CString::FormatV(char const*, std::__va_list)+0x50>
    d9ec:	e596300c 	ldr	r3, [r6, #12]
    d9f0:	e5c34000 	strb	r4, [r3]
    d9f4:	e28dd024 	add	sp, sp, #36	; 0x24
    d9f8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9fc:	e2893007 	add	r3, r9, #7
    da00:	e28d7008 	add	r7, sp, #8
    da04:	e3c33007 	bic	r3, r3, #7
    da08:	e1a00007 	mov	r0, r7
    da0c:	e2839008 	add	r9, r3, #8
    da10:	ed930b00 	vldr	d0, [r3]
    da14:	ebfffec7 	bl	d538 <CString::ftoa(char*, double, unsigned int)>
    da18:	e1a00007 	mov	r0, r7
    da1c:	ebfff416 	bl	aa7c <strlen>
    da20:	e3580000 	cmp	r8, #0
    da24:	e1a0a000 	mov	sl, r0
    da28:	1a000108 	bne	de50 <CString::FormatV(char const*, std::__va_list)+0x6e0>
    da2c:	e1500004 	cmp	r0, r4
    da30:	2affffe6 	bcs	d9d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    da34:	e0444000 	sub	r4, r4, r0
    da38:	e1a00006 	mov	r0, r6
    da3c:	e1a01004 	mov	r1, r4
    da40:	ebfffdf8 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    da44:	e2443001 	sub	r3, r4, #1
    da48:	e3a00020 	mov	r0, #32
    da4c:	e596200c 	ldr	r2, [r6, #12]
    da50:	e2433001 	sub	r3, r3, #1
    da54:	e3730001 	cmn	r3, #1
    da58:	e2821001 	add	r1, r2, #1
    da5c:	e586100c 	str	r1, [r6, #12]
    da60:	e5c20000 	strb	r0, [r2]
    da64:	1afffff8 	bne	da4c <CString::FormatV(char const*, std::__va_list)+0x2dc>
    da68:	eaffffd8 	b	d9d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    da6c:	e5990000 	ldr	r0, [r9]
    da70:	e2899004 	add	r9, r9, #4
    da74:	e3500000 	cmp	r0, #0
    da78:	b2600000 	rsblt	r0, r0, #0
    da7c:	b3a0b001 	movlt	fp, #1
    da80:	a3a0b000 	movge	fp, #0
    da84:	e3500009 	cmp	r0, #9
    da88:	e1a0a00b 	mov	sl, fp
    da8c:	e1a0e000 	mov	lr, r0
    da90:	c3a03001 	movgt	r3, #1
    da94:	c3a0100a 	movgt	r1, #10
    da98:	da000108 	ble	dec0 <CString::FormatV(char const*, std::__va_list)+0x750>
    da9c:	e0030391 	mul	r3, r1, r3
    daa0:	e732f310 	udiv	r2, r0, r3
    daa4:	e3520009 	cmp	r2, #9
    daa8:	8afffffb 	bhi	da9c <CString::FormatV(char const*, std::__va_list)+0x32c>
    daac:	e28d7008 	add	r7, sp, #8
    dab0:	e58d8000 	str	r8, [sp]
    dab4:	e730f310 	udiv	r0, r0, r3
    dab8:	e1a0c007 	mov	ip, r7
    dabc:	e59d8004 	ldr	r8, [sp, #4]
    dac0:	ea000001 	b	dacc <CString::FormatV(char const*, std::__va_list)+0x35c>
    dac4:	e730f31e 	udiv	r0, lr, r3
    dac8:	e1a02000 	mov	r2, r0
    dacc:	e3520009 	cmp	r2, #9
    dad0:	e2821057 	add	r1, r2, #87	; 0x57
    dad4:	e2822030 	add	r2, r2, #48	; 0x30
    dad8:	e06ee093 	mls	lr, r3, r0, lr
    dadc:	e6af1071 	sxtb	r1, r1
    dae0:	e28cc001 	add	ip, ip, #1
    dae4:	96af1072 	sxtbls	r1, r2
    dae8:	e0832398 	umull	r2, r3, r8, r3
    daec:	e1b031a3 	lsrs	r3, r3, #3
    daf0:	e54c1001 	strb	r1, [ip, #-1]
    daf4:	1afffff2 	bne	dac4 <CString::FormatV(char const*, std::__va_list)+0x354>
    daf8:	e59d8000 	ldr	r8, [sp]
    dafc:	e1a00007 	mov	r0, r7
    db00:	e5cc3000 	strb	r3, [ip]
    db04:	ebfff3dc 	bl	aa7c <strlen>
    db08:	e3580000 	cmp	r8, #0
    db0c:	e080b00b 	add	fp, r0, fp
    db10:	0a000077 	beq	dcf4 <CString::FormatV(char const*, std::__va_list)+0x584>
    db14:	e35a0000 	cmp	sl, #0
    db18:	1a0000df 	bne	de9c <CString::FormatV(char const*, std::__va_list)+0x72c>
    db1c:	e1a01007 	mov	r1, r7
    db20:	e1a00006 	mov	r0, r6
    db24:	ebfffe4e 	bl	d464 <CString::PutString(char const*)>
    db28:	e15b0004 	cmp	fp, r4
    db2c:	2affffaa 	bcs	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    db30:	e044b00b 	sub	fp, r4, fp
    db34:	e1a00006 	mov	r0, r6
    db38:	e1a0100b 	mov	r1, fp
    db3c:	ebfffdb9 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db40:	e24b3001 	sub	r3, fp, #1
    db44:	e3a00020 	mov	r0, #32
    db48:	e596200c 	ldr	r2, [r6, #12]
    db4c:	e2433001 	sub	r3, r3, #1
    db50:	e3730001 	cmn	r3, #1
    db54:	e2821001 	add	r1, r2, #1
    db58:	e586100c 	str	r1, [r6, #12]
    db5c:	e5c20000 	strb	r0, [r2]
    db60:	1afffff8 	bne	db48 <CString::FormatV(char const*, std::__va_list)+0x3d8>
    db64:	eaffff9c 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    db68:	e3580000 	cmp	r8, #0
    db6c:	e2897004 	add	r7, r9, #4
    db70:	e1d980d0 	ldrsb	r8, [r9]
    db74:	1a00008b 	bne	dda8 <CString::FormatV(char const*, std::__va_list)+0x638>
    db78:	e3540001 	cmp	r4, #1
    db7c:	9a00000b 	bls	dbb0 <CString::FormatV(char const*, std::__va_list)+0x440>
    db80:	e2441001 	sub	r1, r4, #1
    db84:	e1a00006 	mov	r0, r6
    db88:	ebfffda6 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    db8c:	e2444002 	sub	r4, r4, #2
    db90:	e3a01020 	mov	r1, #32
    db94:	e596300c 	ldr	r3, [r6, #12]
    db98:	e2444001 	sub	r4, r4, #1
    db9c:	e3740001 	cmn	r4, #1
    dba0:	e2832001 	add	r2, r3, #1
    dba4:	e586200c 	str	r2, [r6, #12]
    dba8:	e5c31000 	strb	r1, [r3]
    dbac:	1afffff8 	bne	db94 <CString::FormatV(char const*, std::__va_list)+0x424>
    dbb0:	e3a01001 	mov	r1, #1
    dbb4:	e1a00006 	mov	r0, r6
    dbb8:	ebfffd9a 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dbbc:	e596300c 	ldr	r3, [r6, #12]
    dbc0:	e1a09007 	mov	r9, r7
    dbc4:	e2832001 	add	r2, r3, #1
    dbc8:	e586200c 	str	r2, [r6, #12]
    dbcc:	e5c38000 	strb	r8, [r3]
    dbd0:	eaffff81 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dbd4:	e3a0a010 	mov	sl, #16
    dbd8:	eaffff47 	b	d8fc <CString::FormatV(char const*, std::__va_list)+0x18c>
    dbdc:	e3a0a00a 	mov	sl, #10
    dbe0:	eaffff45 	b	d8fc <CString::FormatV(char const*, std::__va_list)+0x18c>
    dbe4:	e599a000 	ldr	sl, [r9]
    dbe8:	e2899004 	add	r9, r9, #4
    dbec:	e1a0000a 	mov	r0, sl
    dbf0:	ebfff3a1 	bl	aa7c <strlen>
    dbf4:	e3580000 	cmp	r8, #0
    dbf8:	e1a07000 	mov	r7, r0
    dbfc:	1a000080 	bne	de04 <CString::FormatV(char const*, std::__va_list)+0x694>
    dc00:	e1500004 	cmp	r0, r4
    dc04:	2a00000c 	bcs	dc3c <CString::FormatV(char const*, std::__va_list)+0x4cc>
    dc08:	e0444000 	sub	r4, r4, r0
    dc0c:	e1a00006 	mov	r0, r6
    dc10:	e1a01004 	mov	r1, r4
    dc14:	ebfffd83 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc18:	e2443001 	sub	r3, r4, #1
    dc1c:	e3a00020 	mov	r0, #32
    dc20:	e596200c 	ldr	r2, [r6, #12]
    dc24:	e2433001 	sub	r3, r3, #1
    dc28:	e3730001 	cmn	r3, #1
    dc2c:	e2821001 	add	r1, r2, #1
    dc30:	e586100c 	str	r1, [r6, #12]
    dc34:	e5c20000 	strb	r0, [r2]
    dc38:	1afffff8 	bne	dc20 <CString::FormatV(char const*, std::__va_list)+0x4b0>
    dc3c:	e1a0100a 	mov	r1, sl
    dc40:	e1a00006 	mov	r0, r6
    dc44:	ebfffe06 	bl	d464 <CString::PutString(char const*)>
    dc48:	eaffff63 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dc4c:	e3a01001 	mov	r1, #1
    dc50:	e1a00006 	mov	r0, r6
    dc54:	ebfffd73 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc58:	e596300c 	ldr	r3, [r6, #12]
    dc5c:	e3a01001 	mov	r1, #1
    dc60:	e3a02025 	mov	r2, #37	; 0x25
    dc64:	e0830001 	add	r0, r3, r1
    dc68:	e586000c 	str	r0, [r6, #12]
    dc6c:	e1a00006 	mov	r0, r6
    dc70:	e5c32000 	strb	r2, [r3]
    dc74:	e1d540d0 	ldrsb	r4, [r5]
    dc78:	ebfffd6a 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dc7c:	e596300c 	ldr	r3, [r6, #12]
    dc80:	e2832001 	add	r2, r3, #1
    dc84:	e586200c 	str	r2, [r6, #12]
    dc88:	e5c34000 	strb	r4, [r3]
    dc8c:	eaffff52 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dc90:	e1d500d1 	ldrsb	r0, [r5, #1]
    dc94:	e3a01000 	mov	r1, #0
    dc98:	e2855001 	add	r5, r5, #1
    dc9c:	e2403030 	sub	r3, r0, #48	; 0x30
    dca0:	e6ef3073 	uxtb	r3, r3
    dca4:	e3530009 	cmp	r3, #9
    dca8:	8afffee9 	bhi	d854 <CString::FormatV(char const*, std::__va_list)+0xe4>
    dcac:	e3a0200a 	mov	r2, #10
    dcb0:	e0210192 	mla	r1, r2, r1, r0
    dcb4:	e1f500d1 	ldrsb	r0, [r5, #1]!
    dcb8:	e2403030 	sub	r3, r0, #48	; 0x30
    dcbc:	e2411030 	sub	r1, r1, #48	; 0x30
    dcc0:	e6ef3073 	uxtb	r3, r3
    dcc4:	e3530009 	cmp	r3, #9
    dcc8:	9afffff8 	bls	dcb0 <CString::FormatV(char const*, std::__va_list)+0x540>
    dccc:	eafffee0 	b	d854 <CString::FormatV(char const*, std::__va_list)+0xe4>
    dcd0:	e3a01001 	mov	r1, #1
    dcd4:	e1a00006 	mov	r0, r6
    dcd8:	ebfffd52 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dcdc:	e596300c 	ldr	r3, [r6, #12]
    dce0:	e2855002 	add	r5, r5, #2
    dce4:	e2832001 	add	r2, r3, #1
    dce8:	e586200c 	str	r2, [r6, #12]
    dcec:	e5c37000 	strb	r7, [r3]
    dcf0:	eafffeaf 	b	d7b4 <CString::FormatV(char const*, std::__va_list)+0x44>
    dcf4:	e15b0004 	cmp	fp, r4
    dcf8:	2a00000c 	bcs	dd30 <CString::FormatV(char const*, std::__va_list)+0x5c0>
    dcfc:	e044b00b 	sub	fp, r4, fp
    dd00:	e1a00006 	mov	r0, r6
    dd04:	e1a0100b 	mov	r1, fp
    dd08:	ebfffd46 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd0c:	e24b3001 	sub	r3, fp, #1
    dd10:	e3a00020 	mov	r0, #32
    dd14:	e596200c 	ldr	r2, [r6, #12]
    dd18:	e2433001 	sub	r3, r3, #1
    dd1c:	e3730001 	cmn	r3, #1
    dd20:	e2821001 	add	r1, r2, #1
    dd24:	e586100c 	str	r1, [r6, #12]
    dd28:	e5c20000 	strb	r0, [r2]
    dd2c:	1afffff8 	bne	dd14 <CString::FormatV(char const*, std::__va_list)+0x5a4>
    dd30:	e35a0000 	cmp	sl, #0
    dd34:	0affff25 	beq	d9d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    dd38:	e3a01001 	mov	r1, #1
    dd3c:	e1a00006 	mov	r0, r6
    dd40:	ebfffd38 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd44:	e596300c 	ldr	r3, [r6, #12]
    dd48:	e3a0202d 	mov	r2, #45	; 0x2d
    dd4c:	e2831001 	add	r1, r3, #1
    dd50:	e586100c 	str	r1, [r6, #12]
    dd54:	e5c32000 	strb	r2, [r3]
    dd58:	eaffff1c 	b	d9d0 <CString::FormatV(char const*, std::__va_list)+0x260>
    dd5c:	e1a01007 	mov	r1, r7
    dd60:	e1a00006 	mov	r0, r6
    dd64:	ebfffdbe 	bl	d464 <CString::PutString(char const*)>
    dd68:	e15a0004 	cmp	sl, r4
    dd6c:	2affff1a 	bcs	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dd70:	e044400a 	sub	r4, r4, sl
    dd74:	e1a00006 	mov	r0, r6
    dd78:	e1a01004 	mov	r1, r4
    dd7c:	ebfffd29 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dd80:	e2443001 	sub	r3, r4, #1
    dd84:	e3a00020 	mov	r0, #32
    dd88:	e596200c 	ldr	r2, [r6, #12]
    dd8c:	e2433001 	sub	r3, r3, #1
    dd90:	e3730001 	cmn	r3, #1
    dd94:	e2821001 	add	r1, r2, #1
    dd98:	e586100c 	str	r1, [r6, #12]
    dd9c:	e5c20000 	strb	r0, [r2]
    dda0:	1afffff8 	bne	dd88 <CString::FormatV(char const*, std::__va_list)+0x618>
    dda4:	eaffff0c 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    dda8:	e3a01001 	mov	r1, #1
    ddac:	e1a00006 	mov	r0, r6
    ddb0:	ebfffd1c 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ddb4:	e596300c 	ldr	r3, [r6, #12]
    ddb8:	e3540001 	cmp	r4, #1
    ddbc:	e2832001 	add	r2, r3, #1
    ddc0:	e586200c 	str	r2, [r6, #12]
    ddc4:	e5c38000 	strb	r8, [r3]
    ddc8:	9a00000b 	bls	ddfc <CString::FormatV(char const*, std::__va_list)+0x68c>
    ddcc:	e2441001 	sub	r1, r4, #1
    ddd0:	e1a00006 	mov	r0, r6
    ddd4:	ebfffd13 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ddd8:	e2444002 	sub	r4, r4, #2
    dddc:	e3a01020 	mov	r1, #32
    dde0:	e596300c 	ldr	r3, [r6, #12]
    dde4:	e2444001 	sub	r4, r4, #1
    dde8:	e3740001 	cmn	r4, #1
    ddec:	e2832001 	add	r2, r3, #1
    ddf0:	e586200c 	str	r2, [r6, #12]
    ddf4:	e5c31000 	strb	r1, [r3]
    ddf8:	1afffff8 	bne	dde0 <CString::FormatV(char const*, std::__va_list)+0x670>
    ddfc:	e1a09007 	mov	r9, r7
    de00:	eafffef5 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    de04:	e1a0100a 	mov	r1, sl
    de08:	e1a00006 	mov	r0, r6
    de0c:	ebfffd94 	bl	d464 <CString::PutString(char const*)>
    de10:	e1570004 	cmp	r7, r4
    de14:	2afffef0 	bcs	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    de18:	e0444007 	sub	r4, r4, r7
    de1c:	e1a00006 	mov	r0, r6
    de20:	e1a01004 	mov	r1, r4
    de24:	ebfffcff 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de28:	e2443001 	sub	r3, r4, #1
    de2c:	e3a00020 	mov	r0, #32
    de30:	e596200c 	ldr	r2, [r6, #12]
    de34:	e2433001 	sub	r3, r3, #1
    de38:	e3730001 	cmn	r3, #1
    de3c:	e2821001 	add	r1, r2, #1
    de40:	e586100c 	str	r1, [r6, #12]
    de44:	e5c20000 	strb	r0, [r2]
    de48:	1afffff8 	bne	de30 <CString::FormatV(char const*, std::__va_list)+0x6c0>
    de4c:	eafffee2 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    de50:	e1a01007 	mov	r1, r7
    de54:	e1a00006 	mov	r0, r6
    de58:	ebfffd81 	bl	d464 <CString::PutString(char const*)>
    de5c:	e15a0004 	cmp	sl, r4
    de60:	2afffedd 	bcs	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    de64:	e044400a 	sub	r4, r4, sl
    de68:	e1a00006 	mov	r0, r6
    de6c:	e1a01004 	mov	r1, r4
    de70:	ebfffcec 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de74:	e2443001 	sub	r3, r4, #1
    de78:	e3a00020 	mov	r0, #32
    de7c:	e596200c 	ldr	r2, [r6, #12]
    de80:	e2433001 	sub	r3, r3, #1
    de84:	e3730001 	cmn	r3, #1
    de88:	e2821001 	add	r1, r2, #1
    de8c:	e586100c 	str	r1, [r6, #12]
    de90:	e5c20000 	strb	r0, [r2]
    de94:	1afffff8 	bne	de7c <CString::FormatV(char const*, std::__va_list)+0x70c>
    de98:	eafffecf 	b	d9dc <CString::FormatV(char const*, std::__va_list)+0x26c>
    de9c:	e3a01001 	mov	r1, #1
    dea0:	e1a00006 	mov	r0, r6
    dea4:	ebfffcdf 	bl	d228 <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dea8:	e596300c 	ldr	r3, [r6, #12]
    deac:	e3a0202d 	mov	r2, #45	; 0x2d
    deb0:	e2831001 	add	r1, r3, #1
    deb4:	e586100c 	str	r1, [r6, #12]
    deb8:	e5c32000 	strb	r2, [r3]
    debc:	eaffff16 	b	db1c <CString::FormatV(char const*, std::__va_list)+0x3ac>
    dec0:	e1a02000 	mov	r2, r0
    dec4:	e3a03001 	mov	r3, #1
    dec8:	eafffef7 	b	daac <CString::FormatV(char const*, std::__va_list)+0x33c>
    decc:	e1a0200c 	mov	r2, ip
    ded0:	e3a03001 	mov	r3, #1
    ded4:	e1a0100c 	mov	r1, ip
    ded8:	eafffe91 	b	d924 <CString::FormatV(char const*, std::__va_list)+0x1b4>

0000dedc <CString::Format(char const*, ...)>:
    dedc:	e92d000e 	push	{r1, r2, r3}
    dee0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    dee4:	e24dd008 	sub	sp, sp, #8
    dee8:	e28d3010 	add	r3, sp, #16
    deec:	e1a02003 	mov	r2, r3
    def0:	e59d100c 	ldr	r1, [sp, #12]
    def4:	e58d3004 	str	r3, [sp, #4]
    def8:	ebfffe1c 	bl	d770 <CString::FormatV(char const*, std::__va_list)>
    defc:	e28dd008 	add	sp, sp, #8
    df00:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    df04:	e28dd00c 	add	sp, sp, #12
    df08:	e12fff1e 	bx	lr
    df0c:	00000000 	andeq	r0, r0, r0

0000df10 <DelayLoop>:
    df10:	e2500001 	subs	r0, r0, #1
    df14:	8afffffd 	bhi	df10 <DelayLoop>
    df18:	e1a0f00e 	mov	pc, lr

0000df1c <CExceptionHandler::CExceptionHandler()>:
    df1c:	e92d4070 	push	{r4, r5, r6, lr}
    df20:	e3015b98 	movw	r5, #7064	; 0x1b98
    df24:	e3405001 	movt	r5, #1
    df28:	e1a04000 	mov	r4, r0
    df2c:	e5953000 	ldr	r3, [r5]
    df30:	e3530000 	cmp	r3, #0
    df34:	0a000005 	beq	df50 <CExceptionHandler::CExceptionHandler()+0x34>
    df38:	e3001aa0 	movw	r1, #2720	; 0xaa0
    df3c:	e3401001 	movt	r1, #1
    df40:	e30f08f4 	movw	r0, #63732	; 0xf8f4
    df44:	e3400000 	movt	r0, #0
    df48:	e3a02030 	mov	r2, #48	; 0x30
    df4c:	ebfffa23 	bl	c7e0 <assertion_failed>
    df50:	e59f1048 	ldr	r1, [pc, #72]	; dfa0 <CExceptionHandler::CExceptionHandler()+0x84>
    df54:	e3a00000 	mov	r0, #0
    df58:	e59f2044 	ldr	r2, [pc, #68]	; dfa4 <CExceptionHandler::CExceptionHandler()+0x88>
    df5c:	e59f3044 	ldr	r3, [pc, #68]	; dfa8 <CExceptionHandler::CExceptionHandler()+0x8c>
    df60:	e1a01141 	asr	r1, r1, #2
    df64:	e5854000 	str	r4, [r5]
    df68:	e1a02142 	asr	r2, r2, #2
    df6c:	e2411002 	sub	r1, r1, #2
    df70:	e1a03143 	asr	r3, r3, #2
    df74:	e2422002 	sub	r2, r2, #2
    df78:	e2433002 	sub	r3, r3, #2
    df7c:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
    df80:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
    df84:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    df88:	e5801004 	str	r1, [r0, #4]
    df8c:	e580200c 	str	r2, [r0, #12]
    df90:	e5803010 	str	r3, [r0, #16]
    df94:	ebffefad 	bl	9e50 <SyncDataAndInstructionCache>
    df98:	e1a00004 	mov	r0, r4
    df9c:	e8bd8070 	pop	{r4, r5, r6, pc}
    dfa0:	0000e170 	.word	0x0000e170
    dfa4:	0000e1a8 	.word	0x0000e1a8
    dfa8:	0000e1e4 	.word	0x0000e1e4

0000dfac <CExceptionHandler::~CExceptionHandler()>:
    dfac:	e3013b98 	movw	r3, #7064	; 0x1b98
    dfb0:	e3403001 	movt	r3, #1
    dfb4:	e3a02000 	mov	r2, #0
    dfb8:	e5832000 	str	r2, [r3]
    dfbc:	e12fff1e 	bx	lr

0000dfc0 <CExceptionHandler::Throw(unsigned int)>:
    dfc0:	e92d4010 	push	{r4, lr}
    dfc4:	e1a04001 	mov	r4, r1
    dfc8:	e24dd008 	sub	sp, sp, #8
    dfcc:	ebfffb82 	bl	cddc <CLogger::Get()>
    dfd0:	e3002de0 	movw	r2, #3552	; 0xde0
    dfd4:	e3402001 	movt	r2, #1
    dfd8:	e3003ab8 	movw	r3, #2744	; 0xab8
    dfdc:	e3403001 	movt	r3, #1
    dfe0:	e3001a98 	movw	r1, #2712	; 0xa98
    dfe4:	e3401001 	movt	r1, #1
    dfe8:	e792c104 	ldr	ip, [r2, r4, lsl #2]
    dfec:	e3a02000 	mov	r2, #0
    dff0:	e58dc000 	str	ip, [sp]
    dff4:	ebfffc55 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    dff8:	e28dd008 	add	sp, sp, #8
    dffc:	e8bd8010 	pop	{r4, pc}

0000e000 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
    e000:	e3510002 	cmp	r1, #2
    e004:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    e008:	e1a05001 	mov	r5, r1
    e00c:	e24dd024 	sub	sp, sp, #36	; 0x24
    e010:	e1a04002 	mov	r4, r2
    e014:	0a000027 	beq	e0b8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb8>
    e018:	e3510003 	cmp	r1, #3
    e01c:	0a000022 	beq	e0ac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xac>
    e020:	e3a07000 	mov	r7, #0
    e024:	e1a08007 	mov	r8, r7
    e028:	e3540000 	cmp	r4, #0
    e02c:	0a000024 	beq	e0c4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
    e030:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    e034:	e3001a98 	movw	r1, #2712	; 0xa98
    e038:	e3401001 	movt	r1, #1
    e03c:	e203301f 	and	r3, r3, #31
    e040:	e594603c 	ldr	r6, [r4, #60]	; 0x3c
    e044:	e3530012 	cmp	r3, #18
    e048:	e5949040 	ldr	r9, [r4, #64]	; 0x40
    e04c:	08940240 	ldmeq	r4, {r6, r9}
    e050:	e1a00006 	mov	r0, r6
    e054:	ebfffa70 	bl	ca1c <debug_stacktrace(unsigned int const*, char const*)>
    e058:	ebfffb5f 	bl	cddc <CLogger::Get()>
    e05c:	e3003de0 	movw	r3, #3552	; 0xde0
    e060:	e3403001 	movt	r3, #1
    e064:	e594e044 	ldr	lr, [r4, #68]	; 0x44
    e068:	e3a02000 	mov	r2, #0
    e06c:	e594c048 	ldr	ip, [r4, #72]	; 0x48
    e070:	e3001a98 	movw	r1, #2712	; 0xa98
    e074:	e3401001 	movt	r1, #1
    e078:	e7934105 	ldr	r4, [r3, r5, lsl #2]
    e07c:	e3003ad4 	movw	r3, #2772	; 0xad4
    e080:	e3403001 	movt	r3, #1
    e084:	e58d9014 	str	r9, [sp, #20]
    e088:	e58d6010 	str	r6, [sp, #16]
    e08c:	e58d700c 	str	r7, [sp, #12]
    e090:	e58d8008 	str	r8, [sp, #8]
    e094:	e58d4000 	str	r4, [sp]
    e098:	e58de018 	str	lr, [sp, #24]
    e09c:	e58dc004 	str	ip, [sp, #4]
    e0a0:	ebfffc2a 	bl	d150 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e0a4:	e28dd024 	add	sp, sp, #36	; 0x24
    e0a8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    e0ac:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
    e0b0:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
    e0b4:	eaffffdb 	b	e028 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e0b8:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
    e0bc:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
    e0c0:	eaffffd8 	b	e028 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
    e0c4:	e3001aa0 	movw	r1, #2720	; 0xaa0
    e0c8:	e3401001 	movt	r1, #1
    e0cc:	e3000ac8 	movw	r0, #2760	; 0xac8
    e0d0:	e3400001 	movt	r0, #1
    e0d4:	e3a02069 	mov	r2, #105	; 0x69
    e0d8:	ebfff9c0 	bl	c7e0 <assertion_failed>
    e0dc:	eaffffd3 	b	e030 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>

0000e0e0 <CExceptionHandler::Get()>:
    e0e0:	e92d4010 	push	{r4, lr}
    e0e4:	e3014b98 	movw	r4, #7064	; 0x1b98
    e0e8:	e3404001 	movt	r4, #1
    e0ec:	e5940000 	ldr	r0, [r4]
    e0f0:	e3500000 	cmp	r0, #0
    e0f4:	18bd8010 	popne	{r4, pc}
    e0f8:	e3a02080 	mov	r2, #128	; 0x80
    e0fc:	e3001aa0 	movw	r1, #2720	; 0xaa0
    e100:	e3401001 	movt	r1, #1
    e104:	e30f0300 	movw	r0, #62208	; 0xf300
    e108:	e3400000 	movt	r0, #0
    e10c:	ebfff9b3 	bl	c7e0 <assertion_failed>
    e110:	e5940000 	ldr	r0, [r4]
    e114:	e8bd8010 	pop	{r4, pc}

0000e118 <ExceptionHandler>:
    e118:	e92d4070 	push	{r4, r5, r6, lr}
    e11c:	e3014b98 	movw	r4, #7064	; 0x1b98
    e120:	e3404001 	movt	r4, #1
    e124:	e1a05000 	mov	r5, r0
    e128:	e1a06001 	mov	r6, r1
    e12c:	e5940000 	ldr	r0, [r4]
    e130:	e3500000 	cmp	r0, #0
    e134:	0a000003 	beq	e148 <ExceptionHandler+0x30>
    e138:	e1a02006 	mov	r2, r6
    e13c:	e1a01005 	mov	r1, r5
    e140:	e8bd4070 	pop	{r4, r5, r6, lr}
    e144:	eaffffad 	b	e000 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
    e148:	e3a02080 	mov	r2, #128	; 0x80
    e14c:	e3001aa0 	movw	r1, #2720	; 0xaa0
    e150:	e3401001 	movt	r1, #1
    e154:	e30f0300 	movw	r0, #62208	; 0xf300
    e158:	e3400000 	movt	r0, #0
    e15c:	ebfff99f 	bl	c7e0 <assertion_failed>
    e160:	e5940000 	ldr	r0, [r4]
    e164:	e1a02006 	mov	r2, r6
    e168:	e1a01005 	mov	r1, r5
    e16c:	e8bd4070 	pop	{r4, r5, r6, lr}
    e170:	eaffffa2 	b	e000 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>

0000e174 <UndefinedInstructionStub>:
    e174:	e24ee004 	sub	lr, lr, #4
    e178:	e92d4000 	stmfd	sp!, {lr}
    e17c:	e14fe000 	mrs	lr, SPSR
    e180:	e92d4000 	stmfd	sp!, {lr}
    e184:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e188:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e18c:	e1a0100d 	mov	r1, sp
    e190:	f1020012 	cps	#18
    e194:	e1a0200d 	mov	r2, sp
    e198:	e1a0300e 	mov	r3, lr
    e19c:	f102001f 	cps	#31
    e1a0:	e1a0d001 	mov	sp, r1
    e1a4:	e92d000c 	push	{r2, r3}
    e1a8:	e1a0100d 	mov	r1, sp
    e1ac:	e3a00001 	mov	r0, #1
    e1b0:	eaffffd8 	b	e118 <ExceptionHandler>

0000e1b4 <PrefetchAbortStub>:
    e1b4:	e24ee004 	sub	lr, lr, #4
    e1b8:	e92d4000 	stmfd	sp!, {lr}
    e1bc:	e14fe000 	mrs	lr, SPSR
    e1c0:	e92d4000 	stmfd	sp!, {lr}
    e1c4:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e1c8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e1cc:	e1a0100d 	mov	r1, sp
    e1d0:	f1020012 	cps	#18
    e1d4:	e1a0200d 	mov	r2, sp
    e1d8:	e1a0300e 	mov	r3, lr
    e1dc:	f102001f 	cps	#31
    e1e0:	e1a0d001 	mov	sp, r1
    e1e4:	e92d000c 	push	{r2, r3}
    e1e8:	e1a0100d 	mov	r1, sp
    e1ec:	e3a00002 	mov	r0, #2
    e1f0:	eaffffc8 	b	e118 <ExceptionHandler>

0000e1f4 <DataAbortStub>:
    e1f4:	e24ee008 	sub	lr, lr, #8
    e1f8:	e92d4000 	stmfd	sp!, {lr}
    e1fc:	e14fe000 	mrs	lr, SPSR
    e200:	e92d4000 	stmfd	sp!, {lr}
    e204:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
    e208:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    e20c:	e1a0100d 	mov	r1, sp
    e210:	f1020012 	cps	#18
    e214:	e1a0200d 	mov	r2, sp
    e218:	e1a0300e 	mov	r3, lr
    e21c:	f102001f 	cps	#31
    e220:	e1a0d001 	mov	sp, r1
    e224:	e92d000c 	push	{r2, r3}
    e228:	e1a0100d 	mov	r1, sp
    e22c:	e3a00003 	mov	r0, #3
    e230:	eaffffb8 	b	e118 <ExceptionHandler>

0000e234 <IRQStub>:
    e234:	e24ee004 	sub	lr, lr, #4
    e238:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e23c:	eb0000f2 	bl	e60c <InterruptHandler>
    e240:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^

0000e244 <CInterruptSystem::CInterruptSystem()>:
    e244:	e2802f47 	add	r2, r0, #284	; 0x11c
    e248:	e1a0c000 	mov	ip, r0
    e24c:	e2403004 	sub	r3, r0, #4
    e250:	e3a01000 	mov	r1, #0
    e254:	e1a00002 	mov	r0, r2
    e258:	e5a31004 	str	r1, [r3, #4]!
    e25c:	e5a21004 	str	r1, [r2, #4]!
    e260:	e1530000 	cmp	r3, r0
    e264:	1afffffb 	bne	e258 <CInterruptSystem::CInterruptSystem()+0x14>
    e268:	e3013b9c 	movw	r3, #7068	; 0x1b9c
    e26c:	e3403001 	movt	r3, #1
    e270:	e1a0000c 	mov	r0, ip
    e274:	e583c000 	str	ip, [r3]
    e278:	e12fff1e 	bx	lr

0000e27c <CInterruptSystem::~CInterruptSystem()>:
    e27c:	e3013b9c 	movw	r3, #7068	; 0x1b9c
    e280:	e3403001 	movt	r3, #1
    e284:	e3a02000 	mov	r2, #0
    e288:	e5832000 	str	r2, [r3]
    e28c:	e12fff1e 	bx	lr

0000e290 <CInterruptSystem::Initialize()>:
    e290:	e59f3040 	ldr	r3, [pc, #64]	; e2d8 <CInterruptSystem::Initialize()+0x48>
    e294:	e92d4010 	push	{r4, lr}
    e298:	e3a04000 	mov	r4, #0
    e29c:	e1a03143 	asr	r3, r3, #2
    e2a0:	e2433002 	sub	r3, r3, #2
    e2a4:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
    e2a8:	e5843018 	str	r3, [r4, #24]
    e2ac:	ebffeee7 	bl	9e50 <SyncDataAndInstructionCache>
    e2b0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e2b4:	e3433f00 	movt	r3, #16128	; 0x3f00
    e2b8:	e3e02000 	mvn	r2, #0
    e2bc:	e583420c 	str	r4, [r3, #524]	; 0x20c
    e2c0:	e583221c 	str	r2, [r3, #540]	; 0x21c
    e2c4:	e5832220 	str	r2, [r3, #544]	; 0x220
    e2c8:	e5832224 	str	r2, [r3, #548]	; 0x224
    e2cc:	f1080080 	cpsie	i
    e2d0:	e3a00001 	mov	r0, #1
    e2d4:	e8bd8010 	pop	{r4, pc}
    e2d8:	0000e21c 	.word	0x0000e21c

0000e2dc <CInterruptSystem::EnableIRQ(unsigned int)>:
    e2dc:	e3500047 	cmp	r0, #71	; 0x47
    e2e0:	e92d4010 	push	{r4, lr}
    e2e4:	e1a04000 	mov	r4, r0
    e2e8:	8a00000e 	bhi	e328 <CInterruptSystem::EnableIRQ(unsigned int)+0x4c>
    e2ec:	e350001f 	cmp	r0, #31
    e2f0:	930b2210 	movwls	r2, #45584	; 0xb210
    e2f4:	93432f00 	movtls	r2, #16128	; 0x3f00
    e2f8:	8a000004 	bhi	e310 <CInterruptSystem::EnableIRQ(unsigned int)+0x34>
    e2fc:	e204401f 	and	r4, r4, #31
    e300:	e3a03001 	mov	r3, #1
    e304:	e1a04413 	lsl	r4, r3, r4
    e308:	e5824000 	str	r4, [r2]
    e30c:	e8bd8010 	pop	{r4, pc}
    e310:	e350003f 	cmp	r0, #63	; 0x3f
    e314:	930b2214 	movwls	r2, #45588	; 0xb214
    e318:	93432f00 	movtls	r2, #16128	; 0x3f00
    e31c:	830b2218 	movwhi	r2, #45592	; 0xb218
    e320:	83432f00 	movthi	r2, #16128	; 0x3f00
    e324:	eafffff4 	b	e2fc <CInterruptSystem::EnableIRQ(unsigned int)+0x20>
    e328:	e3a02076 	mov	r2, #118	; 0x76
    e32c:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e330:	e3401001 	movt	r1, #1
    e334:	e3000b6c 	movw	r0, #2924	; 0xb6c
    e338:	e3400001 	movt	r0, #1
    e33c:	ebfff927 	bl	c7e0 <assertion_failed>
    e340:	e30b2218 	movw	r2, #45592	; 0xb218
    e344:	e3432f00 	movt	r2, #16128	; 0x3f00
    e348:	eaffffeb 	b	e2fc <CInterruptSystem::EnableIRQ(unsigned int)+0x20>

0000e34c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
    e34c:	e3510047 	cmp	r1, #71	; 0x47
    e350:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e354:	e1a04001 	mov	r4, r1
    e358:	e1a05000 	mov	r5, r0
    e35c:	e1a08002 	mov	r8, r2
    e360:	e1a07003 	mov	r7, r3
    e364:	8a00000e 	bhi	e3a4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x58>
    e368:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e36c:	e0856104 	add	r6, r5, r4, lsl #2
    e370:	e3530000 	cmp	r3, #0
    e374:	0a000005 	beq	e390 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x44>
    e378:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e37c:	e3401001 	movt	r1, #1
    e380:	e3000b80 	movw	r0, #2944	; 0xb80
    e384:	e3400001 	movt	r0, #1
    e388:	e3a0205f 	mov	r2, #95	; 0x5f
    e38c:	ebfff913 	bl	c7e0 <assertion_failed>
    e390:	e7858104 	str	r8, [r5, r4, lsl #2]
    e394:	e1a00004 	mov	r0, r4
    e398:	e5867120 	str	r7, [r6, #288]	; 0x120
    e39c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    e3a0:	eaffffcd 	b	e2dc <CInterruptSystem::EnableIRQ(unsigned int)>
    e3a4:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e3a8:	e3401001 	movt	r1, #1
    e3ac:	e3000b6c 	movw	r0, #2924	; 0xb6c
    e3b0:	e3400001 	movt	r0, #1
    e3b4:	e3a0205e 	mov	r2, #94	; 0x5e
    e3b8:	ebfff908 	bl	c7e0 <assertion_failed>
    e3bc:	eaffffe9 	b	e368 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x1c>

0000e3c0 <CInterruptSystem::DisableIRQ(unsigned int)>:
    e3c0:	e3500047 	cmp	r0, #71	; 0x47
    e3c4:	e92d4010 	push	{r4, lr}
    e3c8:	e1a04000 	mov	r4, r0
    e3cc:	8a00000e 	bhi	e40c <CInterruptSystem::DisableIRQ(unsigned int)+0x4c>
    e3d0:	e350001f 	cmp	r0, #31
    e3d4:	930b221c 	movwls	r2, #45596	; 0xb21c
    e3d8:	93432f00 	movtls	r2, #16128	; 0x3f00
    e3dc:	8a000004 	bhi	e3f4 <CInterruptSystem::DisableIRQ(unsigned int)+0x34>
    e3e0:	e204401f 	and	r4, r4, #31
    e3e4:	e3a03001 	mov	r3, #1
    e3e8:	e1a04413 	lsl	r4, r3, r4
    e3ec:	e5824000 	str	r4, [r2]
    e3f0:	e8bd8010 	pop	{r4, pc}
    e3f4:	e350003f 	cmp	r0, #63	; 0x3f
    e3f8:	930b2220 	movwls	r2, #45600	; 0xb220
    e3fc:	93432f00 	movtls	r2, #16128	; 0x3f00
    e400:	830b2224 	movwhi	r2, #45604	; 0xb224
    e404:	83432f00 	movthi	r2, #16128	; 0x3f00
    e408:	eafffff4 	b	e3e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>
    e40c:	e3a02081 	mov	r2, #129	; 0x81
    e410:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e414:	e3401001 	movt	r1, #1
    e418:	e3000b6c 	movw	r0, #2924	; 0xb6c
    e41c:	e3400001 	movt	r0, #1
    e420:	ebfff8ee 	bl	c7e0 <assertion_failed>
    e424:	e30b2224 	movw	r2, #45604	; 0xb224
    e428:	e3432f00 	movt	r2, #16128	; 0x3f00
    e42c:	eaffffeb 	b	e3e0 <CInterruptSystem::DisableIRQ(unsigned int)+0x20>

0000e430 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
    e430:	e3510047 	cmp	r1, #71	; 0x47
    e434:	e92d4070 	push	{r4, r5, r6, lr}
    e438:	e1a04001 	mov	r4, r1
    e43c:	e1a05000 	mov	r5, r0
    e440:	8a000009 	bhi	e46c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
    e444:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e448:	e0856104 	add	r6, r5, r4, lsl #2
    e44c:	e3530000 	cmp	r3, #0
    e450:	0a00000f 	beq	e494 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
    e454:	e1a00004 	mov	r0, r4
    e458:	ebffffd8 	bl	e3c0 <CInterruptSystem::DisableIRQ(unsigned int)>
    e45c:	e3a03000 	mov	r3, #0
    e460:	e7853104 	str	r3, [r5, r4, lsl #2]
    e464:	e5863120 	str	r3, [r6, #288]	; 0x120
    e468:	e8bd8070 	pop	{r4, r5, r6, pc}
    e46c:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e470:	e3401001 	movt	r1, #1
    e474:	e3000b6c 	movw	r0, #2924	; 0xb6c
    e478:	e3400001 	movt	r0, #1
    e47c:	e3a02069 	mov	r2, #105	; 0x69
    e480:	e0856104 	add	r6, r5, r4, lsl #2
    e484:	ebfff8d5 	bl	c7e0 <assertion_failed>
    e488:	e7953104 	ldr	r3, [r5, r4, lsl #2]
    e48c:	e3530000 	cmp	r3, #0
    e490:	1affffef 	bne	e454 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>
    e494:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e498:	e3401001 	movt	r1, #1
    e49c:	e3000b9c 	movw	r0, #2972	; 0xb9c
    e4a0:	e3400001 	movt	r0, #1
    e4a4:	e3a0206a 	mov	r2, #106	; 0x6a
    e4a8:	ebfff8cc 	bl	c7e0 <assertion_failed>
    e4ac:	eaffffe8 	b	e454 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x24>

0000e4b0 <CInterruptSystem::Get()>:
    e4b0:	e92d4010 	push	{r4, lr}
    e4b4:	e3014b9c 	movw	r4, #7068	; 0x1b9c
    e4b8:	e3404001 	movt	r4, #1
    e4bc:	e5940000 	ldr	r0, [r4]
    e4c0:	e3500000 	cmp	r0, #0
    e4c4:	18bd8010 	popne	{r4, pc}
    e4c8:	e3a0208a 	mov	r2, #138	; 0x8a
    e4cc:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e4d0:	e3401001 	movt	r1, #1
    e4d4:	e30f0300 	movw	r0, #62208	; 0xf300
    e4d8:	e3400000 	movt	r0, #0
    e4dc:	ebfff8bf 	bl	c7e0 <assertion_failed>
    e4e0:	e5940000 	ldr	r0, [r4]
    e4e4:	e8bd8010 	pop	{r4, pc}

0000e4e8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
    e4e8:	e3510047 	cmp	r1, #71	; 0x47
    e4ec:	e92d4070 	push	{r4, r5, r6, lr}
    e4f0:	e1a06001 	mov	r6, r1
    e4f4:	e1a05000 	mov	r5, r0
    e4f8:	8a000007 	bhi	e51c <CInterruptSystem::CallIRQHandler(unsigned int)+0x34>
    e4fc:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e500:	e0855106 	add	r5, r5, r6, lsl #2
    e504:	e3540000 	cmp	r4, #0
    e508:	0a00000d 	beq	e544 <CInterruptSystem::CallIRQHandler(unsigned int)+0x5c>
    e50c:	e5950120 	ldr	r0, [r5, #288]	; 0x120
    e510:	e12fff34 	blx	r4
    e514:	e3a00001 	mov	r0, #1
    e518:	e8bd8070 	pop	{r4, r5, r6, pc}
    e51c:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e520:	e3401001 	movt	r1, #1
    e524:	e3000b6c 	movw	r0, #2924	; 0xb6c
    e528:	e3400001 	movt	r0, #1
    e52c:	e3a02090 	mov	r2, #144	; 0x90
    e530:	ebfff8aa 	bl	c7e0 <assertion_failed>
    e534:	e7954106 	ldr	r4, [r5, r6, lsl #2]
    e538:	e0855106 	add	r5, r5, r6, lsl #2
    e53c:	e3540000 	cmp	r4, #0
    e540:	1afffff1 	bne	e50c <CInterruptSystem::CallIRQHandler(unsigned int)+0x24>
    e544:	e1a00006 	mov	r0, r6
    e548:	ebffff9c 	bl	e3c0 <CInterruptSystem::DisableIRQ(unsigned int)>
    e54c:	e1a00004 	mov	r0, r4
    e550:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e554 <CInterruptSystem::InterruptHandler()>:
    e554:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e558:	e3016b9c 	movw	r6, #7068	; 0x1b9c
    e55c:	e3406001 	movt	r6, #1
    e560:	e24dd010 	sub	sp, sp, #16
    e564:	e5963000 	ldr	r3, [r6]
    e568:	e3530000 	cmp	r3, #0
    e56c:	0a00001f 	beq	e5f0 <CInterruptSystem::InterruptHandler()+0x9c>
    e570:	e3a03a0b 	mov	r3, #45056	; 0xb000
    e574:	e3433f00 	movt	r3, #16128	; 0x3f00
    e578:	e28d8008 	add	r8, sp, #8
    e57c:	e3a07000 	mov	r7, #0
    e580:	e5934204 	ldr	r4, [r3, #516]	; 0x204
    e584:	e58d4004 	str	r4, [sp, #4]
    e588:	e5932208 	ldr	r2, [r3, #520]	; 0x208
    e58c:	e58d2008 	str	r2, [sp, #8]
    e590:	e5933200 	ldr	r3, [r3, #512]	; 0x200
    e594:	e6ef3073 	uxtb	r3, r3
    e598:	e58d300c 	str	r3, [sp, #12]
    e59c:	e3540000 	cmp	r4, #0
    e5a0:	0a00000d 	beq	e5dc <CInterruptSystem::InterruptHandler()+0x88>
    e5a4:	e1a05007 	mov	r5, r7
    e5a8:	ea000002 	b	e5b8 <CInterruptSystem::InterruptHandler()+0x64>
    e5ac:	e1b040a4 	lsrs	r4, r4, #1
    e5b0:	e2855001 	add	r5, r5, #1
    e5b4:	0a000008 	beq	e5dc <CInterruptSystem::InterruptHandler()+0x88>
    e5b8:	e3140001 	tst	r4, #1
    e5bc:	0afffffa 	beq	e5ac <CInterruptSystem::InterruptHandler()+0x58>
    e5c0:	e1a01005 	mov	r1, r5
    e5c4:	e5960000 	ldr	r0, [r6]
    e5c8:	ebffffc6 	bl	e4e8 <CInterruptSystem::CallIRQHandler(unsigned int)>
    e5cc:	e3500000 	cmp	r0, #0
    e5d0:	0afffff5 	beq	e5ac <CInterruptSystem::InterruptHandler()+0x58>
    e5d4:	e28dd010 	add	sp, sp, #16
    e5d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e5dc:	e2877020 	add	r7, r7, #32
    e5e0:	e3570060 	cmp	r7, #96	; 0x60
    e5e4:	0afffffa 	beq	e5d4 <CInterruptSystem::InterruptHandler()+0x80>
    e5e8:	e4984004 	ldr	r4, [r8], #4
    e5ec:	eaffffea 	b	e59c <CInterruptSystem::InterruptHandler()+0x48>
    e5f0:	e3001b5c 	movw	r1, #2908	; 0xb5c
    e5f4:	e3401001 	movt	r1, #1
    e5f8:	e30f0300 	movw	r0, #62208	; 0xf300
    e5fc:	e3400000 	movt	r0, #0
    e600:	e3a020a3 	mov	r2, #163	; 0xa3
    e604:	ebfff875 	bl	c7e0 <assertion_failed>
    e608:	eaffffd8 	b	e570 <CInterruptSystem::InterruptHandler()+0x1c>

0000e60c <InterruptHandler>:
    e60c:	eaffffd0 	b	e554 <CInterruptSystem::InterruptHandler()>

0000e610 <CPtrList::CPtrList()>:
    e610:	e3a02000 	mov	r2, #0
    e614:	e5802000 	str	r2, [r0]
    e618:	e12fff1e 	bx	lr

0000e61c <CPtrList::~CPtrList()>:
    e61c:	e5903000 	ldr	r3, [r0]
    e620:	e92d4010 	push	{r4, lr}
    e624:	e1a04000 	mov	r4, r0
    e628:	e3530000 	cmp	r3, #0
    e62c:	0a000005 	beq	e648 <CPtrList::~CPtrList()+0x2c>
    e630:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e634:	e3401001 	movt	r1, #1
    e638:	e3000bc4 	movw	r0, #3012	; 0xbc4
    e63c:	e3400001 	movt	r0, #1
    e640:	e3a0202b 	mov	r2, #43	; 0x2b
    e644:	ebfff865 	bl	c7e0 <assertion_failed>
    e648:	e1a00004 	mov	r0, r4
    e64c:	e8bd8010 	pop	{r4, pc}

0000e650 <CPtrList::GetFirst()>:
    e650:	e5900000 	ldr	r0, [r0]
    e654:	e12fff1e 	bx	lr

0000e658 <CPtrList::GetNext(TPtrListElement*)>:
    e658:	e92d4010 	push	{r4, lr}
    e65c:	e2514000 	subs	r4, r1, #0
    e660:	0a00000c 	beq	e698 <CPtrList::GetNext(TPtrListElement*)+0x40>
    e664:	e5942000 	ldr	r2, [r4]
    e668:	e3043d43 	movw	r3, #19779	; 0x4d43
    e66c:	e345304c 	movt	r3, #20556	; 0x504c
    e670:	e1520003 	cmp	r2, r3
    e674:	0a000005 	beq	e690 <CPtrList::GetNext(TPtrListElement*)+0x38>
    e678:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e67c:	e3401001 	movt	r1, #1
    e680:	e3000be4 	movw	r0, #3044	; 0xbe4
    e684:	e3400001 	movt	r0, #1
    e688:	e3a02036 	mov	r2, #54	; 0x36
    e68c:	ebfff853 	bl	c7e0 <assertion_failed>
    e690:	e5940008 	ldr	r0, [r4, #8]
    e694:	e8bd8010 	pop	{r4, pc}
    e698:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e69c:	e3401001 	movt	r1, #1
    e6a0:	e3000bd4 	movw	r0, #3028	; 0xbd4
    e6a4:	e3400001 	movt	r0, #1
    e6a8:	e3a02035 	mov	r2, #53	; 0x35
    e6ac:	ebfff84b 	bl	c7e0 <assertion_failed>
    e6b0:	eaffffeb 	b	e664 <CPtrList::GetNext(TPtrListElement*)+0xc>

0000e6b4 <CPtrList::GetPtr(TPtrListElement*)>:
    e6b4:	e92d4010 	push	{r4, lr}
    e6b8:	e2514000 	subs	r4, r1, #0
    e6bc:	0a00000c 	beq	e6f4 <CPtrList::GetPtr(TPtrListElement*)+0x40>
    e6c0:	e5942000 	ldr	r2, [r4]
    e6c4:	e3043d43 	movw	r3, #19779	; 0x4d43
    e6c8:	e345304c 	movt	r3, #20556	; 0x504c
    e6cc:	e1520003 	cmp	r2, r3
    e6d0:	0a000005 	beq	e6ec <CPtrList::GetPtr(TPtrListElement*)+0x38>
    e6d4:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e6d8:	e3401001 	movt	r1, #1
    e6dc:	e3000be4 	movw	r0, #3044	; 0xbe4
    e6e0:	e3400001 	movt	r0, #1
    e6e4:	e3a0203e 	mov	r2, #62	; 0x3e
    e6e8:	ebfff83c 	bl	c7e0 <assertion_failed>
    e6ec:	e594000c 	ldr	r0, [r4, #12]
    e6f0:	e8bd8010 	pop	{r4, pc}
    e6f4:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e6f8:	e3401001 	movt	r1, #1
    e6fc:	e3000bd4 	movw	r0, #3028	; 0xbd4
    e700:	e3400001 	movt	r0, #1
    e704:	e3a0203d 	mov	r2, #61	; 0x3d
    e708:	ebfff834 	bl	c7e0 <assertion_failed>
    e70c:	eaffffeb 	b	e6c0 <CPtrList::GetPtr(TPtrListElement*)+0xc>

0000e710 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
    e710:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e714:	e1a06000 	mov	r6, r0
    e718:	e3a00010 	mov	r0, #16
    e71c:	e1a07002 	mov	r7, r2
    e720:	e1a04001 	mov	r4, r1
    e724:	ebffeda0 	bl	9dac <operator new(unsigned int)>
    e728:	e5962000 	ldr	r2, [r6]
    e72c:	e3043d43 	movw	r3, #19779	; 0x4d43
    e730:	e345304c 	movt	r3, #20556	; 0x504c
    e734:	e3520000 	cmp	r2, #0
    e738:	e1a05000 	mov	r5, r0
    e73c:	e580700c 	str	r7, [r0, #12]
    e740:	e5803000 	str	r3, [r0]
    e744:	0a000029 	beq	e7f0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
    e748:	e3540000 	cmp	r4, #0
    e74c:	0a00002e 	beq	e80c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xfc>
    e750:	e5942000 	ldr	r2, [r4]
    e754:	e3043d43 	movw	r3, #19779	; 0x4d43
    e758:	e345304c 	movt	r3, #20556	; 0x504c
    e75c:	e1520003 	cmp	r2, r3
    e760:	0a000005 	beq	e77c <CPtrList::InsertBefore(TPtrListElement*, void*)+0x6c>
    e764:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e768:	e3401001 	movt	r1, #1
    e76c:	e3000c24 	movw	r0, #3108	; 0xc24
    e770:	e3400001 	movt	r0, #1
    e774:	e3a0204f 	mov	r2, #79	; 0x4f
    e778:	ebfff818 	bl	c7e0 <assertion_failed>
    e77c:	e5963000 	ldr	r3, [r6]
    e780:	e1540003 	cmp	r4, r3
    e784:	0a000013 	beq	e7d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
    e788:	e5943004 	ldr	r3, [r4, #4]
    e78c:	e5854008 	str	r4, [r5, #8]
    e790:	e3530000 	cmp	r3, #0
    e794:	e5853004 	str	r3, [r5, #4]
    e798:	0a00000c 	beq	e7d0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
    e79c:	e5931000 	ldr	r1, [r3]
    e7a0:	e3042d43 	movw	r2, #19779	; 0x4d43
    e7a4:	e345204c 	movt	r2, #20556	; 0x504c
    e7a8:	e1510002 	cmp	r1, r2
    e7ac:	0a000006 	beq	e7cc <CPtrList::InsertBefore(TPtrListElement*, void*)+0xbc>
    e7b0:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e7b4:	e3401001 	movt	r1, #1
    e7b8:	e3000c48 	movw	r0, #3144	; 0xc48
    e7bc:	e3400001 	movt	r0, #1
    e7c0:	e3a02061 	mov	r2, #97	; 0x61
    e7c4:	ebfff805 	bl	c7e0 <assertion_failed>
    e7c8:	e5943004 	ldr	r3, [r4, #4]
    e7cc:	e5835008 	str	r5, [r3, #8]
    e7d0:	e5845004 	str	r5, [r4, #4]
    e7d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e7d8:	e3a03000 	mov	r3, #0
    e7dc:	e5845004 	str	r5, [r4, #4]
    e7e0:	e5854008 	str	r4, [r5, #8]
    e7e4:	e5865000 	str	r5, [r6]
    e7e8:	e5853004 	str	r3, [r5, #4]
    e7ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e7f0:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e7f4:	e3401001 	movt	r1, #1
    e7f8:	e3000c08 	movw	r0, #3080	; 0xc08
    e7fc:	e3400001 	movt	r0, #1
    e800:	e3a0204d 	mov	r2, #77	; 0x4d
    e804:	ebfff7f5 	bl	c7e0 <assertion_failed>
    e808:	eaffffce 	b	e748 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x38>
    e80c:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e810:	e3401001 	movt	r1, #1
    e814:	e3000c18 	movw	r0, #3096	; 0xc18
    e818:	e3400001 	movt	r0, #1
    e81c:	e3a0204e 	mov	r2, #78	; 0x4e
    e820:	ebfff7ee 	bl	c7e0 <assertion_failed>
    e824:	eaffffc9 	b	e750 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x40>

0000e828 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
    e828:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e82c:	e1a06000 	mov	r6, r0
    e830:	e1a05001 	mov	r5, r1
    e834:	e3a00010 	mov	r0, #16
    e838:	e1a07002 	mov	r7, r2
    e83c:	ebffed5a 	bl	9dac <operator new(unsigned int)>
    e840:	e3550000 	cmp	r5, #0
    e844:	e3043d43 	movw	r3, #19779	; 0x4d43
    e848:	e345304c 	movt	r3, #20556	; 0x504c
    e84c:	e5803000 	str	r3, [r0]
    e850:	e1a04000 	mov	r4, r0
    e854:	e580700c 	str	r7, [r0, #12]
    e858:	e5963000 	ldr	r3, [r6]
    e85c:	0a000020 	beq	e8e4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xbc>
    e860:	e3530000 	cmp	r3, #0
    e864:	0a00002b 	beq	e918 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xf0>
    e868:	e5952000 	ldr	r2, [r5]
    e86c:	e3043d43 	movw	r3, #19779	; 0x4d43
    e870:	e345304c 	movt	r3, #20556	; 0x504c
    e874:	e1520003 	cmp	r2, r3
    e878:	0a000005 	beq	e894 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
    e87c:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e880:	e3401001 	movt	r1, #1
    e884:	e3000c70 	movw	r0, #3184	; 0xc70
    e888:	e3400001 	movt	r0, #1
    e88c:	e3a0207f 	mov	r2, #127	; 0x7f
    e890:	ebfff7d2 	bl	c7e0 <assertion_failed>
    e894:	e5953008 	ldr	r3, [r5, #8]
    e898:	e5845004 	str	r5, [r4, #4]
    e89c:	e3530000 	cmp	r3, #0
    e8a0:	e5843008 	str	r3, [r4, #8]
    e8a4:	0a00000c 	beq	e8dc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>
    e8a8:	e5931000 	ldr	r1, [r3]
    e8ac:	e3042d43 	movw	r2, #19779	; 0x4d43
    e8b0:	e345204c 	movt	r2, #20556	; 0x504c
    e8b4:	e1510002 	cmp	r1, r2
    e8b8:	0a000006 	beq	e8d8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb0>
    e8bc:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e8c0:	e3401001 	movt	r1, #1
    e8c4:	e3000c94 	movw	r0, #3220	; 0xc94
    e8c8:	e3400001 	movt	r0, #1
    e8cc:	e3a02086 	mov	r2, #134	; 0x86
    e8d0:	ebfff7c2 	bl	c7e0 <assertion_failed>
    e8d4:	e5953008 	ldr	r3, [r5, #8]
    e8d8:	e5834004 	str	r4, [r3, #4]
    e8dc:	e5854008 	str	r4, [r5, #8]
    e8e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e8e4:	e3530000 	cmp	r3, #0
    e8e8:	0a000005 	beq	e904 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xdc>
    e8ec:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e8f0:	e3401001 	movt	r1, #1
    e8f4:	e3000bc4 	movw	r0, #3012	; 0xbc4
    e8f8:	e3400001 	movt	r0, #1
    e8fc:	e3a02075 	mov	r2, #117	; 0x75
    e900:	ebfff7b6 	bl	c7e0 <assertion_failed>
    e904:	e3a03000 	mov	r3, #0
    e908:	e5864000 	str	r4, [r6]
    e90c:	e5843004 	str	r3, [r4, #4]
    e910:	e5843008 	str	r3, [r4, #8]
    e914:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e918:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e91c:	e3401001 	movt	r1, #1
    e920:	e3000c08 	movw	r0, #3080	; 0xc08
    e924:	e3400001 	movt	r0, #1
    e928:	e3a0207e 	mov	r2, #126	; 0x7e
    e92c:	ebfff7ab 	bl	c7e0 <assertion_failed>
    e930:	eaffffcc 	b	e868 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x40>

0000e934 <CPtrList::Remove(TPtrListElement*)>:
    e934:	e92d4070 	push	{r4, r5, r6, lr}
    e938:	e2514000 	subs	r4, r1, #0
    e93c:	e1a05000 	mov	r5, r0
    e940:	0a000047 	beq	ea64 <CPtrList::Remove(TPtrListElement*)+0x130>
    e944:	e5942000 	ldr	r2, [r4]
    e948:	e3043d43 	movw	r3, #19779	; 0x4d43
    e94c:	e345304c 	movt	r3, #20556	; 0x504c
    e950:	e1520003 	cmp	r2, r3
    e954:	0a000005 	beq	e970 <CPtrList::Remove(TPtrListElement*)+0x3c>
    e958:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e95c:	e3401001 	movt	r1, #1
    e960:	e3000be4 	movw	r0, #3044	; 0xbe4
    e964:	e3400001 	movt	r0, #1
    e968:	e3a02091 	mov	r2, #145	; 0x91
    e96c:	ebfff79b 	bl	c7e0 <assertion_failed>
    e970:	e5953000 	ldr	r3, [r5]
    e974:	e1540003 	cmp	r4, r3
    e978:	0a000026 	beq	ea18 <CPtrList::Remove(TPtrListElement*)+0xe4>
    e97c:	e5943004 	ldr	r3, [r4, #4]
    e980:	e3530000 	cmp	r3, #0
    e984:	0a00003d 	beq	ea80 <CPtrList::Remove(TPtrListElement*)+0x14c>
    e988:	e5931000 	ldr	r1, [r3]
    e98c:	e3042d43 	movw	r2, #19779	; 0x4d43
    e990:	e345204c 	movt	r2, #20556	; 0x504c
    e994:	e1510002 	cmp	r1, r2
    e998:	0a000006 	beq	e9b8 <CPtrList::Remove(TPtrListElement*)+0x84>
    e99c:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e9a0:	e3401001 	movt	r1, #1
    e9a4:	e3000d04 	movw	r0, #3332	; 0xd04
    e9a8:	e3400001 	movt	r0, #1
    e9ac:	e3a020a0 	mov	r2, #160	; 0xa0
    e9b0:	ebfff78a 	bl	c7e0 <assertion_failed>
    e9b4:	e5943004 	ldr	r3, [r4, #4]
    e9b8:	e5942008 	ldr	r2, [r4, #8]
    e9bc:	e5832008 	str	r2, [r3, #8]
    e9c0:	e5942008 	ldr	r2, [r4, #8]
    e9c4:	e3520000 	cmp	r2, #0
    e9c8:	0a00000d 	beq	ea04 <CPtrList::Remove(TPtrListElement*)+0xd0>
    e9cc:	e5920000 	ldr	r0, [r2]
    e9d0:	e3041d43 	movw	r1, #19779	; 0x4d43
    e9d4:	e345104c 	movt	r1, #20556	; 0x504c
    e9d8:	e1500001 	cmp	r0, r1
    e9dc:	0a000007 	beq	ea00 <CPtrList::Remove(TPtrListElement*)+0xcc>
    e9e0:	e3a020a5 	mov	r2, #165	; 0xa5
    e9e4:	e3001bb8 	movw	r1, #3000	; 0xbb8
    e9e8:	e3401001 	movt	r1, #1
    e9ec:	e3000cc0 	movw	r0, #3264	; 0xcc0
    e9f0:	e3400001 	movt	r0, #1
    e9f4:	ebfff779 	bl	c7e0 <assertion_failed>
    e9f8:	e5942008 	ldr	r2, [r4, #8]
    e9fc:	e5943004 	ldr	r3, [r4, #4]
    ea00:	e5823004 	str	r3, [r2, #4]
    ea04:	e3a03000 	mov	r3, #0
    ea08:	e1a00004 	mov	r0, r4
    ea0c:	e5843000 	str	r3, [r4]
    ea10:	e8bd4070 	pop	{r4, r5, r6, lr}
    ea14:	eaffece6 	b	9db4 <operator delete(void*)>
    ea18:	e5943008 	ldr	r3, [r4, #8]
    ea1c:	e3530000 	cmp	r3, #0
    ea20:	e5853000 	str	r3, [r5]
    ea24:	0afffff6 	beq	ea04 <CPtrList::Remove(TPtrListElement*)+0xd0>
    ea28:	e5931000 	ldr	r1, [r3]
    ea2c:	e3042d43 	movw	r2, #19779	; 0x4d43
    ea30:	e345204c 	movt	r2, #20556	; 0x504c
    ea34:	e1510002 	cmp	r1, r2
    ea38:	0a000006 	beq	ea58 <CPtrList::Remove(TPtrListElement*)+0x124>
    ea3c:	e3001bb8 	movw	r1, #3000	; 0xbb8
    ea40:	e3401001 	movt	r1, #1
    ea44:	e3000cc0 	movw	r0, #3264	; 0xcc0
    ea48:	e3400001 	movt	r0, #1
    ea4c:	e3a02099 	mov	r2, #153	; 0x99
    ea50:	ebfff762 	bl	c7e0 <assertion_failed>
    ea54:	e5943008 	ldr	r3, [r4, #8]
    ea58:	e3a02000 	mov	r2, #0
    ea5c:	e5832004 	str	r2, [r3, #4]
    ea60:	eaffffe7 	b	ea04 <CPtrList::Remove(TPtrListElement*)+0xd0>
    ea64:	e3001bb8 	movw	r1, #3000	; 0xbb8
    ea68:	e3401001 	movt	r1, #1
    ea6c:	e3000bd4 	movw	r0, #3028	; 0xbd4
    ea70:	e3400001 	movt	r0, #1
    ea74:	e3a02090 	mov	r2, #144	; 0x90
    ea78:	ebfff758 	bl	c7e0 <assertion_failed>
    ea7c:	eaffffb0 	b	e944 <CPtrList::Remove(TPtrListElement*)+0x10>
    ea80:	e3001bb8 	movw	r1, #3000	; 0xbb8
    ea84:	e3401001 	movt	r1, #1
    ea88:	e3000cec 	movw	r0, #3308	; 0xcec
    ea8c:	e3400001 	movt	r0, #1
    ea90:	e3a0209f 	mov	r2, #159	; 0x9f
    ea94:	ebfff751 	bl	c7e0 <assertion_failed>
    ea98:	e5943004 	ldr	r3, [r4, #4]
    ea9c:	eaffffb9 	b	e988 <CPtrList::Remove(TPtrListElement*)+0x54>

0000eaa0 <CPtrList::Find(void*)>:
    eaa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    eaa4:	e5904000 	ldr	r4, [r0]
    eaa8:	e3540000 	cmp	r4, #0
    eaac:	0a000016 	beq	eb0c <CPtrList::Find(void*)+0x6c>
    eab0:	e3048d43 	movw	r8, #19779	; 0x4d43
    eab4:	e345804c 	movt	r8, #20556	; 0x504c
    eab8:	e3007bb8 	movw	r7, #3000	; 0xbb8
    eabc:	e3407001 	movt	r7, #1
    eac0:	e3006be4 	movw	r6, #3044	; 0xbe4
    eac4:	e3406001 	movt	r6, #1
    eac8:	e1a05001 	mov	r5, r1
    eacc:	ea000002 	b	eadc <CPtrList::Find(void*)+0x3c>
    ead0:	e5944008 	ldr	r4, [r4, #8]
    ead4:	e3540000 	cmp	r4, #0
    ead8:	0a00000b 	beq	eb0c <CPtrList::Find(void*)+0x6c>
    eadc:	e5943000 	ldr	r3, [r4]
    eae0:	e3a020b4 	mov	r2, #180	; 0xb4
    eae4:	e1a01007 	mov	r1, r7
    eae8:	e1a00006 	mov	r0, r6
    eaec:	e1530008 	cmp	r3, r8
    eaf0:	0a000000 	beq	eaf8 <CPtrList::Find(void*)+0x58>
    eaf4:	ebfff739 	bl	c7e0 <assertion_failed>
    eaf8:	e594300c 	ldr	r3, [r4, #12]
    eafc:	e1530005 	cmp	r3, r5
    eb00:	1afffff2 	bne	ead0 <CPtrList::Find(void*)+0x30>
    eb04:	e1a00004 	mov	r0, r4
    eb08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    eb0c:	e3a04000 	mov	r4, #0
    eb10:	e1a00004 	mov	r0, r4
    eb14:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000eb18 <CBcmMailBox::CBcmMailBox(unsigned int)>:
    eb18:	e3a02000 	mov	r2, #0
    eb1c:	e8800006 	stm	r0, {r1, r2}
    eb20:	e12fff1e 	bx	lr

0000eb24 <CBcmMailBox::~CBcmMailBox()>:
    eb24:	e12fff1e 	bx	lr

0000eb28 <CBcmMailBox::Flush()>:
    eb28:	e92d4010 	push	{r4, lr}
    eb2c:	e3a04a0b 	mov	r4, #45056	; 0xb000
    eb30:	e3434f00 	movt	r4, #16128	; 0x3f00
    eb34:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    eb38:	e3130101 	tst	r3, #1073741824	; 0x40000000
    eb3c:	18bd8010 	popne	{r4, pc}
    eb40:	e3a00014 	mov	r0, #20
    eb44:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    eb48:	ebffef50 	bl	a890 <CTimer::SimpleMsDelay(unsigned int)>
    eb4c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    eb50:	e3130101 	tst	r3, #1073741824	; 0x40000000
    eb54:	0afffff9 	beq	eb40 <CBcmMailBox::Flush()+0x18>
    eb58:	e8bd8010 	pop	{r4, pc}

0000eb5c <CBcmMailBox::Read()>:
    eb5c:	e5901000 	ldr	r1, [r0]
    eb60:	e3a02a0b 	mov	r2, #45056	; 0xb000
    eb64:	e3432f00 	movt	r2, #16128	; 0x3f00
    eb68:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    eb6c:	e3130101 	tst	r3, #1073741824	; 0x40000000
    eb70:	1afffffc 	bne	eb68 <CBcmMailBox::Read()+0xc>
    eb74:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
    eb78:	e200300f 	and	r3, r0, #15
    eb7c:	e1510003 	cmp	r1, r3
    eb80:	1afffff8 	bne	eb68 <CBcmMailBox::Read()+0xc>
    eb84:	e3c0000f 	bic	r0, r0, #15
    eb88:	e12fff1e 	bx	lr

0000eb8c <CBcmMailBox::Write(unsigned int)>:
    eb8c:	e92d4070 	push	{r4, r5, r6, lr}
    eb90:	e3a02a0b 	mov	r2, #45056	; 0xb000
    eb94:	e3432f00 	movt	r2, #16128	; 0x3f00
    eb98:	e1a05000 	mov	r5, r0
    eb9c:	e1a04001 	mov	r4, r1
    eba0:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
    eba4:	e3530000 	cmp	r3, #0
    eba8:	bafffffc 	blt	eba0 <CBcmMailBox::Write(unsigned int)+0x14>
    ebac:	e314000f 	tst	r4, #15
    ebb0:	0a000005 	beq	ebcc <CBcmMailBox::Write(unsigned int)+0x40>
    ebb4:	e3001d30 	movw	r1, #3376	; 0xd30
    ebb8:	e3401001 	movt	r1, #1
    ebbc:	e3000d40 	movw	r0, #3392	; 0xd40
    ebc0:	e3400001 	movt	r0, #1
    ebc4:	e3a0205c 	mov	r2, #92	; 0x5c
    ebc8:	ebfff704 	bl	c7e0 <assertion_failed>
    ebcc:	e5952000 	ldr	r2, [r5]
    ebd0:	e3a03a0b 	mov	r3, #45056	; 0xb000
    ebd4:	e3433f00 	movt	r3, #16128	; 0x3f00
    ebd8:	e1844002 	orr	r4, r4, r2
    ebdc:	e58348a0 	str	r4, [r3, #2208]	; 0x8a0
    ebe0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ebe4 <CBcmMailBox::WriteRead(unsigned int)>:
    ebe4:	e5903004 	ldr	r3, [r0, #4]
    ebe8:	e92d4070 	push	{r4, r5, r6, lr}
    ebec:	e1a05000 	mov	r5, r0
    ebf0:	e3530000 	cmp	r3, #0
    ebf4:	e1a06001 	mov	r6, r1
    ebf8:	1a00001e 	bne	ec78 <CBcmMailBox::WriteRead(unsigned int)+0x94>
    ebfc:	e3a04a0b 	mov	r4, #45056	; 0xb000
    ec00:	e3434f00 	movt	r4, #16128	; 0x3f00
    ec04:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    ec08:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ec0c:	1a000005 	bne	ec28 <CBcmMailBox::WriteRead(unsigned int)+0x44>
    ec10:	e3a00014 	mov	r0, #20
    ec14:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
    ec18:	ebffef1c 	bl	a890 <CTimer::SimpleMsDelay(unsigned int)>
    ec1c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
    ec20:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ec24:	0afffff9 	beq	ec10 <CBcmMailBox::WriteRead(unsigned int)+0x2c>
    ec28:	e1a00005 	mov	r0, r5
    ec2c:	e1a01006 	mov	r1, r6
    ec30:	ebffffd5 	bl	eb8c <CBcmMailBox::Write(unsigned int)>
    ec34:	e5950000 	ldr	r0, [r5]
    ec38:	e3a02a0b 	mov	r2, #45056	; 0xb000
    ec3c:	e3432f00 	movt	r2, #16128	; 0x3f00
    ec40:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
    ec44:	e3130101 	tst	r3, #1073741824	; 0x40000000
    ec48:	1afffffc 	bne	ec40 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    ec4c:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
    ec50:	e203100f 	and	r1, r3, #15
    ec54:	e1510000 	cmp	r1, r0
    ec58:	1afffff8 	bne	ec40 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
    ec5c:	e5952004 	ldr	r2, [r5, #4]
    ec60:	e3c3400f 	bic	r4, r3, #15
    ec64:	e3520000 	cmp	r2, #0
    ec68:	0a000000 	beq	ec70 <CBcmMailBox::WriteRead(unsigned int)+0x8c>
    ec6c:	ebffec5f 	bl	9df0 <LeaveCritical>
    ec70:	e1a00004 	mov	r0, r4
    ec74:	e8bd8070 	pop	{r4, r5, r6, pc}
    ec78:	ebffec4f 	bl	9dbc <EnterCritical>
    ec7c:	eaffffde 	b	ebfc <CBcmMailBox::WriteRead(unsigned int)+0x18>

0000ec80 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
    ec80:	e92d4010 	push	{r4, lr}
    ec84:	e1a04000 	mov	r4, r0
    ec88:	e3a01000 	mov	r1, #0
    ec8c:	e24dd010 	sub	sp, sp, #16
    ec90:	e3a02c01 	mov	r2, #256	; 0x100
    ec94:	e5943020 	ldr	r3, [r4, #32]
    ec98:	e28d0008 	add	r0, sp, #8
    ec9c:	e583100c 	str	r1, [r3, #12]
    eca0:	e5832010 	str	r2, [r3, #16]
    eca4:	ebffeb31 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    eca8:	e3003408 	movw	r3, #1032	; 0x408
    ecac:	e5942020 	ldr	r2, [r4, #32]
    ecb0:	e28d0008 	add	r0, sp, #8
    ecb4:	e58d3000 	str	r3, [sp]
    ecb8:	e308100b 	movw	r1, #32779	; 0x800b
    ecbc:	e3401004 	movt	r1, #4
    ecc0:	e3003414 	movw	r3, #1044	; 0x414
    ecc4:	ebffeb71 	bl	9a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ecc8:	e3500000 	cmp	r0, #0
    eccc:	e28d0008 	add	r0, sp, #8
    ecd0:	0a000003 	beq	ece4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x64>
    ecd4:	e5943020 	ldr	r3, [r4, #32]
    ecd8:	e593300c 	ldr	r3, [r3, #12]
    ecdc:	e3530000 	cmp	r3, #0
    ece0:	0a000003 	beq	ecf4 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x74>
    ece4:	ebffeb27 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    ece8:	e3a00000 	mov	r0, #0
    ecec:	e28dd010 	add	sp, sp, #16
    ecf0:	e8bd8010 	pop	{r4, pc}
    ecf4:	ebffeb23 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    ecf8:	e3a00001 	mov	r0, #1
    ecfc:	e28dd010 	add	sp, sp, #16
    ed00:	e8bd8010 	pop	{r4, pc}

0000ed04 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
    ed04:	e92d4030 	push	{r4, r5, lr}
    ed08:	e3510000 	cmp	r1, #0
    ed0c:	13520000 	cmpne	r2, #0
    ed10:	e1a04000 	mov	r4, r0
    ed14:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    ed18:	e3a05000 	mov	r5, #0
    ed1c:	e8840006 	stm	r4, {r1, r2}
    ed20:	e59dc03c 	ldr	ip, [sp, #60]	; 0x3c
    ed24:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    ed28:	e5843010 	str	r3, [r4, #16]
    ed2c:	e584c00c 	str	ip, [r4, #12]
    ed30:	e5840008 	str	r0, [r4, #8]
    ed34:	e5845014 	str	r5, [r4, #20]
    ed38:	e5845018 	str	r5, [r4, #24]
    ed3c:	e584501c 	str	r5, [r4, #28]
    ed40:	e5845020 	str	r5, [r4, #32]
    ed44:	1a000011 	bne	ed90 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
    ed48:	e28d000c 	add	r0, sp, #12
    ed4c:	ebffeb07 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    ed50:	e3a03014 	mov	r3, #20
    ed54:	e58d5000 	str	r5, [sp]
    ed58:	e28d000c 	add	r0, sp, #12
    ed5c:	e3a01003 	mov	r1, #3
    ed60:	e3401004 	movt	r1, #4
    ed64:	e08d2003 	add	r2, sp, r3
    ed68:	ebffeb48 	bl	9a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ed6c:	e1500005 	cmp	r0, r5
    ed70:	1a000027 	bne	ee14 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
    ed74:	e3a02d0a 	mov	r2, #640	; 0x280
    ed78:	e3a03e1e 	mov	r3, #480	; 0x1e0
    ed7c:	e884000c 	stm	r4, {r2, r3}
    ed80:	e28d000c 	add	r0, sp, #12
    ed84:	ebffeaff 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    ed88:	e5940008 	ldr	r0, [r4, #8]
    ed8c:	e5943010 	ldr	r3, [r4, #16]
    ed90:	e3500000 	cmp	r0, #0
    ed94:	0a00001a 	beq	ee04 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    ed98:	e594200c 	ldr	r2, [r4, #12]
    ed9c:	e3520000 	cmp	r2, #0
    eda0:	0a000017 	beq	ee04 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x100>
    eda4:	e3530008 	cmp	r3, #8
    eda8:	8a000007 	bhi	edcc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xc8>
    edac:	e3000414 	movw	r0, #1044	; 0x414
    edb0:	ebffebfe 	bl	9db0 <operator new[](unsigned int)>
    edb4:	e3a02b01 	mov	r2, #1024	; 0x400
    edb8:	e5840020 	str	r0, [r4, #32]
    edbc:	e3a01000 	mov	r1, #0
    edc0:	e2800014 	add	r0, r0, #20
    edc4:	ebffef0c 	bl	a9fc <memset>
    edc8:	e5943010 	ldr	r3, [r4, #16]
    edcc:	e3002df0 	movw	r2, #3568	; 0xdf0
    edd0:	e3402001 	movt	r2, #1
    edd4:	e5945000 	ldr	r5, [r4]
    edd8:	e1a00004 	mov	r0, r4
    eddc:	e594e004 	ldr	lr, [r4, #4]
    ede0:	e594c008 	ldr	ip, [r4, #8]
    ede4:	e594100c 	ldr	r1, [r4, #12]
    ede8:	e582500c 	str	r5, [r2, #12]
    edec:	e582e010 	str	lr, [r2, #16]
    edf0:	e582c020 	str	ip, [r2, #32]
    edf4:	e5821024 	str	r1, [r2, #36]	; 0x24
    edf8:	e5823034 	str	r3, [r2, #52]	; 0x34
    edfc:	e28dd02c 	add	sp, sp, #44	; 0x2c
    ee00:	e8bd8030 	pop	{r4, r5, pc}
    ee04:	e8940006 	ldm	r4, {r1, r2}
    ee08:	e5841008 	str	r1, [r4, #8]
    ee0c:	e584200c 	str	r2, [r4, #12]
    ee10:	eaffffe3 	b	eda4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0xa0>
    ee14:	e59d2020 	ldr	r2, [sp, #32]
    ee18:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    ee1c:	e2421d0a 	sub	r1, r2, #640	; 0x280
    ee20:	e5842000 	str	r2, [r4]
    ee24:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
    ee28:	e5843004 	str	r3, [r4, #4]
    ee2c:	e3520f96 	cmp	r2, #600	; 0x258
    ee30:	93510c05 	cmpls	r1, #1280	; 0x500
    ee34:	9affffd1 	bls	ed80 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x7c>
    ee38:	eaffffcd 	b	ed74 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x70>

0000ee3c <CBcmFrameBuffer::~CBcmFrameBuffer()>:
    ee3c:	e92d4010 	push	{r4, lr}
    ee40:	e1a04000 	mov	r4, r0
    ee44:	e5900020 	ldr	r0, [r0, #32]
    ee48:	ebffebd9 	bl	9db4 <operator delete(void*)>
    ee4c:	e1a00004 	mov	r0, r4
    ee50:	e8bd8010 	pop	{r4, pc}

0000ee54 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
    ee54:	e5903010 	ldr	r3, [r0, #16]
    ee58:	e3530008 	cmp	r3, #8
    ee5c:	812fff1e 	bxhi	lr
    ee60:	e5900020 	ldr	r0, [r0, #32]
    ee64:	e1a03982 	lsl	r3, r2, #19
    ee68:	e1a0c5a2 	lsr	ip, r2, #11
    ee6c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
    ee70:	e1a02282 	lsl	r2, r2, #5
    ee74:	e0801101 	add	r1, r0, r1, lsl #2
    ee78:	e183318c 	orr	r3, r3, ip, lsl #3
    ee7c:	e38334ff 	orr	r3, r3, #-16777216	; 0xff000000
    ee80:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
    ee84:	e1822003 	orr	r2, r2, r3
    ee88:	e5812014 	str	r2, [r1, #20]
    ee8c:	e12fff1e 	bx	lr

0000ee90 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
    ee90:	e5903010 	ldr	r3, [r0, #16]
    ee94:	e3530008 	cmp	r3, #8
    ee98:	95903020 	ldrls	r3, [r0, #32]
    ee9c:	90831101 	addls	r1, r3, r1, lsl #2
    eea0:	95812014 	strls	r2, [r1, #20]
    eea4:	e12fff1e 	bx	lr

0000eea8 <CBcmFrameBuffer::Initialize()>:
    eea8:	e92d4070 	push	{r4, r5, r6, lr}
    eeac:	e1a05000 	mov	r5, r0
    eeb0:	e3006df0 	movw	r6, #3568	; 0xdf0
    eeb4:	e3406001 	movt	r6, #1
    eeb8:	e24dd008 	sub	sp, sp, #8
    eebc:	e1a0000d 	mov	r0, sp
    eec0:	ebffeaaa 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    eec4:	e1a01006 	mov	r1, r6
    eec8:	e1a0000d 	mov	r0, sp
    eecc:	e3a02070 	mov	r2, #112	; 0x70
    eed0:	ebffeab1 	bl	999c <CBcmPropertyTags::GetTags(void*, unsigned int)>
    eed4:	e2504000 	subs	r4, r0, #0
    eed8:	0a00001e 	beq	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    eedc:	e596400c 	ldr	r4, [r6, #12]
    eee0:	e3540000 	cmp	r4, #0
    eee4:	0a00001b 	beq	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    eee8:	e5964010 	ldr	r4, [r6, #16]
    eeec:	e3540000 	cmp	r4, #0
    eef0:	0a000018 	beq	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    eef4:	e5964020 	ldr	r4, [r6, #32]
    eef8:	e3540000 	cmp	r4, #0
    eefc:	0a000015 	beq	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    ef00:	e5964024 	ldr	r4, [r6, #36]	; 0x24
    ef04:	e3540000 	cmp	r4, #0
    ef08:	0a000012 	beq	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    ef0c:	e5964034 	ldr	r4, [r6, #52]	; 0x34
    ef10:	e3540000 	cmp	r4, #0
    ef14:	0a00000f 	beq	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    ef18:	e5964058 	ldr	r4, [r6, #88]	; 0x58
    ef1c:	e3540000 	cmp	r4, #0
    ef20:	0a00000c 	beq	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    ef24:	e5953010 	ldr	r3, [r5, #16]
    ef28:	e3c44103 	bic	r4, r4, #-1073741824	; 0xc0000000
    ef2c:	e596205c 	ldr	r2, [r6, #92]	; 0x5c
    ef30:	e3530008 	cmp	r3, #8
    ef34:	e596306c 	ldr	r3, [r6, #108]	; 0x6c
    ef38:	e5854014 	str	r4, [r5, #20]
    ef3c:	83a04001 	movhi	r4, #1
    ef40:	e5852018 	str	r2, [r5, #24]
    ef44:	e585301c 	str	r3, [r5, #28]
    ef48:	8a000002 	bhi	ef58 <CBcmFrameBuffer::Initialize()+0xb0>
    ef4c:	e1a00005 	mov	r0, r5
    ef50:	ebffff4a 	bl	ec80 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
    ef54:	e1a04000 	mov	r4, r0
    ef58:	e1a0000d 	mov	r0, sp
    ef5c:	ebffea89 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    ef60:	e1a00004 	mov	r0, r4
    ef64:	e28dd008 	add	sp, sp, #8
    ef68:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ef6c <CBcmFrameBuffer::GetWidth() const>:
    ef6c:	e5900000 	ldr	r0, [r0]
    ef70:	e12fff1e 	bx	lr

0000ef74 <CBcmFrameBuffer::GetHeight() const>:
    ef74:	e5900004 	ldr	r0, [r0, #4]
    ef78:	e12fff1e 	bx	lr

0000ef7c <CBcmFrameBuffer::GetVirtWidth() const>:
    ef7c:	e5900008 	ldr	r0, [r0, #8]
    ef80:	e12fff1e 	bx	lr

0000ef84 <CBcmFrameBuffer::GetVirtHeight() const>:
    ef84:	e590000c 	ldr	r0, [r0, #12]
    ef88:	e12fff1e 	bx	lr

0000ef8c <CBcmFrameBuffer::GetPitch() const>:
    ef8c:	e590001c 	ldr	r0, [r0, #28]
    ef90:	e12fff1e 	bx	lr

0000ef94 <CBcmFrameBuffer::GetDepth() const>:
    ef94:	e5900010 	ldr	r0, [r0, #16]
    ef98:	e12fff1e 	bx	lr

0000ef9c <CBcmFrameBuffer::GetBuffer() const>:
    ef9c:	e5900014 	ldr	r0, [r0, #20]
    efa0:	e12fff1e 	bx	lr

0000efa4 <CBcmFrameBuffer::GetSize() const>:
    efa4:	e5900018 	ldr	r0, [r0, #24]
    efa8:	e12fff1e 	bx	lr

0000efac <CBcmFrameBuffer::UpdatePalette()>:
    efac:	e5903010 	ldr	r3, [r0, #16]
    efb0:	e3530008 	cmp	r3, #8
    efb4:	9a000001 	bls	efc0 <CBcmFrameBuffer::UpdatePalette()+0x14>
    efb8:	e3a00001 	mov	r0, #1
    efbc:	e12fff1e 	bx	lr
    efc0:	eaffff2e 	b	ec80 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

0000efc4 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
    efc4:	e92d4070 	push	{r4, r5, r6, lr}
    efc8:	e1a05001 	mov	r5, r1
    efcc:	e1a06002 	mov	r6, r2
    efd0:	e24dd028 	sub	sp, sp, #40	; 0x28
    efd4:	e28d000c 	add	r0, sp, #12
    efd8:	ebffea64 	bl	9970 <CBcmPropertyTags::CBcmPropertyTags()>
    efdc:	e3a03008 	mov	r3, #8
    efe0:	e58d3000 	str	r3, [sp]
    efe4:	e3a03014 	mov	r3, #20
    efe8:	e28d000c 	add	r0, sp, #12
    efec:	e3081009 	movw	r1, #32777	; 0x8009
    eff0:	e3401004 	movt	r1, #4
    eff4:	e08d2003 	add	r2, sp, r3
    eff8:	e58d5020 	str	r5, [sp, #32]
    effc:	e58d6024 	str	r6, [sp, #36]	; 0x24
    f000:	ebffeaa2 	bl	9a90 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    f004:	e2504000 	subs	r4, r0, #0
    f008:	0a000006 	beq	f028 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x64>
    f00c:	e59d3020 	ldr	r3, [sp, #32]
    f010:	e1550003 	cmp	r5, r3
    f014:	13a04000 	movne	r4, #0
    f018:	059d4024 	ldreq	r4, [sp, #36]	; 0x24
    f01c:	00444006 	subeq	r4, r4, r6
    f020:	016f4f14 	clzeq	r4, r4
    f024:	01a042a4 	lsreq	r4, r4, #5
    f028:	e28d000c 	add	r0, sp, #12
    f02c:	ebffea55 	bl	9988 <CBcmPropertyTags::~CBcmPropertyTags()>
    f030:	e1a00004 	mov	r0, r4
    f034:	e28dd028 	add	sp, sp, #40	; 0x28
    f038:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f03c <CDevice::~CDevice()>:
    f03c:	e12fff1e 	bx	lr

0000f040 <CDevice::Read(void*, unsigned int)>:
    f040:	e3e00000 	mvn	r0, #0
    f044:	e12fff1e 	bx	lr

0000f048 <CDevice::Seek(unsigned long long)>:
    f048:	e3e00000 	mvn	r0, #0
    f04c:	e3e01000 	mvn	r1, #0
    f050:	e12fff1e 	bx	lr

0000f054 <CDevice::~CDevice()>:
    f054:	e92d4010 	push	{r4, lr}
    f058:	e1a04000 	mov	r4, r0
    f05c:	ebffeb54 	bl	9db4 <operator delete(void*)>
    f060:	e1a00004 	mov	r0, r4
    f064:	e8bd8010 	pop	{r4, pc}

0000f068 <CDevice::CDevice()>:
    f068:	e59f3004 	ldr	r3, [pc, #4]	; f074 <CDevice::CDevice()+0xc>
    f06c:	e5803000 	str	r3, [r0]
    f070:	e12fff1e 	bx	lr
    f074:	00010d5c 	.word	0x00010d5c
